[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "furbox"
version = "0.1"

description = "Python library for various furry media utilities"
readme = "README.md"

requires-python = ">=3.10"

dependencies = [
    "attrs",
    "cattrs",
    "requests",
    "typing-extensions",
]

[project.optional-dependencies]
dev = [
    "flake8",
    "flake8-annotations",
    "flake8-assertive",
    "flake8-builtins",
    "flake8-bugbear",
    "flake8-commas",
    "flake8-comprehensions",
    "flake8-docstrings",
    "flake8-eradicate",
    "flake8-function-order",
    "flake8-import-order",
    "flake8-pyproject",
    "flake8-todo",
    "pep8-naming",
    "pre-commit",
    "pydoclint",
    "pytest",
    "pytest-cov",
]

[project.scripts]
furbox = "furbox.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["furbox*"]

[tool.yamlfix]  # YAML auto-formatter - https://lyz-code.github.io/yamlfix/
allow_duplicate_keys = true
line_length = 120
none_representation = "null"
indent_mapping = 4
indent_offset = 0
indent_sequence = 4
explicit_start = false
preserve_quotes = true

# Flake8 python linter - see https://github.com/PyCQA/flake8
# Using a plugin to support pyproject.toml - see https://github.com/john-hen/Flake8-pyproject
[tool.flake8]
max-line-length = 120
per-file-ignores = [
    # Required for main CLI paradigm, as modules must be imported for subparser config
    "furbox/main.py:F401",  # F401 - Module imported but unused

    # TODO - This may be removed when using new pytest paradigm
    # Required for all test files, due to the boilerplate for relative imports
    "tests/*:E402",  # E402 - Module level import not at top of file

    # Pytest handles relative imports for "tests", but flake8 will still flag it
    "tests/**:E902,F401,F811",  # E902 - IOError
                                # F401 - Module imported but unused
                                # F811 - Redefinition of unused variable
]
extend-ignore = [
    "ANN002",  # Missing type annotation for *args
    "ANN003",  # Missing type annotation for **kwargs
    "ANN101",  # Missing type annotation for self in method
    "ANN102",  # Missing type annotation for cls in classmethod
    "CCE001",  # Wrong class attributes order
    "D104",    # Missing docstring in public package
    "D107",    # Missing docstring in __init__
    "D210",    # No whitespaces allowed surrounding docstring text
    "I201",    # Missing newline between import groups
    "T000",    # Todo note found
]

# Pydoclint config
style = "google"

# Consider furbox and tests as local packages
import-order-style = "edited"
application-import-names = [
    "furbox",
    "tests",
]

# Ruff python linter - see https://github.com/astral-sh/ruff
[tool.ruff]
line-length = 120

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint]
# Enable all linting options, then manually disable what is not required
select = ["ALL"]

ignore = [
    # Disable whole sets of rules
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "FBT", # flake8-boolean-trap
    "G",   # flake8-logging-format
    "S",   # flake8-bandit
    "T20", # flake8-print
    "TD",  # flake8-todos

    "ANN002", # Missing type annotation for `*args`
    "ANN003", # Missing type annotation for `**kwargs`
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed

    "BLE001", # Do not catch blind exception

    "C901", # Structure is too complex

    "D104", # Missing docstring in public package
    "D107", # Missing docstring in `__init__`
    "D210", # No whitespaces allowed surrounding docstring text

    "E701", # Multiple statements on one line (colon)

    "FA102", # Missing `from __future__ import annotations`

    "FIX002", # Line contains TODO, consider resolving the issue

    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments in function definition
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison

    "PT006", # Wrong name(s) type in `@pytest.mark.parametrize`

    "PTH123", # `open()` should be replaced by `Path.open()` (TODO - Can eventually disable)

    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF013", # PEP 484 prohibits implicit Optional

    "SLF001", # Private member accessed (TODO - Can eventually disable)

    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY301", # Abstract raise to an inner function

    "UP024", # Replace aliased errors with `OSError`
    "UP035", # Import from {target} instead: {names}
]

[tool.ruff.lint.isort]
# Enforces consistency with flake8 isort config
# See https://docs.astral.sh/ruff/settings/#lintisort
order-by-type = false

[tool.ruff.lint.per-file-ignores]
"furbox/main.py" = [
    "F401", # Module imported but unused
]

"tests/*" = [
    "E402", # Module level import not at top of file
    "F401", # Module imported but unused
    "F811", # Redefinition of unused variable
    "RUF001", # String contains ambiguous character
    "S101", # Use of `assert` detected
    "S106", # Possible hardcoded password assigned to argument
    "SLF001", # Private member accessed
]

[tool.ruff.lint.pydocstyle]
convention = "google"
