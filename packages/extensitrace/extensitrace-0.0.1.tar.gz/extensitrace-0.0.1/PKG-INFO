Metadata-Version: 2.1
Name: extensitrace
Version: 0.0.1
Summary: A logger for tracking your agent workflow
Home-page: https://github.com/Extensible-AI/extensilog/
Author: Parth Sareen, Omkaar Kamath
Author-email: parth@extensible.dev, omkaar@extensible.dev
License: Apache License 2.0
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: annotated-types==0.6.0
Requires-Dist: anyio==4.3.0
Requires-Dist: certifi==2024.2.2
Requires-Dist: charset-normalizer==3.3.2
Requires-Dist: distro==1.9.0
Requires-Dist: dnspython==2.6.1
Requires-Dist: h11==0.14.0
Requires-Dist: httpcore==1.0.5
Requires-Dist: httpx==0.27.0
Requires-Dist: idna==3.7
Requires-Dist: openai==1.14.3
Requires-Dist: psycopg2-binary==2.9.9
Requires-Dist: pydantic==2.6.4
Requires-Dist: pydantic_core==2.16.3
Requires-Dist: pymongo==4.6.3
Requires-Dist: python-dotenv==1.0.1
Requires-Dist: PyYAML==6.0.1
Requires-Dist: requests==2.31.0
Requires-Dist: sniffio==1.3.1
Requires-Dist: tqdm==4.66.3
Requires-Dist: typing_extensions==4.10.0
Requires-Dist: urllib3==2.2.1

# Extensilog 
## Key Features
### Python Package for Agent Workflow Tracking

ExtensiLogger is designed to facilitate comprehensive logging and tracking within agent-based systems or workflows. It provides a structured way to log events, data, and metrics, making it easier to monitor and analyze the behavior of agents in various environments.

### Usage 

The package can be easily installed using pip. Navigate to the extensilog directory and install using the following commands:

#### Install from PyPI
`pip install extensilog`

#### Incorporating in code

```python
from extensilog import MongoConnector

client = OpenAI() # Optional to pass in
connector = MongoConnector(...) # Optional connector, defaults to local
el: Extensilog = Extensilog(connector=connector)

el.log(track=True)
def top_level_func():
    lower_level_func()
    
el.log()
def lower_level_func():
    pass
```
