[tool.poetry]
name = "zprp-ffmpeg"
version = "2.1.1"
description = "ffmpeg filter graph bindings for python"
authors = ["Your Name <you@example.com>"]
license = "MIT"
readme = "README.rst"

[tool.poetry.dependencies]
python = "^3.8"
pytest = "^8.1.1"
pycparser = "^2.22"
tqdm = "^4.66.4"
networkx = "^2.6.3"
matplotlib = "^3.4.3"

[tool.poetry.group.typecheck.dependencies]
types-tqdm = "^4.66.0.20240417"
mypy = "^1.10.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
extend-exclude = ["static", "ci/templates"]
line-length = 140
src = ["src", "tests"]
target-version = "py38"


[tool.ruff.lint.per-file-ignores]
"ci/*" = ["S"]

[tool.ruff.lint]
ignore = [
    "RUF001", # ruff-specific rules ambiguous-unicode-character-string
    "S101", # flake8-bandit assert
    "S308", # flake8-bandit suspicious-mark-safe-usage
    "E501", # pycodestyle line-too-long
    "E741", # "I,O,l" variable names (generated ffmpeg filters have that...)
]
select = [
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "E", # pycodestyle errors
    "EXE", # flake8-executable
    "F", # pyflakes
    "I", # isort
    "INT", # flake8-gettext
    "PIE", # flake8-pie
    "PLC", # pylint convention
    "PLE", # pylint errors
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RUF", # ruff-specific rules
    "S", # flake8-bandit
    "UP", # pyupgrade
    "W", # pycodestyle warnings
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.isort]
forced-separate = ["conftest"]
force-single-line = true

[tool.black]
line-length = 140
target-version = ["py38"]
force-exclude = "tests.*"
[tool.mypy]
implicit_reexport = true
exclude = ["src/filters_autogen/FFmpeg/*","src/filters_autogen/pycparser/*", "tests/assets/"]
