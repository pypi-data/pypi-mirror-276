# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from .....core.api_error import ApiError
from .....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .....core.jsonable_encoder import jsonable_encoder
from .errors.too_many_requests_error import TooManyRequestsError
from .types.auth_get_token_request import AuthGetTokenRequest
from .types.auth_get_token_response import AuthGetTokenResponse
from .types.too_many_requests_error_type import TooManyRequestsErrorType

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class V2Client:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_token(self, *, request: AuthGetTokenRequest) -> AuthGetTokenResponse:
        """
        Authenticating with the Candid Health API.

        Candid Health utilizes the [OAuth 2.0 bearer token authentication scheme](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication) in our auth flow. You obtain the bearer token for all
        subsequent API requests via the `/auth/token` endpoint defined below, which requires you to provide your `client_id` and `client_secret`. Your `client_id` and `client_secret` can be [generated](https://support.joincandidhealth.com/hc/en-us/articles/23065219476244--Generating-Candid-API-Keys) from the "Users & Credentials" tab by your org admin.

        The bearer token should be provided in the `Authorization` header for all subsequent API calls.

        **Warning:**

        The bearer token expires 5 hours after it has been created. After it has expired, the client will receive an "HTTP 401
        Unauthorized" error, at which point the client should generate a new token. It is important that tokens be reused between requests; if the client attempts to generate a token too often, it will be rate-limited and will receive an "HTTP 429 Too Many Requests" error.

        Parameters:
            - request: AuthGetTokenRequest.
        ---
        from candid.client import CandidApi
        from candid.resources.auth.v_2 import AuthGetTokenRequest

        client = CandidApi(
            token="YOUR_TOKEN",
        )
        client.auth.v_2.get_token(
            request=AuthGetTokenRequest(
                client_id="YOUR_CLIENT_ID",
                client_secret="YOUR_CLIENT_SECRET",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/auth/v2/token"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AuthGetTokenResponse, _response_json)  # type: ignore
        if "errorName" in _response_json:
            if _response_json["errorName"] == "TooManyRequestsError":
                raise TooManyRequestsError(
                    pydantic.parse_obj_as(TooManyRequestsErrorType, _response_json["content"])  # type: ignore
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncV2Client:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_token(self, *, request: AuthGetTokenRequest) -> AuthGetTokenResponse:
        """
        Authenticating with the Candid Health API.

        Candid Health utilizes the [OAuth 2.0 bearer token authentication scheme](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication) in our auth flow. You obtain the bearer token for all
        subsequent API requests via the `/auth/token` endpoint defined below, which requires you to provide your `client_id` and `client_secret`. Your `client_id` and `client_secret` can be [generated](https://support.joincandidhealth.com/hc/en-us/articles/23065219476244--Generating-Candid-API-Keys) from the "Users & Credentials" tab by your org admin.

        The bearer token should be provided in the `Authorization` header for all subsequent API calls.

        **Warning:**

        The bearer token expires 5 hours after it has been created. After it has expired, the client will receive an "HTTP 401
        Unauthorized" error, at which point the client should generate a new token. It is important that tokens be reused between requests; if the client attempts to generate a token too often, it will be rate-limited and will receive an "HTTP 429 Too Many Requests" error.

        Parameters:
            - request: AuthGetTokenRequest.
        ---
        from candid.client import AsyncCandidApi
        from candid.resources.auth.v_2 import AuthGetTokenRequest

        client = AsyncCandidApi(
            token="YOUR_TOKEN",
        )
        await client.auth.v_2.get_token(
            request=AuthGetTokenRequest(
                client_id="YOUR_CLIENT_ID",
                client_secret="YOUR_CLIENT_SECRET",
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/auth/v2/token"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AuthGetTokenResponse, _response_json)  # type: ignore
        if "errorName" in _response_json:
            if _response_json["errorName"] == "TooManyRequestsError":
                raise TooManyRequestsError(
                    pydantic.parse_obj_as(TooManyRequestsErrorType, _response_json["content"])  # type: ignore
                )
        raise ApiError(status_code=_response.status_code, body=_response_json)
