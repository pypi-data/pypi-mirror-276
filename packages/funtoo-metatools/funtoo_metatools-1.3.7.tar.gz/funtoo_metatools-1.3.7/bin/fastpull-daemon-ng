#!/usr/bin/python3
import asyncio
import os

import tornado.gen
import tornado.ioloop
import tornado.web
from pymongo import MongoClient
from subpop.hub import Hub
from tornado.httpserver import HTTPServer
from tornado.log import enable_pretty_logging

hub = Hub()

import dyne.org.funtoo.metatools.pkgtools as pkgtools

from metatools.config.autogen import StoreConfig

enable_pretty_logging()


class UptimeHandler(tornado.web.RequestHandler):
	def get(self):
		self.set_status(200)
		return


redirect_url = "https://direct-cdn.funtoo.org/"


class DistfileHashHandler(tornado.web.RequestHandler):
	def get(self, hp1, hp2, hp3, full_hash):
		if hp1 != full_hash[0:2] or hp2 != full_hash[2:4] or hp3 != full_hash[4:6] or len(full_hash) != 128:
			self.set_status(503)
			return
		# Look directly in the BLOS for the hash:
		obj = pkgtools.model.blos.read({"hashes.sha512": full_hash})
		if obj is not None and obj.blob is not None:
			redirect_subpath = pkgtools.model.blos.backend.get_relative_path_to_root(obj.blob.path)
			url = redirect_url + "/blos/" + redirect_subpath
			self.redirect(url, permanent=False)
		else:
			self.set_status(404)


class DirectHashLayoutConfHandler(tornado.web.RequestHandler):
	def get(self):
		self.set_header("Content-Type", "text/plain")
		self.write("""[structure]
0=content-hash SHA512 8:8:8
1=flat
""")


settings = {
	"xsrf_cookies": False,
	"cache_json": False,
}


class Application(tornado.web.Application):

	name = "direct.funtoo.org distfile service"
	handlers = [
		(r"/up", UptimeHandler),
		(r"/distfiles/layout.conf", DirectHashLayoutConfHandler),
		(r"/layout.conf", DirectHashLayoutConfHandler),
		(r"/([0-9a-f][0-9a-f])/([0-9a-f][0-9a-f])/([0-9a-f][0-9a-f])/([0-9a-f]*)", DistfileHashHandler),
		(r"/distfiles/([0-9a-f][0-9a-f])/([0-9a-f][0-9a-f])/([0-9a-f][0-9a-f])/([0-9a-f]*)", DistfileHashHandler),
	]

	def __init__(self):
		tornado.web.Application.__init__(self, self.handlers, **settings)


async def main_thread():
	await pkgtools.launch(StoreConfig, fastpull_scope="local")
	application = Application()
	http_server = HTTPServer(application, xheaders=True)
	http_server.bind(8080, "127.0.0.1")
	http_server.start()
	# prevent function from ending:
	while True:
		# can potentially do something periodic here:
		await asyncio.sleep(1)

asyncio.run(main_thread())

# vim: ts=4 sw=4 noet
