#!/usr/bin/env python3

import argparse
import asyncio
import os
import signal
import sys

import psutil
from subpop.hub import Hub

from metatools.config.merge import MergeConfig
from metatools.kit import MetaRepoJobController

hub = Hub()


class MergeError(Exception):
	pass


# Added this to properly and immediately terminate all tasks and subprocesses:


async def do_process_teardown():
	cur_proc = psutil.Process()
	children = cur_proc.children()
	for pid in children:
		try:
			pid.send_signal(signal.SIGKILL)
		except ProcessLookupError:
			pass

	async def cleanup():
		tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
		[task.cancel() for task in tasks]

	await cleanup()

	# Kill any active threads:
	os.kill(os.getpid(), 9)


async def main_thread(args):
	model = MergeConfig()
	await model.initialize(
		release=args.release,
		prod=args.prod,
		push=not args.nopush,
		create_branches=args.create_branches,
		fixups_url=args.fixups_url,
		fixups_branch=args.fixups_branch,
		debug=args.debug,
		howdy=args.howdy
	)
	controller = MetaRepoJobController(model, write=True)
	try:
		success = await controller.generate()
		return success
	except KeyboardInterrupt:
		model.log.error("Keyboard interrupt -- shutting down.")
		await do_process_teardown()
	return False

CLI_CONFIG = {
	"fixups_url": {"type": str},
	"fixups_branch": {"type": str, "default": "master"},
	"force": {"action": "store_true", "default": False},
	"nopush": {"action": "store_true", "default": False},
	"prod": {"action": "store_true", "default": False},
	"create_branches": {"action": "store_true", "default": False},
	"release": {"positional": True},
	"debug": {"action": "store_true", "default": False},
	"howdy": {"action": "store_true", "default": False}
}


def parse_args():
	ap = argparse.ArgumentParser()
	for arg, kwargs in CLI_CONFIG.items():
		if "os" in kwargs:
			del kwargs["os"]
		if "positional" in kwargs and kwargs["positional"]:
			new_kwargs = kwargs.copy()
			del new_kwargs["positional"]
			ap.add_argument(arg, **new_kwargs)
		else:
			ap.add_argument("--" + arg, **kwargs)
	return ap.parse_args()


if __name__ == "__main__":
	args = parse_args()
	if hub.LOOP.run_until_complete(main_thread(args)):
		sys.exit(0)
	else:
		sys.exit(1)

# vim: ts=4 sw=4 noet
