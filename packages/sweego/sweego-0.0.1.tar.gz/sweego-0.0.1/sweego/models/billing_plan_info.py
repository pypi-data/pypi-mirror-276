# coding: utf-8

"""
    Sweego API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.6.5a
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sweego.models.mbz_swg_pgsql_models_sweego_conf_joins_billing_plan_info_data import MbzSwgPgsqlModelsSweegoConfJoinsBillingPlanInfoData
from sweego.models.period_type import PeriodType
from typing import Optional, Set
from typing_extensions import Self

class BillingPlanInfo(BaseModel):
    """
    BillingPlanInfo
    """ # noqa: E501
    id: Annotated[int, Field(le=2147483647, strict=True, ge=0)]
    range_name: StrictStr
    plan_name: StrictStr
    price: StrictInt
    commitment: PeriodType
    current_period_start_dt: datetime
    current_period_end_dt: datetime
    subscription_dt: datetime
    termination_dt: Optional[datetime] = None
    active: StrictBool
    renews_at: Optional[datetime] = None
    next_payment_at: Optional[datetime] = None
    next_payment_estimated_price: Optional[StrictInt] = None
    next_subscription: Optional[MbzSwgPgsqlModelsSweegoConfJoinsBillingPlanInfoData] = None
    __properties: ClassVar[List[str]] = ["id", "range_name", "plan_name", "price", "commitment", "current_period_start_dt", "current_period_end_dt", "subscription_dt", "termination_dt", "active", "renews_at", "next_payment_at", "next_payment_estimated_price", "next_subscription"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillingPlanInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of next_subscription
        if self.next_subscription:
            _dict['next_subscription'] = self.next_subscription.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillingPlanInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "range_name": obj.get("range_name"),
            "plan_name": obj.get("plan_name"),
            "price": obj.get("price"),
            "commitment": obj.get("commitment"),
            "current_period_start_dt": obj.get("current_period_start_dt"),
            "current_period_end_dt": obj.get("current_period_end_dt"),
            "subscription_dt": obj.get("subscription_dt"),
            "termination_dt": obj.get("termination_dt"),
            "active": obj.get("active"),
            "renews_at": obj.get("renews_at"),
            "next_payment_at": obj.get("next_payment_at"),
            "next_payment_estimated_price": obj.get("next_payment_estimated_price"),
            "next_subscription": MbzSwgPgsqlModelsSweegoConfJoinsBillingPlanInfoData.from_dict(obj["next_subscription"]) if obj.get("next_subscription") is not None else None
        })
        return _obj


