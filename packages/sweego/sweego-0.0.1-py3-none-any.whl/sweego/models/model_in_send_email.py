# coding: utf-8

"""
    Sweego API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.6.5a
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sweego.models.channel_type import ChannelType
from sweego.models.model_email import ModelEmail
from sweego.models.model_list_unsub import ModelListUnsub
from typing import Optional, Set
from typing_extensions import Self

class ModelInSendEmail(BaseModel):
    """
    Input model for email channel type
    """ # noqa: E501
    campaign_id: Optional[StrictStr] = Field(default=None, description="Custom campaign ID", alias="campaign-id")
    campaign_tags: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="Tags to add to your email (5 max), each tag length must be between 1 & 20 and must contains only theses characters [A-Za-z0-9-]", alias="campaign-tags")
    campaign_type: Optional[StrictStr] = Field(default=None, description="Type of campaign", alias="campaign-type")
    channel: ChannelType = Field(description="Channel to use")
    dry_run: Optional[StrictBool] = Field(default=False, description="Dry run mode (no message sent)", alias="dry-run")
    var_from: ModelEmail = Field(description="From description", alias="from")
    headers: Optional[Dict[str, StrictStr]] = Field(default=None, description="Headers to add to your email (5 max)")
    list_unsub: Optional[ModelListUnsub] = Field(default=None, description="List unsubscribe header method & value", alias="list-unsub")
    message_html: Optional[StrictStr] = Field(default=None, description="Message provided in html format (only one of message_txt / message_html / template_id should be set)", alias="message-html")
    message_txt: Optional[StrictStr] = Field(default=None, description="Message provided in text format (only one of message_txt / message_html / template_id should be set)", alias="message-txt")
    provider: StrictStr = Field(description="Provider to use")
    recipients: List[ModelEmail] = Field(description="List of recipient")
    subject: StrictStr = Field(description="Email subject")
    template_id: Optional[StrictStr] = Field(default=None, description="ID of a saved template (only one of message_txt / message_html / template_id should be set)", alias="template-id")
    variables: Optional[Dict[str, Any]] = Field(default=None, description="Variables dictionary to uses with template (ignored otherwise)")
    __properties: ClassVar[List[str]] = ["campaign-id", "campaign-tags", "campaign-type", "channel", "dry-run", "from", "headers", "list-unsub", "message-html", "message-txt", "provider", "recipients", "subject", "template-id", "variables"]

    @field_validator('campaign_type')
    def campaign_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['market', 'newsletter', 'transac']):
            raise ValueError("must be one of enum values ('market', 'newsletter', 'transac')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelInSendEmail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_from
        if self.var_from:
            _dict['from'] = self.var_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of list_unsub
        if self.list_unsub:
            _dict['list-unsub'] = self.list_unsub.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recipients (list)
        _items = []
        if self.recipients:
            for _item in self.recipients:
                if _item:
                    _items.append(_item.to_dict())
            _dict['recipients'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelInSendEmail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "campaign-id": obj.get("campaign-id"),
            "campaign-tags": obj.get("campaign-tags"),
            "campaign-type": obj.get("campaign-type"),
            "channel": obj.get("channel"),
            "dry-run": obj.get("dry-run") if obj.get("dry-run") is not None else False,
            "from": ModelEmail.from_dict(obj["from"]) if obj.get("from") is not None else None,
            "headers": obj.get("headers"),
            "list-unsub": ModelListUnsub.from_dict(obj["list-unsub"]) if obj.get("list-unsub") is not None else None,
            "message-html": obj.get("message-html"),
            "message-txt": obj.get("message-txt"),
            "provider": obj.get("provider"),
            "recipients": [ModelEmail.from_dict(_item) for _item in obj["recipients"]] if obj.get("recipients") is not None else None,
            "subject": obj.get("subject"),
            "template-id": obj.get("template-id"),
            "variables": obj.get("variables")
        })
        return _obj


