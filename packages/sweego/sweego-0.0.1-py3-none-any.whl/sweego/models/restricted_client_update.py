# coding: utf-8

"""
    Sweego API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.6.5a
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, SecretStr, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sweego.models.mbz_fast_api_swg_si_shared_inputs_client_client_type import MbzFastApiSwgSiSharedInputsClientClientType
from typing import Optional, Set
from typing_extensions import Self

class RestrictedClientUpdate(BaseModel):
    """
    RestrictedClientUpdate
    """ # noqa: E501
    email_contact: Optional[StrictStr] = None
    tz_name: Optional[StrictStr] = None
    country: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]] = None
    address: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    address_2: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    phone_number: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    postal_code: Optional[Annotated[str, Field(strict=True)]] = None
    city: Optional[Annotated[str, Field(strict=True)]] = None
    intra_vat: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    company_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    client_type: Optional[MbzFastApiSwgSiSharedInputsClientClientType] = None
    billing_email_address: Optional[StrictStr] = None
    sweego_referral_source: Optional[StrictStr] = None
    password: Optional[SecretStr] = None
    __properties: ClassVar[List[str]] = ["email_contact", "tz_name", "country", "address", "address_2", "phone_number", "postal_code", "city", "intra_vat", "company_name", "client_type", "billing_email_address", "sweego_referral_source", "password"]

    @field_validator('postal_code')
    def postal_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"(?i)^[a-z0-9][a-z0-9\- ]{0,10}[a-z0-9]$", value):
            raise ValueError(r"must validate the regular expression /(?i)^[a-z0-9][a-z0-9\- ]{0,10}[a-z0-9]$/")
        return value

    @field_validator('city')
    def city_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z-ɏ\s\/\-)(`.\"\']+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z-ɏ\s\/\-)(`.\"']+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestrictedClientUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestrictedClientUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email_contact": obj.get("email_contact"),
            "tz_name": obj.get("tz_name"),
            "country": obj.get("country"),
            "address": obj.get("address"),
            "address_2": obj.get("address_2"),
            "phone_number": obj.get("phone_number"),
            "postal_code": obj.get("postal_code"),
            "city": obj.get("city"),
            "intra_vat": obj.get("intra_vat"),
            "company_name": obj.get("company_name"),
            "client_type": obj.get("client_type"),
            "billing_email_address": obj.get("billing_email_address"),
            "sweego_referral_source": obj.get("sweego_referral_source"),
            "password": obj.get("password")
        })
        return _obj


