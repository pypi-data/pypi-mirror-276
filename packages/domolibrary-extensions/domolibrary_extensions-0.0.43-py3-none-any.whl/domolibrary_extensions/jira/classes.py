# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/jira/classes.ipynb.

# %% ../../nbs/jira/classes.ipynb 2
from __future__ import annotations

from dataclasses import dataclass, field
from typing import List

import datetime as dt
import httpx

from nbdev.showdoc import patch_to

import domolibrary_extensions.jira.auth as ja
import domolibrary_extensions.jira.routes as dejr
import domolibrary_extensions.utils.convert as dxcv

# %% auto 0
__all__ = ['JiraPerson', 'JiraProject', 'JiraPriority', 'JiraComment', 'JiraIssueType', 'JiraRemoteLink', 'JiraIssue']

# %% ../../nbs/jira/classes.ipynb 3
@dataclass
class JiraPerson:
    url: str
    display_name: str
    email_address: str
    avatar_url: str

    @classmethod
    def from_json(cls, obj):
        return cls(
            url=obj["self"],
            display_name=obj["displayName"],
            email_address=obj["emailAddress"],
            avatar_url=obj["avatarUrls"]["48x48"],
        )


@dataclass
class JiraProject:
    uid: str
    id: str
    name: str
    url: str

    @classmethod
    def from_json(cls, obj):
        return cls(uid=obj["id"], id=obj["key"], name=obj["name"], url=obj["self"])


@dataclass
class JiraPriority:
    id: str
    url: str
    title: str

    @classmethod
    def from_json(cls, obj):
        return cls(id=obj["id"], url=obj["self"], title=obj["name"])

# %% ../../nbs/jira/classes.ipynb 4
@dataclass
class JiraComment:
    auth: ja.JiraAuth = field(repr=False)
    jira_author: JiraPerson
    body: str
    created_dt: dt.datetime
    updated_dt: dt.datetime
    rendered_body: str = None

    @classmethod
    def from_json(cls, obj, auth):
        return cls(
            auth=auth,
            jira_author=JiraPerson.from_json(obj["author"]),
            body=obj["body"],
            rendered_body=obj.get("renderedBody"),
            created_dt=dxcv.convert_str_to_date(obj["created"]),
            updated_dt=dxcv.convert_str_to_date(obj["updated"]),
        )

# %% ../../nbs/jira/classes.ipynb 5
@dataclass
class JiraIssueType:
    id: str
    url: str
    description: str

    @classmethod
    def from_json(cls, obj):
        return cls(id=obj["name"], url=obj["self"], description=obj["description"])


@dataclass
class JiraRemoteLink:
    auth: ja.JiraAuth = field(repr=False)
    internal_url: str
    url: str
    title: str

    # icon_url : str = None

    @classmethod
    def from_json(cls, obj, auth):

        # icon = obj['object'].get('icon')

        return JiraRemoteLink(
            auth=auth,
            internal_url=obj["self"],
            url=obj["object"]["url"],
            title=obj["object"]["title"],
            # icon_url = next(value  for key, value in icon.items())
        )


@dataclass
class JiraIssue:
    auth: ja.JiraAuth = field(repr=False)
    uid: str
    id: str
    title: str
    url: str

    created_dt: dt.datetime
    updated_dt: dt.datetime
    duedate_dt: dt.datetime

    labels: List[str]
    description: str

    jira_status: dict
    # jira_status_category : dict
    jira_issue_type: dict
    jira_priority: JiraPriority
    jira_reporter: JiraPerson
    jira_project: dict

    jira_comments: List[JiraComment]

    jira_links: List[JiraRemoteLink] = None

    @classmethod
    def from_json(cls, obj, auth):

        fields = obj["fields"]

        return cls(
            auth=auth,
            uid=obj["id"],
            id=obj["key"],
            url=obj["self"],
            title=fields["summary"],
            created_dt=dxcv.convert_str_to_date(fields["created"]),
            duedate_dt=dxcv.convert_str_to_date(fields["duedate"]),
            updated_dt=dxcv.convert_str_to_date(fields["updated"]),
            labels=fields["labels"],
            description=fields["description"],
            jira_status=fields["status"],
            # jira_status_category = fields['statusCategory'],
            jira_issue_type=JiraIssueType.from_json(fields["issuetype"]),
            jira_project=JiraProject.from_json(fields["project"]),
            jira_priority=JiraPriority.from_json(fields["priority"]),
            jira_reporter=JiraPerson.from_json(fields["reporter"]),
            jira_comments=[
                JiraComment.from_json(obj=comment, auth=auth)
                for comment in fields.get("comment", {}).get("comments", [])
            ],
        )

# %% ../../nbs/jira/classes.ipynb 6
@patch_to(JiraIssue, cls_method=True)
async def get_by_id(
    cls,
    issue_id: int,
    auth: ja.JiraAuth,
    debug_api: bool = False,
    return_raw: bool = False,
    is_ignore_cache: bool = False,
    cache_path: str = None,
    client: httpx.AsyncClient = None,
    timeout: int = 30,
):

    issue = await dejr.get_issue_by_id(
        auth=auth,
        issue_id=issue_id,
        debug_api=debug_api,
        is_ignore_cache=is_ignore_cache,
        cache_path=cache_path,
        client=client,
        timeout=timeout,
    )

    if return_raw:
        return issue

    return cls.from_json(obj=issue, auth=auth)


@patch_to(JiraIssue)
async def get_comments(
    self,
    debug_api: bool = False,
    return_raw: bool = False,
    is_ignore_cache: bool = False,
    cache_path: str = None,
    client: httpx.AsyncClient = None,
    timeout: int = 30,
):

    comments = await dejr.get_issue_comments(
        issue_id=self.id,
        auth=self.auth,
        debug_api=debug_api,
        is_ignore_cache=is_ignore_cache,
        cache_path=cache_path,
        client=client,
        timeout=timeout,
    )

    if return_raw:
        return comments

    self.jira_comments = [
        JiraComment.from_json(obj=comment, auth=self.auth) for comment in comments
    ]

    return self.jira_comments

# %% ../../nbs/jira/classes.ipynb 7
@patch_to(JiraIssue)
async def get_links(
    self,
    debug_api: bool = False,
    return_raw: bool = False,
    is_ignore_cache: bool = False,
    cache_path: str = None,
    client: httpx.AsyncClient = None,
    timeout: int = 30,
):
    links = await dejr.get_issue_links(
        auth=self.auth,
        issue_id=self.id,
        debug_api=debug_api,
        is_ignore_cache=is_ignore_cache,
        cache_path=cache_path,
        client=client,
        timeout=timeout,
    )

    if return_raw:
        return links

    self.jira_links = [JiraRemoteLink.from_json(link, auth=self.auth) for link in links]

    return self.jira_links
