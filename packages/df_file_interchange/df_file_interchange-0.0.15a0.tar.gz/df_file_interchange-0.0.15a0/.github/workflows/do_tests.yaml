name: do_tests

# Based on YAML file from https://github.com/IndEcol/country_converter/blob/master/.github/workflows/tests_and_coverage.yml

# Will setup a proper branch process soon but leaving this as "push" on main for now so can get it working...
# on: ["push", "pull_request"]
on: workflow_dispatch

jobs: 

 test_development:
  # Testing in development environment: functionality and code-format
  # From https://github.com/marketplace/actions/setup-miniconda#caching-packages  
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}

    steps:
    - name: Check out repository code
      uses: actions/checkout@v4

    # 20240508: apparently we can't use caching just now because several
    # packages aren't available as tar.bz2...
    # - name: Cache conda
    #   uses: actions/cache@v3
    #   env:
    #     # Increase this value to reset cache if environment.yaml has not changed
    #     CACHE_NUMBER: 0
    #   with:
    #     path: ~/conda_pkgs_dir
    #     # Note (EsmeMaxwell: make sure to change environment.yaml below to match what you're using!)
    #     key:
    #       ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{
    #       hashFiles('environment.yaml') }}

    - name: Setup conda and environment
      uses: conda-incubator/setup-miniconda@v3
      with:
          auto-update-conda: true
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          channels: conda-forge
          mamba-version: "*"
          channel-priority: strict
          activate-environment: df_file_interchange
          environment-file: environment.yaml
          # use-only-tar-bz2: true   # required for caching

    - name: List environment
      run: |
        mamba info
        mamba list

    - name: Run pytest
      run: pytest -svv

    # - name: Run tests
    #   run: |
    #      isort --check-only .
    #      coverage run --source=country_converter -m pytest --black -vv



# We do the Ubuntu tests for the full range of Python versions because this is
# comparatively cheap. The Windows and MacOS we test later with only 3.11.
 test_production_ubuntu:
   # Testing if the package runs on different systems/python versions
    needs: test_development
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    defaults:
      run:
        # removed -l as this breaks in mac-os
        shell: bash {0}
    strategy:
      fail-fast: false
      matrix:
        # os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        os: ["ubuntu-latest"]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{matrix.python-version}}
          cache: 'pip'
          cache-dependency-path: pyproject.toml

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test]

      - name: Run tests
        run: pytest -svv



# We test Windows and MacOS only with 3.11. If it's worked with Ubuntu over the
# other versions, this should be fine.
 test_production_win_and_mac:
   # Testing if the package runs on different systems/python versions
    needs: test_development
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    defaults:
      run:
        # removed -l as this breaks in mac-os
        shell: bash {0}
    strategy:
      fail-fast: false
      matrix:
        os: ["macos-latest", "windows-latest"]
        python-version: ["3.11"]

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{matrix.python-version}}
          cache: 'pip'
          cache-dependency-path: pyproject.toml

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test]

      - name: Run tests
        run: pytest -svv


