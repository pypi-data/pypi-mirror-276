import numpy as np

import mfire.utils.mfxarray as xr
from mfire.sit_gen.generator import DataGenerator


class TestDataGenerator:
    coords = {
        "valid_time": np.arange(
            np.datetime64("2022-08-01T00:00:00"),
            np.datetime64("2022-08-01T09:00:00"),
            np.timedelta64(3, "h"),
        ),
        "latitude": np.arange(50, 39, -1),
        "longitude": np.arange(-5, 6),
        "variable": ["msl"],
    }
    dims = tuple([len(v) for v in coords.values()])
    da = xr.DataArray(
        np.arange(np.prod(dims)).reshape(dims),
        coords=coords,
        dims=tuple(coords.keys()),
    )

    patches = np.array(
        [
            [
                [0.0, 1.0, 2.0, 3.0],
                [11.0, 12.0, 13.0, 14.0],
                [22.0, 23.0, 24.0, 25.0],
                [33.0, 34.0, 35.0, 36.0],
            ],
            [
                [2.0, 3.0, 4.0, 5.0],
                [13.0, 14.0, 15.0, 16.0],
                [24.0, 25.0, 26.0, 27.0],
                [35.0, 36.0, 37.0, 38.0],
            ],
            [
                [4.0, 5.0, 6.0, 7.0],
                [15.0, 16.0, 17.0, 18.0],
                [26.0, 27.0, 28.0, 29.0],
                [37.0, 38.0, 39.0, 40.0],
            ],
            [
                [6.0, 7.0, 8.0, 9.0],
                [17.0, 18.0, 19.0, 20.0],
                [28.0, 29.0, 30.0, 31.0],
                [39.0, 40.0, 41.0, 42.0],
            ],
            [
                [7.0, 8.0, 9.0, 10.0],
                [18.0, 19.0, 20.0, 21.0],
                [29.0, 30.0, 31.0, 32.0],
                [40.0, 41.0, 42.0, 43.0],
            ],
            [
                [22.0, 23.0, 24.0, 25.0],
                [33.0, 34.0, 35.0, 36.0],
                [44.0, 45.0, 46.0, 47.0],
                [55.0, 56.0, 57.0, 58.0],
            ],
            [
                [24.0, 25.0, 26.0, 27.0],
                [35.0, 36.0, 37.0, 38.0],
                [46.0, 47.0, 48.0, 49.0],
                [57.0, 58.0, 59.0, 60.0],
            ],
            [
                [26.0, 27.0, 28.0, 29.0],
                [37.0, 38.0, 39.0, 40.0],
                [48.0, 49.0, 50.0, 51.0],
                [59.0, 60.0, 61.0, 62.0],
            ],
            [
                [28.0, 29.0, 30.0, 31.0],
                [39.0, 40.0, 41.0, 42.0],
                [50.0, 51.0, 52.0, 53.0],
                [61.0, 62.0, 63.0, 64.0],
            ],
            [
                [29.0, 30.0, 31.0, 32.0],
                [40.0, 41.0, 42.0, 43.0],
                [51.0, 52.0, 53.0, 54.0],
                [62.0, 63.0, 64.0, 65.0],
            ],
            [
                [44.0, 45.0, 46.0, 47.0],
                [55.0, 56.0, 57.0, 58.0],
                [66.0, 67.0, 68.0, 69.0],
                [77.0, 78.0, 79.0, 80.0],
            ],
            [
                [46.0, 47.0, 48.0, 49.0],
                [57.0, 58.0, 59.0, 60.0],
                [68.0, 69.0, 70.0, 71.0],
                [79.0, 80.0, 81.0, 82.0],
            ],
            [
                [48.0, 49.0, 50.0, 51.0],
                [59.0, 60.0, 61.0, 62.0],
                [70.0, 71.0, 72.0, 73.0],
                [81.0, 82.0, 83.0, 84.0],
            ],
            [
                [50.0, 51.0, 52.0, 53.0],
                [61.0, 62.0, 63.0, 64.0],
                [72.0, 73.0, 74.0, 75.0],
                [83.0, 84.0, 85.0, 86.0],
            ],
            [
                [51.0, 52.0, 53.0, 54.0],
                [62.0, 63.0, 64.0, 65.0],
                [73.0, 74.0, 75.0, 76.0],
                [84.0, 85.0, 86.0, 87.0],
            ],
            [
                [66.0, 67.0, 68.0, 69.0],
                [77.0, 78.0, 79.0, 80.0],
                [88.0, 89.0, 90.0, 91.0],
                [99.0, 100.0, 101.0, 102.0],
            ],
            [
                [68.0, 69.0, 70.0, 71.0],
                [79.0, 80.0, 81.0, 82.0],
                [90.0, 91.0, 92.0, 93.0],
                [101.0, 102.0, 103.0, 104.0],
            ],
            [
                [70.0, 71.0, 72.0, 73.0],
                [81.0, 82.0, 83.0, 84.0],
                [92.0, 93.0, 94.0, 95.0],
                [103.0, 104.0, 105.0, 106.0],
            ],
            [
                [72.0, 73.0, 74.0, 75.0],
                [83.0, 84.0, 85.0, 86.0],
                [94.0, 95.0, 96.0, 97.0],
                [105.0, 106.0, 107.0, 108.0],
            ],
            [
                [73.0, 74.0, 75.0, 76.0],
                [84.0, 85.0, 86.0, 87.0],
                [95.0, 96.0, 97.0, 98.0],
                [106.0, 107.0, 108.0, 109.0],
            ],
            [
                [77.0, 78.0, 79.0, 80.0],
                [88.0, 89.0, 90.0, 91.0],
                [99.0, 100.0, 101.0, 102.0],
                [110.0, 111.0, 112.0, 113.0],
            ],
            [
                [79.0, 80.0, 81.0, 82.0],
                [90.0, 91.0, 92.0, 93.0],
                [101.0, 102.0, 103.0, 104.0],
                [112.0, 113.0, 114.0, 115.0],
            ],
            [
                [81.0, 82.0, 83.0, 84.0],
                [92.0, 93.0, 94.0, 95.0],
                [103.0, 104.0, 105.0, 106.0],
                [114.0, 115.0, 116.0, 117.0],
            ],
            [
                [83.0, 84.0, 85.0, 86.0],
                [94.0, 95.0, 96.0, 97.0],
                [105.0, 106.0, 107.0, 108.0],
                [116.0, 117.0, 118.0, 119.0],
            ],
            [
                [84.0, 85.0, 86.0, 87.0],
                [95.0, 96.0, 97.0, 98.0],
                [106.0, 107.0, 108.0, 109.0],
                [117.0, 118.0, 119.0, 120.0],
            ],
        ]
    ).reshape((25, 4, 4, 1))

    def test_data_generator(self):
        generator = DataGenerator(
            data=self.da,
            covering=1,
            patches_h=4,
            patches_w=4,
        )
        assert (generator[0] == self.patches).all()
        assert (
            generator.gather(self.patches) == self.da.isel(valid_time=0).values
        ).all()
        assert len(generator) == 3
