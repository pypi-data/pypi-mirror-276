import pandas as pd

from mfire.composite.weather import WeatherComposite
from mfire.settings import get_logger
from mfire.text.wind.base.reducers import BaseReducer
from mfire.text.wind.exceptions import WindSynthesisError, WindSynthesisNotImplemented
from mfire.text.wind.reducers.base_param_summary_builder import BaseParamSummaryBuilder
from mfire.text.wind.reducers.gust_summary_builder.gust_summary_builder import (
    GustSummaryBuilder,
)
from mfire.text.wind.reducers.wind_summary_builder import WindSummaryBuilder

# Logging
LOGGER = get_logger(name="wind_reducer.mod", bind="wind_reducer")


class WindReducer(BaseReducer):
    """Reducer class for the wind force and the gust force."""

    CACHED_EXCEPTIONS: tuple[Exception] = (
        pd.errors.EmptyDataError,
        ValueError,
        WindSynthesisError,
        WindSynthesisNotImplemented,
    )

    def _add_param_summary(
        self,
        summary_builder_class: BaseParamSummaryBuilder.__class__,
        compo: WeatherComposite,
    ):
        """Add a summary generated by a summary builder class.

        summary_builder_class can be GustSummaryBuilder or WindSummaryBuilder.
        """
        param_summary: dict = summary_builder_class(compo, self.data).compute(
            reference_datetime=compo.production_datetime
        )
        self.summary[self.PARAM_SUMMARIES_KEY].update(param_summary)

    def _add_param_summaries(self, compo: WeatherComposite) -> None:
        """Add gust and wind summaries in the summary attribute."""
        self.summary[self.PARAM_SUMMARIES_KEY] = {}

        # Get Gust and Wind summary
        params_summary_builder_classes = [GustSummaryBuilder, WindSummaryBuilder]
        for param_summary_builder_class in params_summary_builder_classes:
            self._add_param_summary(param_summary_builder_class, compo)

    def compute(self, geo_id: str, composite: WeatherComposite) -> dict:
        """Compute the summary."""
        super().compute(geo_id=geo_id, composite=composite)
        self._add_param_summaries(composite)
        return self.summary
