from typing import List, Union, Generator, Literal, Optional
from enum import Enum

from aily_code_sdk_core import action
from pydantic import BaseModel

ACTION_API_NAME = 'brn:cn:spring:all:all:connector_action:spring_llm_v2/1.0.0/spring_llm_v2'


class LLMModel(Enum):
    BYOM_PRO = "BYOM-pro"
    BYOM_ULTRA = "BYOM-ultra"


class Function(BaseModel):
    arguments: str
    name: str


class MessageToolCall(BaseModel):
    id: str
    """The ID of the tool call."""

    function: Function
    """The function that the model called."""

    type: Literal["function"]
    """The type of the tool. Currently, only `function` is supported."""


class Message(BaseModel):
    content: Optional[str] = None

    role: Literal["assistant"]
    """The role of the author of this message."""

    tool_calls: Optional[List[MessageToolCall]] = None
    """The tool calls generated by the model, such as function calls."""


def generate(
        messages,
        model: Union[str, LLMModel],
        max_tokens: Optional[int] = None,
        stream: bool = False,
        temperature: Optional[float] = None,
        tools=None,
        tool_choice: Literal["none", "auto", "required"] = "none",
        timeout: Optional[float] = None,
) -> Union[Message, Generator[Message, None, None]]:
    # 实现 generate 方法的逻辑
    model_value = model.value if isinstance(model, LLMModel) else model
    res = action.call_action(action_api_name=ACTION_API_NAME, action_data={
        'messages': messages,
        'model': model,
        'max_tokens': max_tokens,
        'stream': stream,
        'temperature': temperature,
        'tools': tools,
        'tool_choice': tool_choice,
        'timeout': timeout,
    })
    return Message()
