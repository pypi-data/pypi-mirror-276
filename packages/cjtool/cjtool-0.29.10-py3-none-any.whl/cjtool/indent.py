import re
import argparse
from pathlib import Path
import json
from common import print_warning, BreakPointHit, BreakPointPairError


def parse_file(filefullpath: str):
    stack = []
    nDepth = 0
    with open(filefullpath, 'r', encoding='utf-8') as f:
        data = json.loads(f.read())
        hits = data['hits']

        for num, hit in enumerate(hits, 1):
            curItem = BreakPointHit()
            curItem.assign(hit)

            paired = False
            if stack:
                topItem = stack[-1]
                if curItem.pairWith(topItem):
                    if curItem.isStart:
                        raise BreakPointPairError(num, curItem)
                    paired = True

            if paired:
                stack.pop()
                nDepth = nDepth - 1
            else:
                if not curItem.isStart:
                    raise BreakPointPairError(num, curItem)
                stack.append(curItem)
                nDepth = nDepth + 1
                print('    ' * nDepth + curItem.funtionName)


def adjust_file_path(filename: str) -> str:
    if Path(filename).is_file():
        return filename

    newpath = Path.cwd().joinpath(filename)
    if Path(newpath).is_file():
        return newpath

    return None


def main():
    parser = argparse.ArgumentParser()
    parser.formatter_class = argparse.ArgumentDefaultsHelpFormatter
    parser.add_argument(
        'file', help="set the json file generated by cm command")
    args = parser.parse_args()

    filepath = adjust_file_path(args.file)
    if not filepath:
        print_warning(f'Cannot find the file: {args.file}')
        exit()

    try:
        parse_file(filepath)
    except BreakPointPairError as e:
        print_warning(f'The {e.lineNum}th element is not paired')
        print_warning(f'    {e.hit}')


if __name__ == '__main__':
    main()
