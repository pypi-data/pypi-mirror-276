# coding: utf-8

"""
    Sweego API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.6.8
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sweego_api.models.invoice_status import InvoiceStatus
from sweego_api.models.invoice_type import InvoiceType
from sweego_api.models.tax_scheme import TaxScheme
from typing import Optional, Set
from typing_extensions import Self

class ClientBillingInvoice(BaseModel):
    """
    Represents a generated invoice
    """ # noqa: E501
    id: StrictStr
    number: StrictStr
    type: InvoiceType
    status: InvoiceStatus
    reference: Optional[StrictStr] = None
    purchase_order: Optional[StrictStr] = None
    currency: StrictStr
    total_amount: StrictInt
    amount_due: StrictInt
    amount_paid: StrictInt
    amount_fixed: StrictInt
    amount_excluding_tax: StrictInt
    tax_rate: StrictInt
    tax_amount: StrictInt
    tax_scheme: TaxScheme
    discount_amount: StrictInt
    conversion_rate: Optional[StrictInt] = None
    converted_amount: Optional[StrictInt] = None
    converted_at: datetime
    period_starts_at: Optional[datetime] = None
    period_ends_at: Optional[datetime] = None
    emitted_at: datetime
    due_at: datetime
    refunded_at: Optional[datetime] = None
    settled_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["id", "number", "type", "status", "reference", "purchase_order", "currency", "total_amount", "amount_due", "amount_paid", "amount_fixed", "amount_excluding_tax", "tax_rate", "tax_amount", "tax_scheme", "discount_amount", "conversion_rate", "converted_amount", "converted_at", "period_starts_at", "period_ends_at", "emitted_at", "due_at", "refunded_at", "settled_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientBillingInvoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientBillingInvoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "number": obj.get("number"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "reference": obj.get("reference"),
            "purchase_order": obj.get("purchase_order"),
            "currency": obj.get("currency"),
            "total_amount": obj.get("total_amount"),
            "amount_due": obj.get("amount_due"),
            "amount_paid": obj.get("amount_paid"),
            "amount_fixed": obj.get("amount_fixed"),
            "amount_excluding_tax": obj.get("amount_excluding_tax"),
            "tax_rate": obj.get("tax_rate"),
            "tax_amount": obj.get("tax_amount"),
            "tax_scheme": obj.get("tax_scheme"),
            "discount_amount": obj.get("discount_amount"),
            "conversion_rate": obj.get("conversion_rate"),
            "converted_amount": obj.get("converted_amount"),
            "converted_at": obj.get("converted_at"),
            "period_starts_at": obj.get("period_starts_at"),
            "period_ends_at": obj.get("period_ends_at"),
            "emitted_at": obj.get("emitted_at"),
            "due_at": obj.get("due_at"),
            "refunded_at": obj.get("refunded_at"),
            "settled_at": obj.get("settled_at")
        })
        return _obj


