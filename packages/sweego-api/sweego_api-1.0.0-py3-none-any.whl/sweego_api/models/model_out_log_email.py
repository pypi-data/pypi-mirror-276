# coding: utf-8

"""
    Sweego API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.6.8
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sweego_api.models.email_from import EmailFrom
from sweego_api.models.email_to import EmailTo
from typing import Optional, Set
from typing_extensions import Self

class ModelOutLogEmail(BaseModel):
    """
    ModelOutLogEmail
    """ # noqa: E501
    accepted: Optional[StrictStr] = None
    bounce_type: Optional[StrictStr] = None
    bounced: Optional[StrictStr] = None
    campaign_id: StrictStr
    campaign_tags: Optional[StrictStr] = None
    channel: StrictStr
    client_ip: Optional[StrictStr] = None
    deferred: Optional[StrictStr] = None
    domain_from: Optional[StrictStr] = None
    domain_to: Optional[StrictStr] = None
    dry_run: StrictBool
    email_creation: datetime
    email_from: Optional[EmailFrom] = None
    email_last_update: datetime
    email_state: Optional[StrictStr] = None
    email_to: Optional[EmailTo] = None
    headers: Optional[Dict[str, StrictStr]] = None
    ip_output: StrictStr
    last_event_type: StrictInt
    msp: Optional[StrictStr] = None
    origin_ip: StrictStr
    rejected: Optional[StrictStr] = None
    status: StrictStr
    subject: Optional[StrictStr] = None
    swg_uid: StrictStr
    __properties: ClassVar[List[str]] = ["accepted", "bounce_type", "bounced", "campaign_id", "campaign_tags", "channel", "client_ip", "deferred", "domain_from", "domain_to", "dry_run", "email_creation", "email_from", "email_last_update", "email_state", "email_to", "headers", "ip_output", "last_event_type", "msp", "origin_ip", "rejected", "status", "subject", "swg_uid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelOutLogEmail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of email_from
        if self.email_from:
            _dict['email_from'] = self.email_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email_to
        if self.email_to:
            _dict['email_to'] = self.email_to.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelOutLogEmail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accepted": obj.get("accepted"),
            "bounce_type": obj.get("bounce_type"),
            "bounced": obj.get("bounced"),
            "campaign_id": obj.get("campaign_id"),
            "campaign_tags": obj.get("campaign_tags"),
            "channel": obj.get("channel"),
            "client_ip": obj.get("client_ip"),
            "deferred": obj.get("deferred"),
            "domain_from": obj.get("domain_from"),
            "domain_to": obj.get("domain_to"),
            "dry_run": obj.get("dry_run"),
            "email_creation": obj.get("email_creation"),
            "email_from": EmailFrom.from_dict(obj["email_from"]) if obj.get("email_from") is not None else None,
            "email_last_update": obj.get("email_last_update"),
            "email_state": obj.get("email_state"),
            "email_to": EmailTo.from_dict(obj["email_to"]) if obj.get("email_to") is not None else None,
            "headers": obj.get("headers"),
            "ip_output": obj.get("ip_output"),
            "last_event_type": obj.get("last_event_type"),
            "msp": obj.get("msp"),
            "origin_ip": obj.get("origin_ip"),
            "rejected": obj.get("rejected"),
            "status": obj.get("status"),
            "subject": obj.get("subject"),
            "swg_uid": obj.get("swg_uid")
        })
        return _obj


