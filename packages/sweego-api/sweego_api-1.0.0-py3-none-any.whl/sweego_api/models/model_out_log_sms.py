# coding: utf-8

"""
    Sweego API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.6.8
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ModelOutLogSms(BaseModel):
    """
    ModelOutLogSms
    """ # noqa: E501
    campaign_id: Optional[StrictStr] = None
    campaign_type: StrictStr
    channel: StrictStr
    client_ip: StrictStr
    from_: StrictStr
    is_bat: StrictBool
    last_event_type: StrictInt
    message: StrictStr
    nb_segments: StrictInt
    price: StrictStr
    recipient: StrictStr
    recipient_region: StrictStr
    size: StrictInt
    sms_creation: datetime
    sms_last_update: datetime
    status: StrictStr
    status_desc: Optional[StrictStr] = None
    swg_uid: StrictStr
    __properties: ClassVar[List[str]] = ["campaign_id", "campaign_type", "channel", "client_ip", "from_", "is_bat", "last_event_type", "message", "nb_segments", "price", "recipient", "recipient_region", "size", "sms_creation", "sms_last_update", "status", "status_desc", "swg_uid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelOutLogSms from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelOutLogSms from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "campaign_id": obj.get("campaign_id"),
            "campaign_type": obj.get("campaign_type"),
            "channel": obj.get("channel"),
            "client_ip": obj.get("client_ip"),
            "from_": obj.get("from_"),
            "is_bat": obj.get("is_bat"),
            "last_event_type": obj.get("last_event_type"),
            "message": obj.get("message"),
            "nb_segments": obj.get("nb_segments"),
            "price": obj.get("price"),
            "recipient": obj.get("recipient"),
            "recipient_region": obj.get("recipient_region"),
            "size": obj.get("size"),
            "sms_creation": obj.get("sms_creation"),
            "sms_last_update": obj.get("sms_last_update"),
            "status": obj.get("status"),
            "status_desc": obj.get("status_desc"),
            "swg_uid": obj.get("swg_uid")
        })
        return _obj


