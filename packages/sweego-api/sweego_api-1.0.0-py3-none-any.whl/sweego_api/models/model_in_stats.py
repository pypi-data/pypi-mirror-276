# coding: utf-8

"""
    Sweego API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.6.8
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ModelInStats(BaseModel):
    """
    ModelInStats
    """ # noqa: E501
    channel: Optional[StrictStr] = 'all'
    domains: Optional[List[StrictStr]] = None
    end_date: Optional[date] = None
    msp: Optional[List[StrictStr]] = None
    offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = 0
    senders: Optional[List[StrictStr]] = None
    size: Optional[Annotated[int, Field(le=500, strict=True, ge=1)]] = 50
    start_date: Optional[date] = None
    __properties: ClassVar[List[str]] = ["channel", "domains", "end_date", "msp", "offset", "senders", "size", "start_date"]

    @field_validator('channel')
    def channel_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['all', 'email', 'sms']):
            raise ValueError("must be one of enum values ('all', 'email', 'sms')")
        return value

    @field_validator('msp')
    def msp_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['bouygues', 'default', 'free', 'gmail', 'gmx', 'icloud', 'iol', 'laposte', 'microsoft', 'orange', 'proximus', 'sfr', 'telenet', 'tim', 'tiscali', 'yahoo_asia', 'yahoo_eu', 'yahoo_us']):
                raise ValueError("each list item must be one of ('bouygues', 'default', 'free', 'gmail', 'gmx', 'icloud', 'iol', 'laposte', 'microsoft', 'orange', 'proximus', 'sfr', 'telenet', 'tim', 'tiscali', 'yahoo_asia', 'yahoo_eu', 'yahoo_us')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelInStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelInStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channel": obj.get("channel") if obj.get("channel") is not None else 'all',
            "domains": obj.get("domains"),
            "end_date": obj.get("end_date"),
            "msp": obj.get("msp"),
            "offset": obj.get("offset") if obj.get("offset") is not None else 0,
            "senders": obj.get("senders"),
            "size": obj.get("size") if obj.get("size") is not None else 50,
            "start_date": obj.get("start_date")
        })
        return _obj


