# coding: utf-8

"""
    Sweego API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.6.8
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictStr
from typing import Any, List, Optional
from typing_extensions import Annotated
from sweego_api.models.base_response import BaseResponse
from sweego_api.models.enum_ip_type import EnumIpType
from sweego_api.models.mta_ip import MtaIp
from sweego_api.models.mta_ip_data import MtaIpData
from sweego_api.models.mta_ip_update import MtaIpUpdate

from sweego_api.api_client import ApiClient, RequestSerialized
from sweego_api.api_response import ApiResponse
from sweego_api.rest import RESTResponseType


class MTAIpApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def add_mta_ip_mta_server_id_ips_post(
        self,
        mta_server_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_data: MtaIpData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Create the mta_ip with the given info

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param mta_ip_data: (required)
        :type mta_ip_data: MtaIpData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_mta_ip_mta_server_id_ips_post_serialize(
            mta_server_id=mta_server_id,
            mta_ip_data=mta_ip_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_mta_ip_mta_server_id_ips_post_with_http_info(
        self,
        mta_server_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_data: MtaIpData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Create the mta_ip with the given info

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param mta_ip_data: (required)
        :type mta_ip_data: MtaIpData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_mta_ip_mta_server_id_ips_post_serialize(
            mta_server_id=mta_server_id,
            mta_ip_data=mta_ip_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_mta_ip_mta_server_id_ips_post_without_preload_content(
        self,
        mta_server_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_data: MtaIpData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create the mta_ip with the given info

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param mta_ip_data: (required)
        :type mta_ip_data: MtaIpData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_mta_ip_mta_server_id_ips_post_serialize(
            mta_server_id=mta_server_id,
            mta_ip_data=mta_ip_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_mta_ip_mta_server_id_ips_post_serialize(
        self,
        mta_server_id,
        mta_ip_data,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if mta_server_id is not None:
            _path_params['mta_server_id'] = mta_server_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if mta_ip_data is not None:
            _body_params = mta_ip_data


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader', 
            'OAuth2PasswordBearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/{mta_server_id}/ips',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def add_mta_ip_mta_servers_mta_server_id_ips_post(
        self,
        mta_server_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_data: MtaIpData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Create the mta_ip with the given info

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param mta_ip_data: (required)
        :type mta_ip_data: MtaIpData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_mta_ip_mta_servers_mta_server_id_ips_post_serialize(
            mta_server_id=mta_server_id,
            mta_ip_data=mta_ip_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_mta_ip_mta_servers_mta_server_id_ips_post_with_http_info(
        self,
        mta_server_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_data: MtaIpData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Create the mta_ip with the given info

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param mta_ip_data: (required)
        :type mta_ip_data: MtaIpData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_mta_ip_mta_servers_mta_server_id_ips_post_serialize(
            mta_server_id=mta_server_id,
            mta_ip_data=mta_ip_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_mta_ip_mta_servers_mta_server_id_ips_post_without_preload_content(
        self,
        mta_server_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_data: MtaIpData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create the mta_ip with the given info

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param mta_ip_data: (required)
        :type mta_ip_data: MtaIpData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_mta_ip_mta_servers_mta_server_id_ips_post_serialize(
            mta_server_id=mta_server_id,
            mta_ip_data=mta_ip_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_mta_ip_mta_servers_mta_server_id_ips_post_serialize(
        self,
        mta_server_id,
        mta_ip_data,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if mta_server_id is not None:
            _path_params['mta_server_id'] = mta_server_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if mta_ip_data is not None:
            _body_params = mta_ip_data


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader', 
            'OAuth2PasswordBearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/mta/servers/{mta_server_id}/ips',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_mta_ip_by_id_mta_server_id_ips_mta_ip_id_delete(
        self,
        mta_server_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_id: Annotated[int, Field(strict=True, ge=0)],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete the mta_ip with the given ID

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param mta_ip_id: (required)
        :type mta_ip_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_mta_ip_by_id_mta_server_id_ips_mta_ip_id_delete_serialize(
            mta_server_id=mta_server_id,
            mta_ip_id=mta_ip_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_mta_ip_by_id_mta_server_id_ips_mta_ip_id_delete_with_http_info(
        self,
        mta_server_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_id: Annotated[int, Field(strict=True, ge=0)],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete the mta_ip with the given ID

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param mta_ip_id: (required)
        :type mta_ip_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_mta_ip_by_id_mta_server_id_ips_mta_ip_id_delete_serialize(
            mta_server_id=mta_server_id,
            mta_ip_id=mta_ip_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_mta_ip_by_id_mta_server_id_ips_mta_ip_id_delete_without_preload_content(
        self,
        mta_server_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_id: Annotated[int, Field(strict=True, ge=0)],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete the mta_ip with the given ID

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param mta_ip_id: (required)
        :type mta_ip_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_mta_ip_by_id_mta_server_id_ips_mta_ip_id_delete_serialize(
            mta_server_id=mta_server_id,
            mta_ip_id=mta_ip_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_mta_ip_by_id_mta_server_id_ips_mta_ip_id_delete_serialize(
        self,
        mta_server_id,
        mta_ip_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if mta_server_id is not None:
            _path_params['mta_server_id'] = mta_server_id
        if mta_ip_id is not None:
            _path_params['mta_ip_id'] = mta_ip_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader', 
            'OAuth2PasswordBearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/{mta_server_id}/ips/{mta_ip_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_mta_ip_by_id_mta_servers_mta_server_id_ips_mta_ip_id_delete(
        self,
        mta_server_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_id: Annotated[int, Field(strict=True, ge=0)],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete the mta_ip with the given ID

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param mta_ip_id: (required)
        :type mta_ip_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_mta_ip_by_id_mta_servers_mta_server_id_ips_mta_ip_id_delete_serialize(
            mta_server_id=mta_server_id,
            mta_ip_id=mta_ip_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_mta_ip_by_id_mta_servers_mta_server_id_ips_mta_ip_id_delete_with_http_info(
        self,
        mta_server_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_id: Annotated[int, Field(strict=True, ge=0)],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete the mta_ip with the given ID

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param mta_ip_id: (required)
        :type mta_ip_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_mta_ip_by_id_mta_servers_mta_server_id_ips_mta_ip_id_delete_serialize(
            mta_server_id=mta_server_id,
            mta_ip_id=mta_ip_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_mta_ip_by_id_mta_servers_mta_server_id_ips_mta_ip_id_delete_without_preload_content(
        self,
        mta_server_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_id: Annotated[int, Field(strict=True, ge=0)],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete the mta_ip with the given ID

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param mta_ip_id: (required)
        :type mta_ip_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_mta_ip_by_id_mta_servers_mta_server_id_ips_mta_ip_id_delete_serialize(
            mta_server_id=mta_server_id,
            mta_ip_id=mta_ip_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_mta_ip_by_id_mta_servers_mta_server_id_ips_mta_ip_id_delete_serialize(
        self,
        mta_server_id,
        mta_ip_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if mta_server_id is not None:
            _path_params['mta_server_id'] = mta_server_id
        if mta_ip_id is not None:
            _path_params['mta_ip_id'] = mta_ip_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader', 
            'OAuth2PasswordBearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/mta/servers/{mta_server_id}/ips/{mta_ip_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_mta_ip_list_mta_server_id_ips_get(
        self,
        mta_server_id: Annotated[int, Field(le=2147483647, strict=True, ge=0)],
        interface_num: Optional[Annotated[int, Field(le=32767, strict=True, ge=0)]] = None,
        ip: Optional[StrictStr] = None,
        ip_type: Optional[EnumIpType] = None,
        enabled: Optional[StrictBool] = None,
        is_ip_v6: Optional[StrictBool] = None,
        id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None,
        creation_dt: Optional[datetime] = None,
        last_update_dt: Optional[datetime] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[MtaIp]:
        """Get ZoneMTA IP list

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param interface_num:
        :type interface_num: int
        :param ip:
        :type ip: str
        :param ip_type:
        :type ip_type: EnumIpType
        :param enabled:
        :type enabled: bool
        :param is_ip_v6:
        :type is_ip_v6: bool
        :param id:
        :type id: int
        :param creation_dt:
        :type creation_dt: datetime
        :param last_update_dt:
        :type last_update_dt: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_mta_ip_list_mta_server_id_ips_get_serialize(
            mta_server_id=mta_server_id,
            interface_num=interface_num,
            ip=ip,
            ip_type=ip_type,
            enabled=enabled,
            is_ip_v6=is_ip_v6,
            id=id,
            creation_dt=creation_dt,
            last_update_dt=last_update_dt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MtaIp]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_mta_ip_list_mta_server_id_ips_get_with_http_info(
        self,
        mta_server_id: Annotated[int, Field(le=2147483647, strict=True, ge=0)],
        interface_num: Optional[Annotated[int, Field(le=32767, strict=True, ge=0)]] = None,
        ip: Optional[StrictStr] = None,
        ip_type: Optional[EnumIpType] = None,
        enabled: Optional[StrictBool] = None,
        is_ip_v6: Optional[StrictBool] = None,
        id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None,
        creation_dt: Optional[datetime] = None,
        last_update_dt: Optional[datetime] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[MtaIp]]:
        """Get ZoneMTA IP list

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param interface_num:
        :type interface_num: int
        :param ip:
        :type ip: str
        :param ip_type:
        :type ip_type: EnumIpType
        :param enabled:
        :type enabled: bool
        :param is_ip_v6:
        :type is_ip_v6: bool
        :param id:
        :type id: int
        :param creation_dt:
        :type creation_dt: datetime
        :param last_update_dt:
        :type last_update_dt: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_mta_ip_list_mta_server_id_ips_get_serialize(
            mta_server_id=mta_server_id,
            interface_num=interface_num,
            ip=ip,
            ip_type=ip_type,
            enabled=enabled,
            is_ip_v6=is_ip_v6,
            id=id,
            creation_dt=creation_dt,
            last_update_dt=last_update_dt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MtaIp]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_mta_ip_list_mta_server_id_ips_get_without_preload_content(
        self,
        mta_server_id: Annotated[int, Field(le=2147483647, strict=True, ge=0)],
        interface_num: Optional[Annotated[int, Field(le=32767, strict=True, ge=0)]] = None,
        ip: Optional[StrictStr] = None,
        ip_type: Optional[EnumIpType] = None,
        enabled: Optional[StrictBool] = None,
        is_ip_v6: Optional[StrictBool] = None,
        id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None,
        creation_dt: Optional[datetime] = None,
        last_update_dt: Optional[datetime] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get ZoneMTA IP list

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param interface_num:
        :type interface_num: int
        :param ip:
        :type ip: str
        :param ip_type:
        :type ip_type: EnumIpType
        :param enabled:
        :type enabled: bool
        :param is_ip_v6:
        :type is_ip_v6: bool
        :param id:
        :type id: int
        :param creation_dt:
        :type creation_dt: datetime
        :param last_update_dt:
        :type last_update_dt: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_mta_ip_list_mta_server_id_ips_get_serialize(
            mta_server_id=mta_server_id,
            interface_num=interface_num,
            ip=ip,
            ip_type=ip_type,
            enabled=enabled,
            is_ip_v6=is_ip_v6,
            id=id,
            creation_dt=creation_dt,
            last_update_dt=last_update_dt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MtaIp]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_mta_ip_list_mta_server_id_ips_get_serialize(
        self,
        mta_server_id,
        interface_num,
        ip,
        ip_type,
        enabled,
        is_ip_v6,
        id,
        creation_dt,
        last_update_dt,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if mta_server_id is not None:
            _path_params['mta_server_id'] = mta_server_id
        # process the query parameters
        if interface_num is not None:
            
            _query_params.append(('interface_num', interface_num))
            
        if ip is not None:
            
            _query_params.append(('ip', ip))
            
        if ip_type is not None:
            
            _query_params.append(('ip_type', ip_type.value))
            
        if enabled is not None:
            
            _query_params.append(('enabled', enabled))
            
        if is_ip_v6 is not None:
            
            _query_params.append(('is_ip_v6', is_ip_v6))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if creation_dt is not None:
            if isinstance(creation_dt, datetime):
                _query_params.append(
                    (
                        'creation_dt',
                        creation_dt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('creation_dt', creation_dt))
            
        if last_update_dt is not None:
            if isinstance(last_update_dt, datetime):
                _query_params.append(
                    (
                        'last_update_dt',
                        last_update_dt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('last_update_dt', last_update_dt))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader', 
            'OAuth2PasswordBearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/{mta_server_id}/ips',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_mta_ip_list_mta_servers_mta_server_id_ips_get(
        self,
        mta_server_id: Annotated[int, Field(le=2147483647, strict=True, ge=0)],
        interface_num: Optional[Annotated[int, Field(le=32767, strict=True, ge=0)]] = None,
        ip: Optional[StrictStr] = None,
        ip_type: Optional[EnumIpType] = None,
        enabled: Optional[StrictBool] = None,
        is_ip_v6: Optional[StrictBool] = None,
        id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None,
        creation_dt: Optional[datetime] = None,
        last_update_dt: Optional[datetime] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[MtaIp]:
        """Get ZoneMTA IP list

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param interface_num:
        :type interface_num: int
        :param ip:
        :type ip: str
        :param ip_type:
        :type ip_type: EnumIpType
        :param enabled:
        :type enabled: bool
        :param is_ip_v6:
        :type is_ip_v6: bool
        :param id:
        :type id: int
        :param creation_dt:
        :type creation_dt: datetime
        :param last_update_dt:
        :type last_update_dt: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_mta_ip_list_mta_servers_mta_server_id_ips_get_serialize(
            mta_server_id=mta_server_id,
            interface_num=interface_num,
            ip=ip,
            ip_type=ip_type,
            enabled=enabled,
            is_ip_v6=is_ip_v6,
            id=id,
            creation_dt=creation_dt,
            last_update_dt=last_update_dt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MtaIp]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_mta_ip_list_mta_servers_mta_server_id_ips_get_with_http_info(
        self,
        mta_server_id: Annotated[int, Field(le=2147483647, strict=True, ge=0)],
        interface_num: Optional[Annotated[int, Field(le=32767, strict=True, ge=0)]] = None,
        ip: Optional[StrictStr] = None,
        ip_type: Optional[EnumIpType] = None,
        enabled: Optional[StrictBool] = None,
        is_ip_v6: Optional[StrictBool] = None,
        id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None,
        creation_dt: Optional[datetime] = None,
        last_update_dt: Optional[datetime] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[MtaIp]]:
        """Get ZoneMTA IP list

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param interface_num:
        :type interface_num: int
        :param ip:
        :type ip: str
        :param ip_type:
        :type ip_type: EnumIpType
        :param enabled:
        :type enabled: bool
        :param is_ip_v6:
        :type is_ip_v6: bool
        :param id:
        :type id: int
        :param creation_dt:
        :type creation_dt: datetime
        :param last_update_dt:
        :type last_update_dt: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_mta_ip_list_mta_servers_mta_server_id_ips_get_serialize(
            mta_server_id=mta_server_id,
            interface_num=interface_num,
            ip=ip,
            ip_type=ip_type,
            enabled=enabled,
            is_ip_v6=is_ip_v6,
            id=id,
            creation_dt=creation_dt,
            last_update_dt=last_update_dt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MtaIp]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_mta_ip_list_mta_servers_mta_server_id_ips_get_without_preload_content(
        self,
        mta_server_id: Annotated[int, Field(le=2147483647, strict=True, ge=0)],
        interface_num: Optional[Annotated[int, Field(le=32767, strict=True, ge=0)]] = None,
        ip: Optional[StrictStr] = None,
        ip_type: Optional[EnumIpType] = None,
        enabled: Optional[StrictBool] = None,
        is_ip_v6: Optional[StrictBool] = None,
        id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None,
        creation_dt: Optional[datetime] = None,
        last_update_dt: Optional[datetime] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get ZoneMTA IP list

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param interface_num:
        :type interface_num: int
        :param ip:
        :type ip: str
        :param ip_type:
        :type ip_type: EnumIpType
        :param enabled:
        :type enabled: bool
        :param is_ip_v6:
        :type is_ip_v6: bool
        :param id:
        :type id: int
        :param creation_dt:
        :type creation_dt: datetime
        :param last_update_dt:
        :type last_update_dt: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_mta_ip_list_mta_servers_mta_server_id_ips_get_serialize(
            mta_server_id=mta_server_id,
            interface_num=interface_num,
            ip=ip,
            ip_type=ip_type,
            enabled=enabled,
            is_ip_v6=is_ip_v6,
            id=id,
            creation_dt=creation_dt,
            last_update_dt=last_update_dt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[MtaIp]",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_mta_ip_list_mta_servers_mta_server_id_ips_get_serialize(
        self,
        mta_server_id,
        interface_num,
        ip,
        ip_type,
        enabled,
        is_ip_v6,
        id,
        creation_dt,
        last_update_dt,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if mta_server_id is not None:
            _path_params['mta_server_id'] = mta_server_id
        # process the query parameters
        if interface_num is not None:
            
            _query_params.append(('interface_num', interface_num))
            
        if ip is not None:
            
            _query_params.append(('ip', ip))
            
        if ip_type is not None:
            
            _query_params.append(('ip_type', ip_type.value))
            
        if enabled is not None:
            
            _query_params.append(('enabled', enabled))
            
        if is_ip_v6 is not None:
            
            _query_params.append(('is_ip_v6', is_ip_v6))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if creation_dt is not None:
            if isinstance(creation_dt, datetime):
                _query_params.append(
                    (
                        'creation_dt',
                        creation_dt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('creation_dt', creation_dt))
            
        if last_update_dt is not None:
            if isinstance(last_update_dt, datetime):
                _query_params.append(
                    (
                        'last_update_dt',
                        last_update_dt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('last_update_dt', last_update_dt))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader', 
            'OAuth2PasswordBearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/mta/servers/{mta_server_id}/ips',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_mta_ip_mta_server_id_ips_mta_ip_id_post(
        self,
        mta_server_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_update: MtaIpUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BaseResponse:
        """Update the mta_ip with the given info

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param mta_ip_id: (required)
        :type mta_ip_id: int
        :param mta_ip_update: (required)
        :type mta_ip_update: MtaIpUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_mta_ip_mta_server_id_ips_mta_ip_id_post_serialize(
            mta_server_id=mta_server_id,
            mta_ip_id=mta_ip_id,
            mta_ip_update=mta_ip_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BaseResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_mta_ip_mta_server_id_ips_mta_ip_id_post_with_http_info(
        self,
        mta_server_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_update: MtaIpUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BaseResponse]:
        """Update the mta_ip with the given info

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param mta_ip_id: (required)
        :type mta_ip_id: int
        :param mta_ip_update: (required)
        :type mta_ip_update: MtaIpUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_mta_ip_mta_server_id_ips_mta_ip_id_post_serialize(
            mta_server_id=mta_server_id,
            mta_ip_id=mta_ip_id,
            mta_ip_update=mta_ip_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BaseResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_mta_ip_mta_server_id_ips_mta_ip_id_post_without_preload_content(
        self,
        mta_server_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_update: MtaIpUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update the mta_ip with the given info

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param mta_ip_id: (required)
        :type mta_ip_id: int
        :param mta_ip_update: (required)
        :type mta_ip_update: MtaIpUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_mta_ip_mta_server_id_ips_mta_ip_id_post_serialize(
            mta_server_id=mta_server_id,
            mta_ip_id=mta_ip_id,
            mta_ip_update=mta_ip_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BaseResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_mta_ip_mta_server_id_ips_mta_ip_id_post_serialize(
        self,
        mta_server_id,
        mta_ip_id,
        mta_ip_update,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if mta_server_id is not None:
            _path_params['mta_server_id'] = mta_server_id
        if mta_ip_id is not None:
            _path_params['mta_ip_id'] = mta_ip_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if mta_ip_update is not None:
            _body_params = mta_ip_update


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader', 
            'OAuth2PasswordBearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/{mta_server_id}/ips/{mta_ip_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_mta_ip_mta_servers_mta_server_id_ips_mta_ip_id_post(
        self,
        mta_server_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_update: MtaIpUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BaseResponse:
        """Update the mta_ip with the given info

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param mta_ip_id: (required)
        :type mta_ip_id: int
        :param mta_ip_update: (required)
        :type mta_ip_update: MtaIpUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_mta_ip_mta_servers_mta_server_id_ips_mta_ip_id_post_serialize(
            mta_server_id=mta_server_id,
            mta_ip_id=mta_ip_id,
            mta_ip_update=mta_ip_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BaseResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_mta_ip_mta_servers_mta_server_id_ips_mta_ip_id_post_with_http_info(
        self,
        mta_server_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_update: MtaIpUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BaseResponse]:
        """Update the mta_ip with the given info

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param mta_ip_id: (required)
        :type mta_ip_id: int
        :param mta_ip_update: (required)
        :type mta_ip_update: MtaIpUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_mta_ip_mta_servers_mta_server_id_ips_mta_ip_id_post_serialize(
            mta_server_id=mta_server_id,
            mta_ip_id=mta_ip_id,
            mta_ip_update=mta_ip_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BaseResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_mta_ip_mta_servers_mta_server_id_ips_mta_ip_id_post_without_preload_content(
        self,
        mta_server_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_id: Annotated[int, Field(strict=True, ge=0)],
        mta_ip_update: MtaIpUpdate,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update the mta_ip with the given info

        Init server actions: mta_ip

        :param mta_server_id: (required)
        :type mta_server_id: int
        :param mta_ip_id: (required)
        :type mta_ip_id: int
        :param mta_ip_update: (required)
        :type mta_ip_update: MtaIpUpdate
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_mta_ip_mta_servers_mta_server_id_ips_mta_ip_id_post_serialize(
            mta_server_id=mta_server_id,
            mta_ip_id=mta_ip_id,
            mta_ip_update=mta_ip_update,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BaseResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_mta_ip_mta_servers_mta_server_id_ips_mta_ip_id_post_serialize(
        self,
        mta_server_id,
        mta_ip_id,
        mta_ip_update,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if mta_server_id is not None:
            _path_params['mta_server_id'] = mta_server_id
        if mta_ip_id is not None:
            _path_params['mta_ip_id'] = mta_ip_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if mta_ip_update is not None:
            _body_params = mta_ip_update


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'APIKeyHeader', 
            'OAuth2PasswordBearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/mta/servers/{mta_server_id}/ips/{mta_ip_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


