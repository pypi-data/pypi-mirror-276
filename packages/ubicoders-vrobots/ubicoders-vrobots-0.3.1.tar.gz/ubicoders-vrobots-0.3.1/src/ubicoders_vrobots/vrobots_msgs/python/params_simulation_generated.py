# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PARAM_SimulationMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PARAM_SimulationMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPARAM_SimulationMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def PARAM_SimulationMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x53\x49\x4D", size_prefixed=size_prefixed)

    # PARAM_SimulationMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PARAM_SimulationMsg
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PARAM_SimulationMsg
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # PARAM_SimulationMsg
    def CmdReportOnce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PARAM_SimulationMsg
    def CmdReset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PARAM_SimulationMsg
    def StreamToRjs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PARAM_SimulationMsg
    def StreamToWs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PARAM_SimulationMsg
    def NoiseOn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PARAM_SimulationMsg
    def SetStreamToRjs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PARAM_SimulationMsg
    def SetStreamToWs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PARAM_SimulationMsg
    def SetNoiseOn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def PARAM_SimulationMsgStart(builder):
    builder.StartObject(10)

def PARAM_SimulationMsgAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def PARAM_SimulationMsgAddTimestamp(builder, timestamp):
    builder.PrependFloat64Slot(1, timestamp, 0.0)

def PARAM_SimulationMsgAddCmdReportOnce(builder, cmdReportOnce):
    builder.PrependInt32Slot(2, cmdReportOnce, 0)

def PARAM_SimulationMsgAddCmdReset(builder, cmdReset):
    builder.PrependInt32Slot(3, cmdReset, 0)

def PARAM_SimulationMsgAddStreamToRjs(builder, streamToRjs):
    builder.PrependInt32Slot(4, streamToRjs, 0)

def PARAM_SimulationMsgAddStreamToWs(builder, streamToWs):
    builder.PrependInt32Slot(5, streamToWs, 0)

def PARAM_SimulationMsgAddNoiseOn(builder, noiseOn):
    builder.PrependInt32Slot(6, noiseOn, 0)

def PARAM_SimulationMsgAddSetStreamToRjs(builder, setStreamToRjs):
    builder.PrependInt32Slot(7, setStreamToRjs, 0)

def PARAM_SimulationMsgAddSetStreamToWs(builder, setStreamToWs):
    builder.PrependInt32Slot(8, setStreamToWs, 0)

def PARAM_SimulationMsgAddSetNoiseOn(builder, setNoiseOn):
    builder.PrependInt32Slot(9, setNoiseOn, 0)

def PARAM_SimulationMsgEnd(builder):
    return builder.EndObject()



class PARAM_SimulationMsgT(object):

    # PARAM_SimulationMsgT
    def __init__(self):
        self.name = None  # type: str
        self.timestamp = 0.0  # type: float
        self.cmdReportOnce = 0  # type: int
        self.cmdReset = 0  # type: int
        self.streamToRjs = 0  # type: int
        self.streamToWs = 0  # type: int
        self.noiseOn = 0  # type: int
        self.setStreamToRjs = 0  # type: int
        self.setStreamToWs = 0  # type: int
        self.setNoiseOn = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        paramSimulationMsg = PARAM_SimulationMsg()
        paramSimulationMsg.Init(buf, pos)
        return cls.InitFromObj(paramSimulationMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, paramSimulationMsg):
        x = PARAM_SimulationMsgT()
        x._UnPack(paramSimulationMsg)
        return x

    # PARAM_SimulationMsgT
    def _UnPack(self, paramSimulationMsg):
        if paramSimulationMsg is None:
            return
        self.name = paramSimulationMsg.Name()
        self.timestamp = paramSimulationMsg.Timestamp()
        self.cmdReportOnce = paramSimulationMsg.CmdReportOnce()
        self.cmdReset = paramSimulationMsg.CmdReset()
        self.streamToRjs = paramSimulationMsg.StreamToRjs()
        self.streamToWs = paramSimulationMsg.StreamToWs()
        self.noiseOn = paramSimulationMsg.NoiseOn()
        self.setStreamToRjs = paramSimulationMsg.SetStreamToRjs()
        self.setStreamToWs = paramSimulationMsg.SetStreamToWs()
        self.setNoiseOn = paramSimulationMsg.SetNoiseOn()

    # PARAM_SimulationMsgT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        PARAM_SimulationMsgStart(builder)
        if self.name is not None:
            PARAM_SimulationMsgAddName(builder, name)
        PARAM_SimulationMsgAddTimestamp(builder, self.timestamp)
        PARAM_SimulationMsgAddCmdReportOnce(builder, self.cmdReportOnce)
        PARAM_SimulationMsgAddCmdReset(builder, self.cmdReset)
        PARAM_SimulationMsgAddStreamToRjs(builder, self.streamToRjs)
        PARAM_SimulationMsgAddStreamToWs(builder, self.streamToWs)
        PARAM_SimulationMsgAddNoiseOn(builder, self.noiseOn)
        PARAM_SimulationMsgAddSetStreamToRjs(builder, self.setStreamToRjs)
        PARAM_SimulationMsgAddSetStreamToWs(builder, self.setStreamToWs)
        PARAM_SimulationMsgAddSetNoiseOn(builder, self.setNoiseOn)
        paramSimulationMsg = PARAM_SimulationMsgEnd(builder)
        return paramSimulationMsg


