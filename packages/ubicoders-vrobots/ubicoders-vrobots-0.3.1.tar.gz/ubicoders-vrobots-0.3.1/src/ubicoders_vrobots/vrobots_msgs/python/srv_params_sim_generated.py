# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SrvSimParamsMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SrvSimParamsMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSrvSimParamsMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SrvSimParamsMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x52\x53\x50", size_prefixed=size_prefixed)

    # SrvSimParamsMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SrvSimParamsMsg
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # SrvSimParamsMsg
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvSimParamsMsg
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvSimParamsMsg
    def ReqSrcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvSimParamsMsg
    def CmdReportOnce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvSimParamsMsg
    def CmdReset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvSimParamsMsg
    def StreamToRjs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvSimParamsMsg
    def StreamToWs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvSimParamsMsg
    def NoiseOn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvSimParamsMsg
    def SetStreamToRjs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvSimParamsMsg
    def SetStreamToWs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvSimParamsMsg
    def SetNoiseOn(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def SrvSimParamsMsgStart(builder):
    builder.StartObject(12)

def SrvSimParamsMsgAddTimestamp(builder, timestamp):
    builder.PrependFloat64Slot(0, timestamp, 0.0)

def SrvSimParamsMsgAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def SrvSimParamsMsgAddId(builder, id):
    builder.PrependInt32Slot(2, id, 0)

def SrvSimParamsMsgAddReqSrcId(builder, reqSrcId):
    builder.PrependInt32Slot(3, reqSrcId, 0)

def SrvSimParamsMsgAddCmdReportOnce(builder, cmdReportOnce):
    builder.PrependInt32Slot(4, cmdReportOnce, 0)

def SrvSimParamsMsgAddCmdReset(builder, cmdReset):
    builder.PrependInt32Slot(5, cmdReset, 0)

def SrvSimParamsMsgAddStreamToRjs(builder, streamToRjs):
    builder.PrependInt32Slot(6, streamToRjs, 0)

def SrvSimParamsMsgAddStreamToWs(builder, streamToWs):
    builder.PrependInt32Slot(7, streamToWs, 0)

def SrvSimParamsMsgAddNoiseOn(builder, noiseOn):
    builder.PrependInt32Slot(8, noiseOn, 0)

def SrvSimParamsMsgAddSetStreamToRjs(builder, setStreamToRjs):
    builder.PrependInt32Slot(9, setStreamToRjs, 0)

def SrvSimParamsMsgAddSetStreamToWs(builder, setStreamToWs):
    builder.PrependInt32Slot(10, setStreamToWs, 0)

def SrvSimParamsMsgAddSetNoiseOn(builder, setNoiseOn):
    builder.PrependInt32Slot(11, setNoiseOn, 0)

def SrvSimParamsMsgEnd(builder):
    return builder.EndObject()



class SrvSimParamsMsgT(object):

    # SrvSimParamsMsgT
    def __init__(self):
        self.timestamp = 0.0  # type: float
        self.name = None  # type: str
        self.id = 0  # type: int
        self.reqSrcId = 0  # type: int
        self.cmdReportOnce = 0  # type: int
        self.cmdReset = 0  # type: int
        self.streamToRjs = 0  # type: int
        self.streamToWs = 0  # type: int
        self.noiseOn = 0  # type: int
        self.setStreamToRjs = 0  # type: int
        self.setStreamToWs = 0  # type: int
        self.setNoiseOn = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        srvSimParamsMsg = SrvSimParamsMsg()
        srvSimParamsMsg.Init(buf, pos)
        return cls.InitFromObj(srvSimParamsMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, srvSimParamsMsg):
        x = SrvSimParamsMsgT()
        x._UnPack(srvSimParamsMsg)
        return x

    # SrvSimParamsMsgT
    def _UnPack(self, srvSimParamsMsg):
        if srvSimParamsMsg is None:
            return
        self.timestamp = srvSimParamsMsg.Timestamp()
        self.name = srvSimParamsMsg.Name()
        self.id = srvSimParamsMsg.Id()
        self.reqSrcId = srvSimParamsMsg.ReqSrcId()
        self.cmdReportOnce = srvSimParamsMsg.CmdReportOnce()
        self.cmdReset = srvSimParamsMsg.CmdReset()
        self.streamToRjs = srvSimParamsMsg.StreamToRjs()
        self.streamToWs = srvSimParamsMsg.StreamToWs()
        self.noiseOn = srvSimParamsMsg.NoiseOn()
        self.setStreamToRjs = srvSimParamsMsg.SetStreamToRjs()
        self.setStreamToWs = srvSimParamsMsg.SetStreamToWs()
        self.setNoiseOn = srvSimParamsMsg.SetNoiseOn()

    # SrvSimParamsMsgT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        SrvSimParamsMsgStart(builder)
        SrvSimParamsMsgAddTimestamp(builder, self.timestamp)
        if self.name is not None:
            SrvSimParamsMsgAddName(builder, name)
        SrvSimParamsMsgAddId(builder, self.id)
        SrvSimParamsMsgAddReqSrcId(builder, self.reqSrcId)
        SrvSimParamsMsgAddCmdReportOnce(builder, self.cmdReportOnce)
        SrvSimParamsMsgAddCmdReset(builder, self.cmdReset)
        SrvSimParamsMsgAddStreamToRjs(builder, self.streamToRjs)
        SrvSimParamsMsgAddStreamToWs(builder, self.streamToWs)
        SrvSimParamsMsgAddNoiseOn(builder, self.noiseOn)
        SrvSimParamsMsgAddSetStreamToRjs(builder, self.setStreamToRjs)
        SrvSimParamsMsgAddSetStreamToWs(builder, self.setStreamToWs)
        SrvSimParamsMsgAddSetNoiseOn(builder, self.setNoiseOn)
        srvSimParamsMsg = SrvSimParamsMsgEnd(builder)
        return srvSimParamsMsg


