# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class PARAM_WebsocketMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PARAM_WebsocketMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPARAM_WebsocketMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def PARAM_WebsocketMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x50\x57\x45\x42", size_prefixed=size_prefixed)

    # PARAM_WebsocketMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PARAM_WebsocketMsg
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PARAM_WebsocketMsg
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # PARAM_WebsocketMsg
    def CmdReportOnce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PARAM_WebsocketMsg
    def CmdConnect(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PARAM_WebsocketMsg
    def CmdDisconnect(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PARAM_WebsocketMsg
    def IsConnected(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PARAM_WebsocketMsg
    def CurrentUrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PARAM_WebsocketMsg
    def ProdUrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PARAM_WebsocketMsg
    def ProdPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PARAM_WebsocketMsg
    def DevUrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PARAM_WebsocketMsg
    def DevPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PARAM_WebsocketMsg
    def SetProdUrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PARAM_WebsocketMsg
    def SetProdPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PARAM_WebsocketMsg
    def SetDevUrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # PARAM_WebsocketMsg
    def SetDevPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def PARAM_WebsocketMsgStart(builder):
    builder.StartObject(15)

def PARAM_WebsocketMsgAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def PARAM_WebsocketMsgAddTimestamp(builder, timestamp):
    builder.PrependFloat64Slot(1, timestamp, 0.0)

def PARAM_WebsocketMsgAddCmdReportOnce(builder, cmdReportOnce):
    builder.PrependInt32Slot(2, cmdReportOnce, 0)

def PARAM_WebsocketMsgAddCmdConnect(builder, cmdConnect):
    builder.PrependInt32Slot(3, cmdConnect, 0)

def PARAM_WebsocketMsgAddCmdDisconnect(builder, cmdDisconnect):
    builder.PrependInt32Slot(4, cmdDisconnect, 0)

def PARAM_WebsocketMsgAddIsConnected(builder, isConnected):
    builder.PrependInt32Slot(5, isConnected, 0)

def PARAM_WebsocketMsgAddCurrentUrl(builder, currentUrl):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(currentUrl), 0)

def PARAM_WebsocketMsgAddProdUrl(builder, prodUrl):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(prodUrl), 0)

def PARAM_WebsocketMsgAddProdPort(builder, prodPort):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(prodPort), 0)

def PARAM_WebsocketMsgAddDevUrl(builder, devUrl):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(devUrl), 0)

def PARAM_WebsocketMsgAddDevPort(builder, devPort):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(devPort), 0)

def PARAM_WebsocketMsgAddSetProdUrl(builder, setProdUrl):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(setProdUrl), 0)

def PARAM_WebsocketMsgAddSetProdPort(builder, setProdPort):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(setProdPort), 0)

def PARAM_WebsocketMsgAddSetDevUrl(builder, setDevUrl):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(setDevUrl), 0)

def PARAM_WebsocketMsgAddSetDevPort(builder, setDevPort):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(setDevPort), 0)

def PARAM_WebsocketMsgEnd(builder):
    return builder.EndObject()



class PARAM_WebsocketMsgT(object):

    # PARAM_WebsocketMsgT
    def __init__(self):
        self.name = None  # type: str
        self.timestamp = 0.0  # type: float
        self.cmdReportOnce = 0  # type: int
        self.cmdConnect = 0  # type: int
        self.cmdDisconnect = 0  # type: int
        self.isConnected = 0  # type: int
        self.currentUrl = None  # type: str
        self.prodUrl = None  # type: str
        self.prodPort = None  # type: str
        self.devUrl = None  # type: str
        self.devPort = None  # type: str
        self.setProdUrl = None  # type: str
        self.setProdPort = None  # type: str
        self.setDevUrl = None  # type: str
        self.setDevPort = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        paramWebsocketMsg = PARAM_WebsocketMsg()
        paramWebsocketMsg.Init(buf, pos)
        return cls.InitFromObj(paramWebsocketMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, paramWebsocketMsg):
        x = PARAM_WebsocketMsgT()
        x._UnPack(paramWebsocketMsg)
        return x

    # PARAM_WebsocketMsgT
    def _UnPack(self, paramWebsocketMsg):
        if paramWebsocketMsg is None:
            return
        self.name = paramWebsocketMsg.Name()
        self.timestamp = paramWebsocketMsg.Timestamp()
        self.cmdReportOnce = paramWebsocketMsg.CmdReportOnce()
        self.cmdConnect = paramWebsocketMsg.CmdConnect()
        self.cmdDisconnect = paramWebsocketMsg.CmdDisconnect()
        self.isConnected = paramWebsocketMsg.IsConnected()
        self.currentUrl = paramWebsocketMsg.CurrentUrl()
        self.prodUrl = paramWebsocketMsg.ProdUrl()
        self.prodPort = paramWebsocketMsg.ProdPort()
        self.devUrl = paramWebsocketMsg.DevUrl()
        self.devPort = paramWebsocketMsg.DevPort()
        self.setProdUrl = paramWebsocketMsg.SetProdUrl()
        self.setProdPort = paramWebsocketMsg.SetProdPort()
        self.setDevUrl = paramWebsocketMsg.SetDevUrl()
        self.setDevPort = paramWebsocketMsg.SetDevPort()

    # PARAM_WebsocketMsgT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.currentUrl is not None:
            currentUrl = builder.CreateString(self.currentUrl)
        if self.prodUrl is not None:
            prodUrl = builder.CreateString(self.prodUrl)
        if self.prodPort is not None:
            prodPort = builder.CreateString(self.prodPort)
        if self.devUrl is not None:
            devUrl = builder.CreateString(self.devUrl)
        if self.devPort is not None:
            devPort = builder.CreateString(self.devPort)
        if self.setProdUrl is not None:
            setProdUrl = builder.CreateString(self.setProdUrl)
        if self.setProdPort is not None:
            setProdPort = builder.CreateString(self.setProdPort)
        if self.setDevUrl is not None:
            setDevUrl = builder.CreateString(self.setDevUrl)
        if self.setDevPort is not None:
            setDevPort = builder.CreateString(self.setDevPort)
        PARAM_WebsocketMsgStart(builder)
        if self.name is not None:
            PARAM_WebsocketMsgAddName(builder, name)
        PARAM_WebsocketMsgAddTimestamp(builder, self.timestamp)
        PARAM_WebsocketMsgAddCmdReportOnce(builder, self.cmdReportOnce)
        PARAM_WebsocketMsgAddCmdConnect(builder, self.cmdConnect)
        PARAM_WebsocketMsgAddCmdDisconnect(builder, self.cmdDisconnect)
        PARAM_WebsocketMsgAddIsConnected(builder, self.isConnected)
        if self.currentUrl is not None:
            PARAM_WebsocketMsgAddCurrentUrl(builder, currentUrl)
        if self.prodUrl is not None:
            PARAM_WebsocketMsgAddProdUrl(builder, prodUrl)
        if self.prodPort is not None:
            PARAM_WebsocketMsgAddProdPort(builder, prodPort)
        if self.devUrl is not None:
            PARAM_WebsocketMsgAddDevUrl(builder, devUrl)
        if self.devPort is not None:
            PARAM_WebsocketMsgAddDevPort(builder, devPort)
        if self.setProdUrl is not None:
            PARAM_WebsocketMsgAddSetProdUrl(builder, setProdUrl)
        if self.setProdPort is not None:
            PARAM_WebsocketMsgAddSetProdPort(builder, setProdPort)
        if self.setDevUrl is not None:
            PARAM_WebsocketMsgAddSetDevUrl(builder, setDevUrl)
        if self.setDevPort is not None:
            PARAM_WebsocketMsgAddSetDevPort(builder, setDevPort)
        paramWebsocketMsg = PARAM_WebsocketMsgEnd(builder)
        return paramWebsocketMsg


