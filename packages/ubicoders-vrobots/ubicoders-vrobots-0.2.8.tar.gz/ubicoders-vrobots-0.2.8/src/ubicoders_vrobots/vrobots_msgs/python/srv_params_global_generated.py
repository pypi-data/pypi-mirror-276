# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SrvGParamsMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SrvGParamsMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSrvGParamsMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SrvGParamsMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x52\x47\x50", size_prefixed=size_prefixed)

    # SrvGParamsMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SrvGParamsMsg
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # SrvGParamsMsg
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvGParamsMsg
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvGParamsMsg
    def ReqSrcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvGParamsMsg
    def Scene(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvGParamsMsg
    def CmdReportOnce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvGParamsMsg
    def IsSigned(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvGParamsMsg
    def InputBreaker(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvGParamsMsg
    def PlayerMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvGParamsMsg
    def SetScene(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvGParamsMsg
    def SetSigniture(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvGParamsMsg
    def SetInputBreaker(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvGParamsMsg
    def SetPlayerMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def SrvGParamsMsgStart(builder):
    builder.StartObject(13)

def SrvGParamsMsgAddTimestamp(builder, timestamp):
    builder.PrependFloat64Slot(0, timestamp, 0.0)

def SrvGParamsMsgAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def SrvGParamsMsgAddId(builder, id):
    builder.PrependInt32Slot(2, id, 0)

def SrvGParamsMsgAddReqSrcId(builder, reqSrcId):
    builder.PrependInt32Slot(3, reqSrcId, 0)

def SrvGParamsMsgAddScene(builder, scene):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(scene), 0)

def SrvGParamsMsgAddCmdReportOnce(builder, cmdReportOnce):
    builder.PrependInt32Slot(5, cmdReportOnce, 0)

def SrvGParamsMsgAddIsSigned(builder, isSigned):
    builder.PrependInt32Slot(6, isSigned, 0)

def SrvGParamsMsgAddInputBreaker(builder, inputBreaker):
    builder.PrependInt32Slot(7, inputBreaker, 0)

def SrvGParamsMsgAddPlayerMode(builder, playerMode):
    builder.PrependInt32Slot(8, playerMode, 0)

def SrvGParamsMsgAddSetScene(builder, setScene):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(setScene), 0)

def SrvGParamsMsgAddSetSigniture(builder, setSigniture):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(setSigniture), 0)

def SrvGParamsMsgAddSetInputBreaker(builder, setInputBreaker):
    builder.PrependInt32Slot(11, setInputBreaker, 0)

def SrvGParamsMsgAddSetPlayerMode(builder, setPlayerMode):
    builder.PrependInt32Slot(12, setPlayerMode, 0)

def SrvGParamsMsgEnd(builder):
    return builder.EndObject()



class SrvGParamsMsgT(object):

    # SrvGParamsMsgT
    def __init__(self):
        self.timestamp = 0.0  # type: float
        self.name = None  # type: str
        self.id = 0  # type: int
        self.reqSrcId = 0  # type: int
        self.scene = None  # type: str
        self.cmdReportOnce = 0  # type: int
        self.isSigned = 0  # type: int
        self.inputBreaker = 0  # type: int
        self.playerMode = 0  # type: int
        self.setScene = None  # type: str
        self.setSigniture = None  # type: str
        self.setInputBreaker = 0  # type: int
        self.setPlayerMode = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        srvGparamsMsg = SrvGParamsMsg()
        srvGparamsMsg.Init(buf, pos)
        return cls.InitFromObj(srvGparamsMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, srvGparamsMsg):
        x = SrvGParamsMsgT()
        x._UnPack(srvGparamsMsg)
        return x

    # SrvGParamsMsgT
    def _UnPack(self, srvGparamsMsg):
        if srvGparamsMsg is None:
            return
        self.timestamp = srvGparamsMsg.Timestamp()
        self.name = srvGparamsMsg.Name()
        self.id = srvGparamsMsg.Id()
        self.reqSrcId = srvGparamsMsg.ReqSrcId()
        self.scene = srvGparamsMsg.Scene()
        self.cmdReportOnce = srvGparamsMsg.CmdReportOnce()
        self.isSigned = srvGparamsMsg.IsSigned()
        self.inputBreaker = srvGparamsMsg.InputBreaker()
        self.playerMode = srvGparamsMsg.PlayerMode()
        self.setScene = srvGparamsMsg.SetScene()
        self.setSigniture = srvGparamsMsg.SetSigniture()
        self.setInputBreaker = srvGparamsMsg.SetInputBreaker()
        self.setPlayerMode = srvGparamsMsg.SetPlayerMode()

    # SrvGParamsMsgT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.scene is not None:
            scene = builder.CreateString(self.scene)
        if self.setScene is not None:
            setScene = builder.CreateString(self.setScene)
        if self.setSigniture is not None:
            setSigniture = builder.CreateString(self.setSigniture)
        SrvGParamsMsgStart(builder)
        SrvGParamsMsgAddTimestamp(builder, self.timestamp)
        if self.name is not None:
            SrvGParamsMsgAddName(builder, name)
        SrvGParamsMsgAddId(builder, self.id)
        SrvGParamsMsgAddReqSrcId(builder, self.reqSrcId)
        if self.scene is not None:
            SrvGParamsMsgAddScene(builder, scene)
        SrvGParamsMsgAddCmdReportOnce(builder, self.cmdReportOnce)
        SrvGParamsMsgAddIsSigned(builder, self.isSigned)
        SrvGParamsMsgAddInputBreaker(builder, self.inputBreaker)
        SrvGParamsMsgAddPlayerMode(builder, self.playerMode)
        if self.setScene is not None:
            SrvGParamsMsgAddSetScene(builder, setScene)
        if self.setSigniture is not None:
            SrvGParamsMsgAddSetSigniture(builder, setSigniture)
        SrvGParamsMsgAddSetInputBreaker(builder, self.setInputBreaker)
        SrvGParamsMsgAddSetPlayerMode(builder, self.setPlayerMode)
        srvGparamsMsg = SrvGParamsMsgEnd(builder)
        return srvGparamsMsg


