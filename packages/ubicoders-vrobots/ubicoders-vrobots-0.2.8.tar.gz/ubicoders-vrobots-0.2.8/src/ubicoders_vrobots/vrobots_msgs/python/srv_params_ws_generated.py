# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SrvWSParamsMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SrvWSParamsMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSrvWSParamsMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def SrvWSParamsMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x52\x57\x50", size_prefixed=size_prefixed)

    # SrvWSParamsMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SrvWSParamsMsg
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # SrvWSParamsMsg
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvWSParamsMsg
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvWSParamsMsg
    def ReqSrcId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvWSParamsMsg
    def CmdReportOnce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvWSParamsMsg
    def CmdConnect(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvWSParamsMsg
    def CmdDisconnect(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvWSParamsMsg
    def IsConnected(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SrvWSParamsMsg
    def CurrentUrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvWSParamsMsg
    def ProdUrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvWSParamsMsg
    def ProdPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvWSParamsMsg
    def DevUrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvWSParamsMsg
    def DevPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvWSParamsMsg
    def SetProdUrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvWSParamsMsg
    def SetProdPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvWSParamsMsg
    def SetDevUrl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SrvWSParamsMsg
    def SetDevPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SrvWSParamsMsgStart(builder):
    builder.StartObject(17)

def SrvWSParamsMsgAddTimestamp(builder, timestamp):
    builder.PrependFloat64Slot(0, timestamp, 0.0)

def SrvWSParamsMsgAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def SrvWSParamsMsgAddId(builder, id):
    builder.PrependInt32Slot(2, id, 0)

def SrvWSParamsMsgAddReqSrcId(builder, reqSrcId):
    builder.PrependInt32Slot(3, reqSrcId, 0)

def SrvWSParamsMsgAddCmdReportOnce(builder, cmdReportOnce):
    builder.PrependInt32Slot(4, cmdReportOnce, 0)

def SrvWSParamsMsgAddCmdConnect(builder, cmdConnect):
    builder.PrependInt32Slot(5, cmdConnect, 0)

def SrvWSParamsMsgAddCmdDisconnect(builder, cmdDisconnect):
    builder.PrependInt32Slot(6, cmdDisconnect, 0)

def SrvWSParamsMsgAddIsConnected(builder, isConnected):
    builder.PrependInt32Slot(7, isConnected, 0)

def SrvWSParamsMsgAddCurrentUrl(builder, currentUrl):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(currentUrl), 0)

def SrvWSParamsMsgAddProdUrl(builder, prodUrl):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(prodUrl), 0)

def SrvWSParamsMsgAddProdPort(builder, prodPort):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(prodPort), 0)

def SrvWSParamsMsgAddDevUrl(builder, devUrl):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(devUrl), 0)

def SrvWSParamsMsgAddDevPort(builder, devPort):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(devPort), 0)

def SrvWSParamsMsgAddSetProdUrl(builder, setProdUrl):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(setProdUrl), 0)

def SrvWSParamsMsgAddSetProdPort(builder, setProdPort):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(setProdPort), 0)

def SrvWSParamsMsgAddSetDevUrl(builder, setDevUrl):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(setDevUrl), 0)

def SrvWSParamsMsgAddSetDevPort(builder, setDevPort):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(setDevPort), 0)

def SrvWSParamsMsgEnd(builder):
    return builder.EndObject()



class SrvWSParamsMsgT(object):

    # SrvWSParamsMsgT
    def __init__(self):
        self.timestamp = 0.0  # type: float
        self.name = None  # type: str
        self.id = 0  # type: int
        self.reqSrcId = 0  # type: int
        self.cmdReportOnce = 0  # type: int
        self.cmdConnect = 0  # type: int
        self.cmdDisconnect = 0  # type: int
        self.isConnected = 0  # type: int
        self.currentUrl = None  # type: str
        self.prodUrl = None  # type: str
        self.prodPort = None  # type: str
        self.devUrl = None  # type: str
        self.devPort = None  # type: str
        self.setProdUrl = None  # type: str
        self.setProdPort = None  # type: str
        self.setDevUrl = None  # type: str
        self.setDevPort = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        srvWsparamsMsg = SrvWSParamsMsg()
        srvWsparamsMsg.Init(buf, pos)
        return cls.InitFromObj(srvWsparamsMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, srvWsparamsMsg):
        x = SrvWSParamsMsgT()
        x._UnPack(srvWsparamsMsg)
        return x

    # SrvWSParamsMsgT
    def _UnPack(self, srvWsparamsMsg):
        if srvWsparamsMsg is None:
            return
        self.timestamp = srvWsparamsMsg.Timestamp()
        self.name = srvWsparamsMsg.Name()
        self.id = srvWsparamsMsg.Id()
        self.reqSrcId = srvWsparamsMsg.ReqSrcId()
        self.cmdReportOnce = srvWsparamsMsg.CmdReportOnce()
        self.cmdConnect = srvWsparamsMsg.CmdConnect()
        self.cmdDisconnect = srvWsparamsMsg.CmdDisconnect()
        self.isConnected = srvWsparamsMsg.IsConnected()
        self.currentUrl = srvWsparamsMsg.CurrentUrl()
        self.prodUrl = srvWsparamsMsg.ProdUrl()
        self.prodPort = srvWsparamsMsg.ProdPort()
        self.devUrl = srvWsparamsMsg.DevUrl()
        self.devPort = srvWsparamsMsg.DevPort()
        self.setProdUrl = srvWsparamsMsg.SetProdUrl()
        self.setProdPort = srvWsparamsMsg.SetProdPort()
        self.setDevUrl = srvWsparamsMsg.SetDevUrl()
        self.setDevPort = srvWsparamsMsg.SetDevPort()

    # SrvWSParamsMsgT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.currentUrl is not None:
            currentUrl = builder.CreateString(self.currentUrl)
        if self.prodUrl is not None:
            prodUrl = builder.CreateString(self.prodUrl)
        if self.prodPort is not None:
            prodPort = builder.CreateString(self.prodPort)
        if self.devUrl is not None:
            devUrl = builder.CreateString(self.devUrl)
        if self.devPort is not None:
            devPort = builder.CreateString(self.devPort)
        if self.setProdUrl is not None:
            setProdUrl = builder.CreateString(self.setProdUrl)
        if self.setProdPort is not None:
            setProdPort = builder.CreateString(self.setProdPort)
        if self.setDevUrl is not None:
            setDevUrl = builder.CreateString(self.setDevUrl)
        if self.setDevPort is not None:
            setDevPort = builder.CreateString(self.setDevPort)
        SrvWSParamsMsgStart(builder)
        SrvWSParamsMsgAddTimestamp(builder, self.timestamp)
        if self.name is not None:
            SrvWSParamsMsgAddName(builder, name)
        SrvWSParamsMsgAddId(builder, self.id)
        SrvWSParamsMsgAddReqSrcId(builder, self.reqSrcId)
        SrvWSParamsMsgAddCmdReportOnce(builder, self.cmdReportOnce)
        SrvWSParamsMsgAddCmdConnect(builder, self.cmdConnect)
        SrvWSParamsMsgAddCmdDisconnect(builder, self.cmdDisconnect)
        SrvWSParamsMsgAddIsConnected(builder, self.isConnected)
        if self.currentUrl is not None:
            SrvWSParamsMsgAddCurrentUrl(builder, currentUrl)
        if self.prodUrl is not None:
            SrvWSParamsMsgAddProdUrl(builder, prodUrl)
        if self.prodPort is not None:
            SrvWSParamsMsgAddProdPort(builder, prodPort)
        if self.devUrl is not None:
            SrvWSParamsMsgAddDevUrl(builder, devUrl)
        if self.devPort is not None:
            SrvWSParamsMsgAddDevPort(builder, devPort)
        if self.setProdUrl is not None:
            SrvWSParamsMsgAddSetProdUrl(builder, setProdUrl)
        if self.setProdPort is not None:
            SrvWSParamsMsgAddSetProdPort(builder, setProdPort)
        if self.setDevUrl is not None:
            SrvWSParamsMsgAddSetDevUrl(builder, setDevUrl)
        if self.setDevPort is not None:
            SrvWSParamsMsgAddSetDevPort(builder, setDevPort)
        srvWsparamsMsg = SrvWSParamsMsgEnd(builder)
        return srvWsparamsMsg


