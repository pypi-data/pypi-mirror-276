# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['classy_classification',
 'classy_classification.classifiers',
 'classy_classification.examples']

package_data = \
{'': ['*']}

install_requires = \
['pandas>=1,<2',
 'scikit-learn>=1.0,<2.0',
 'sentence-transformers>=2.0,<3.0',
 'spacy[transformers]>=3.0,<4.0',
 'terminado<0.18',
 'transformers[torch]>4.20,<5']

entry_points = \
{'spacy_factories': ['spacy = '
                     'classy_classification.__init__:make_text_categorizer']}

setup_kwargs = {
    'name': 'classy-classification',
    'version': '1.0.0',
    'description': "Have you every struggled with needing a Spacy TextCategorizer but didn't have the time to train one from scratch? Classy Classification is the way to go!",
    'long_description': '# Classy Classification\nHave you ever struggled with needing a [Spacy TextCategorizer](https://spacy.io/api/textcategorizer) but didn\'t have the time to train one from scratch? Classy Classification is the way to go! For few-shot classification using [sentence-transformers](https://github.com/UKPLab/sentence-transformers) or [spaCy models](https://spacy.io/usage/models), provide a dictionary with labels and examples, or just provide a list of labels for zero shot-classification with [Hugginface zero-shot classifiers](https://huggingface.co/models?pipeline_tag=zero-shot-classification).\n\n[![Current Release Version](https://img.shields.io/github/release/pandora-intelligence/classy-classification.svg?style=flat-square&logo=github)](https://github.com/pandora-intelligence/classy-classification/releases)\n[![pypi Version](https://img.shields.io/pypi/v/classy-classification.svg?style=flat-square&logo=pypi&logoColor=white)](https://pypi.org/project/classy-classification/)\n[![PyPi downloads](https://static.pepy.tech/personalized-badge/classy-classification?period=total&units=international_system&left_color=grey&right_color=orange&left_text=pip%20downloads)](https://pypi.org/project/classy-classification/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/ambv/black)\n\n# Install\n``` pip install classy-classification```\n\n## SetFit support\n\nI got a lot of requests for SetFit support, but I decided to create a [separate package](https://github.com/davidberenstein1957/spacy-setfit) for this. Feel free to check it out. ❤️\n\n# Quickstart\n## SpaCy embeddings\n```python\nimport spacy\n# or import standalone\n# from classy_classification import ClassyClassifier\n\ndata = {\n    "furniture": ["This text is about chairs.",\n               "Couches, benches and televisions.",\n               "I really need to get a new sofa."],\n    "kitchen": ["There also exist things like fridges.",\n                "I hope to be getting a new stove today.",\n                "Do you also have some ovens."]\n}\n\nnlp = spacy.load("en_core_web_trf")\nnlp.add_pipe(\n    "classy_classification",\n    config={\n        "data": data,\n        "model": "spacy"\n    }\n)\n\nprint(nlp("I am looking for kitchen appliances.")._.cats)\n\n# Output:\n#\n# [{"furniture" : 0.21}, {"kitchen": 0.79}]\n```\n### Sentence level classification\n```python\nimport spacy\n\ndata = {\n    "furniture": ["This text is about chairs.",\n               "Couches, benches and televisions.",\n               "I really need to get a new sofa."],\n    "kitchen": ["There also exist things like fridges.",\n                "I hope to be getting a new stove today.",\n                "Do you also have some ovens."]\n}\n\nnlp.add_pipe(\n    "classy_classification",\n    config={\n        "data": data,\n        "model": "spacy",\n        "include_sent": True\n    }\n)\n\nprint(nlp("I am looking for kitchen appliances. And I love doing so.").sents[0]._.cats)\n\n# Output:\n#\n# [[{"furniture" : 0.21}, {"kitchen": 0.79}]\n```\n\n### Define random seed and verbosity\n\n```python\n\nnlp.add_pipe(\n    "classy_classification",\n    config={\n        "data": data,\n        "verbose": True,\n        "config": {"seed": 42}\n    }\n)\n```\n\n### Multi-label classification\n\nSometimes multiple labels are necessary to fully describe the contents of a text. In that case, we want to make use of the **multi-label** implementation, here the sum of label scores is not limited to 1. Just pass the same training data to multiple keys.\n\n```python\nimport spacy\n\ndata = {\n    "furniture": ["This text is about chairs.",\n               "Couches, benches and televisions.",\n               "I really need to get a new sofa.",\n               "We have a new dinner table.",\n               "There also exist things like fridges.",\n                "I hope to be getting a new stove today.",\n                "Do you also have some ovens.",\n                "We have a new dinner table."],\n    "kitchen": ["There also exist things like fridges.",\n                "I hope to be getting a new stove today.",\n                "Do you also have some ovens.",\n                "We have a new dinner table.",\n                "There also exist things like fridges.",\n                "I hope to be getting a new stove today.",\n                "Do you also have some ovens.",\n                "We have a new dinner table."]\n}\n\nnlp = spacy.load("en_core_web_md")\nnlp.add_pipe(\n    "classy_classification",\n    config={\n        "data": data,\n        "model": "spacy",\n        "multi_label": True,\n    }\n)\n\nprint(nlp("I am looking for furniture and kitchen equipment.")._.cats)\n\n# Output:\n#\n# [{"furniture": 0.92}, {"kitchen": 0.91}]\n```\n\n### Outlier detection\n\nSometimes it is worth to be able to do outlier detection or binary classification. This can either be approached using\na binary training dataset, however, I have also implemented support for a `OneClassSVM` for [outlier detection using a single label](https://scikit-learn.org/stable/modules/generated/sklearn.svm.OneClassSVM.html). Not that this method does not return probabilities, but that the data is formatted like label-score value pair to ensure uniformity.\n\nApproach 1:\n\n```python\nimport spacy\n\ndata_binary = {\n    "inlier": ["This text is about chairs.",\n               "Couches, benches and televisions.",\n               "I really need to get a new sofa."],\n    "outlier": ["Text about kitchen equipment",\n                "This text is about politics",\n                "Comments about AI and stuff."]\n}\n\nnlp = spacy.load("en_core_web_md")\nnlp.add_pipe(\n    "classy_classification",\n    config={\n        "data": data_binary,\n    }\n)\n\nprint(nlp("This text is a random text")._.cats)\n\n# Output:\n#\n# [{\'inlier\': 0.2926672385488411, \'outlier\': 0.707332761451159}]\n```\n\nApproach 2:\n\n```python\nimport spacy\n\ndata_singular = {\n    "furniture": ["This text is about chairs.",\n               "Couches, benches and televisions.",\n               "I really need to get a new sofa.",\n               "We have a new dinner table."]\n}\nnlp = spacy.load("en_core_web_md")\nnlp.add_pipe(\n    "classy_classification",\n    config={\n        "data": data_singular,\n    }\n)\n\nprint(nlp("This text is a random text")._.cats)\n\n# Output:\n#\n# [{\'furniture\': 0, \'not_furniture\': 1}]\n```\n\n## Sentence-transfomer embeddings\n\n```python\nimport spacy\n\ndata = {\n    "furniture": ["This text is about chairs.",\n               "Couches, benches and televisions.",\n               "I really need to get a new sofa."],\n    "kitchen": ["There also exist things like fridges.",\n                "I hope to be getting a new stove today.",\n                "Do you also have some ovens."]\n}\n\nnlp = spacy.blank("en")\nnlp.add_pipe(\n    "classy_classification",\n    config={\n        "data": data,\n        "model": "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2",\n        "device": "gpu"\n    }\n)\n\nprint(nlp("I am looking for kitchen appliances.")._.cats)\n\n# Output:\n#\n# [{"furniture": 0.21}, {"kitchen": 0.79}]\n```\n\n## Hugginface zero-shot classifiers\n\n```python\nimport spacy\n\ndata = ["furniture", "kitchen"]\n\nnlp = spacy.blank("en")\nnlp.add_pipe(\n    "classy_classification",\n    config={\n        "data": data,\n        "model": "typeform/distilbert-base-uncased-mnli",\n        "cat_type": "zero",\n        "device": "gpu"\n    }\n)\n\nprint(nlp("I am looking for kitchen appliances.")._.cats)\n\n# Output:\n#\n# [{"furniture": 0.21}, {"kitchen": 0.79}]\n```\n\n# Credits\n\n## Inspiration Drawn From\n\n[Huggingface](https://huggingface.co/) does offer some nice models for few/zero-shot classification, but these are not tailored to multi-lingual approaches. Rasa NLU has [a nice approach](https://rasa.com/blog/rasa-nlu-in-depth-part-1-intent-classification/) for this, but its too embedded in their codebase for easy usage outside of Rasa/chatbots. Additionally, it made sense to integrate [sentence-transformers](https://github.com/UKPLab/sentence-transformers) and [Hugginface zero-shot](https://huggingface.co/models?pipeline_tag=zero-shot-classification), instead of default [word embeddings](https://arxiv.org/abs/1301.3781). Finally, I decided to integrate with Spacy, since training a custom [Spacy TextCategorizer](https://spacy.io/api/textcategorizer) seems like a lot of hassle if you want something quick and dirty.\n\n- [Scikit-learn](https://github.com/scikit-learn/scikit-learn)\n- [Rasa NLU](https://github.com/RasaHQ/rasa)\n- [Sentence Transformers](https://github.com/UKPLab/sentence-transformers)\n- [Spacy](https://github.com/explosion/spaCy)\n\n## Or buy me a coffee\n\n[!["Buy Me A Coffee"](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://www.buymeacoffee.com/98kf2552674)\n\n# Standalone usage without spaCy\n\n```python\n\nfrom classy_classification import ClassyClassifier\n\ndata = {\n    "furniture": ["This text is about chairs.",\n               "Couches, benches and televisions.",\n               "I really need to get a new sofa."],\n    "kitchen": ["There also exist things like fridges.",\n                "I hope to be getting a new stove today.",\n                "Do you also have some ovens."]\n}\n\nclassifier = ClassyClassifier(data=data)\nclassifier("I am looking for kitchen appliances.")\nclassifier.pipe(["I am looking for kitchen appliances."])\n\n# overwrite training data\nclassifier.set_training_data(data=data)\nclassifier("I am looking for kitchen appliances.")\n\n# overwrite [embedding model](https://www.sbert.net/docs/pretrained_models.html)\nclassifier.set_embedding_model(model="paraphrase-MiniLM-L3-v2")\nclassifier("I am looking for kitchen appliances.")\n\n# overwrite SVC config\nclassifier.set_classification_model(\n    config={\n        "C": [1, 2, 5, 10, 20, 100],\n        "kernel": ["linear"],\n        "max_cross_validation_folds": 5\n    }\n)\nclassifier("I am looking for kitchen appliances.")\n```\n\n## Save and load models\n\n```python\ndata = {\n    "furniture": ["This text is about chairs.",\n               "Couches, benches and televisions.",\n               "I really need to get a new sofa."],\n    "kitchen": ["There also exist things like fridges.",\n                "I hope to be getting a new stove today.",\n                "Do you also have some ovens."]\n}\nclassifier = classyClassifier(data=data)\n\nwith open("./classifier.pkl", "wb") as f:\n    pickle.dump(classifier, f)\n\nf = open("./classifier.pkl", "rb")\nclassifier = pickle.load(f)\nclassifier("I am looking for kitchen appliances.")\n```\n',
    'author': 'David Berenstein',
    'author_email': 'david.m.berenstein@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/davidberenstein1957/classy-classification',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.8,<3.12',
}


setup(**setup_kwargs)
