---
# We basically use Auto-DevOps with some customizations.
include:
  - template: Jobs/Code-Quality.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml
  - template: Jobs/SAST.gitlab-ci.yml

# reset stages to reflect what we will be doing
stages:
  - build
  - test
  - deploy

# A lot of env variables are defined in interface gitlab.org :
#  https://gitlab.com/groups/liant-sasu/-/settings/ci_cd

# This project variables
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# https://pip.pypa.io/en/stable/topics/caching/
cache:
  paths:
    - .cache/pip

image: python:latest

build:
  stage: build
  before_script:
    - pip install --upgrade build
  script:
    - python -m build
  artifacts:
    untracked: false
    when: on_success
    access: all
    expire_in: "2 hours"
    paths:
      - dist/
  

test:
  stage: test
  coverage: /(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/
  before_script:
    - pip install tox
  # Besoin de copier les fichiers venant d'Herokuish vers le dossier du projet...
  script:
    - tox
  artifacts:
    when: always
    paths:
      - coverage.xml
      - .coverage
    reports:
      junit: coverage.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

gitlab-deploy:
  stage: deploy
  script:
    - |
      if [ ! -d 'dist' ] || [ "$(ls -A dist)" = "" ]; then
        echo No package found in dist/, check in your pipeline the package-build job to know why.
        echo Failing package push.
        exit 1
      fi
    - python3 -m pip install twine
    - >
      TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token
      python -m twine upload
      --repository-url https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/pypi
      dist/*
  needs:
    - build
    - test
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      # You can accept failure here if you want
      # allow_failure: true
      when: on_success

pypi-deploy:
  stage: deploy
  script:
    - python3 -m pip install twine
    - |
      if [ "$PYPI_TOKEN" = "" ]; then
        echo Please define PYPI_TOKEN in the project Gitlab CI/CD > variable settings: https://gitlab.com/${CI_PROJECT_PATH}/-/settings/ci_cd
        echo And then retry this job.
        echo You define this token on the "API token" section of your pypi account https://pypi.org/manage/account/
        exit 1
      fi
    - TWINE_PASSWORD=${PYPI_TOKEN} TWINE_USERNAME=__token__ python -m twine upload dist/*
  needs:
    - build
    - test
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
