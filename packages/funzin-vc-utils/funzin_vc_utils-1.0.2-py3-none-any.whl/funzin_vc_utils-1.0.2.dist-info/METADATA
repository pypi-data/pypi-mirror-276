Metadata-Version: 2.1
Name: funzin-vc-utils
Version: 1.0.2
Summary: funzin_vc_utils is a package that provides various utilities for python programming.
Home-page: 
Author: dnchoi
Author-email: luke.dn.choi@funzin.co.kr
License: MIT
Requires-Python: >=3
Description-Content-Type: text/markdown
Requires-Dist: black
Requires-Dist: flake8
Requires-Dist: colorlog
Requires-Dist: paho-mqtt

# Funzin VC solution team Utils packages

## How to use

### Logger
To use the logger package, follow these steps:

1. Import the logger module:
    ```python
    from fz_logger.fz_logger import Logger
    ```

2. Create a logger object in class:
    ```python
    from fz_logger.fz_logger import Logger
    class template(Logger):
        def __init__(self):
            super().__init__(level=config["logger"]["level"], save_path=config["logger"]["save_path"])
        ...
    ```

    ```python
    self.logger.debug("This is a debug message")
    self.logger.info("This is an info message")
    self.logger.warning("This is a warning message")
    self.logger.error("This is an error message")
    self.logger.critical("This is a critical message")
    ```

3. Create a logger object in not class:
    ```python
    from fz_logger.fz_logger import Logger
    logger = Logger(level="INFO", save_path="app-logs").logger
    ...
    ```

    ```python
    logger.debug("This is a debug message")
    logger.info("This is an info message")
    logger.warning("This is a warning message")
    logger.error("This is an error message")
    logger.critical("This is a critical message")
    ```
### MQTT
"""
This module provides a MQTT client implementation.

Usage:
    1. Import the `mqtt_client` module.
    2. Create an instance of the `MQTTClient` class.
    3. Set the necessary connection parameters using the `set_connection_params` method.
    4. Connect to the MQTT broker using the `connect` method.
    5. Subscribe to topics using the `subscribe` method.
    6. Publish messages using the `publish` method.
    7. Handle incoming messages using the `on_message` callback.
    8. Disconnect from the MQTT broker using the `disconnect` method.

Example:
    ```
    from fz_mqtt import mqtt_client

    # Create an instance of the MQTTClient class
    client = mqtt_client.MQTTClient()

    # Set the connection parameters
    client.set_connection_params("mqtt.example.com", 1883, "username", "password")

    # Connect to the MQTT broker
    client.connect()

    # Subscribe to a topic
    client.subscribe("my/topic")

    # Publish a message
    client.publish("my/topic", "Hello, MQTT!")

    # Define a callback function to handle incoming messages
    def on_message(topic, message):
        print(f"Received message on topic '{topic}': {message}")

    # Set the callback function
    client.on_message = on_message

    # Disconnect from the MQTT broker
    client.disconnect()
    ```

Note:
    - This module requires the `paho-mqtt` library to be installed.
    - Make sure to handle exceptions when using the MQTT client methods.
"""
