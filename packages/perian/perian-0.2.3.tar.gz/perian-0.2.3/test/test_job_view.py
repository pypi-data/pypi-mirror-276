# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.24
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from perian.models.job_view import JobView

class TestJobView(unittest.TestCase):
    """JobView unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobView:
        """Test JobView
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobView`
        """
        model = JobView()
        if include_optional:
            return JobView(
                id = '',
                status = 'Queued',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                done_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                logs = '',
                errors = '',
                price = perian.models.price_data.PriceData(
                    unit_price = '0.0', 
                    currency = null, 
                    granularity = null, 
                    provider_billing_granularity = null, ),
                docker_metadata = perian.models.docker_metadata.DockerMetadata(
                    docker_run_parameters = null, 
                    docker_registry_credentials = perian.models.docker_registry_credentials.DockerRegistryCredentials(
                        url = '', 
                        username = '', 
                        password = '', ), ),
                requirement_metadata = perian.models.requirement_metadata.RequirementMetadata(
                    os_storage_config = null, 
                    requirements = perian.models.instance_type_query.InstanceTypeQuery(
                        operator = 'EQUALS', 
                        options = perian.models.query_options.QueryOptions(
                            limit = 56, 
                            offset = 56, 
                            order = null, 
                            lazy_loading = True, ), 
                        id = null, 
                        region = perian.models.region_query.RegionQuery(
                            name = '', 
                            location = '', 
                            sustainable = True, 
                            status = '', ), 
                        zone = perian.models.zone_query.ZoneQuery(
                            name = '', 
                            status = '', ), 
                        name = '', 
                        cpu = perian.models.cpu_query.CpuQuery(
                            no = 56, 
                            cores = 56, 
                            threads = 56, 
                            speed = '', ), 
                        accelerator = perian.models.accelerator_query.AcceleratorQuery(
                            no = 56, 
                            memory = perian.models.memory_query.MemoryQuery(
                                size = '', ), 
                            vendor = '', 
                            name = null, 
                            description = null, 
                            provider_specific_name = perian.models.provider_specific_name.provider_specific_name(), ), 
                        ram = perian.models.memory_query.MemoryQuery(
                            size = '', ), 
                        storage = perian.models.storage_query.StorageQuery(
                            no = 56, 
                            size = '', 
                            type = '', 
                            speed = '', 
                            included = '', ), 
                        network = perian.models.network_query.NetworkQuery(
                            inbound_speed = '', 
                            outbound_speed = '', ), 
                        price = perian.models.price_query.PriceQuery(
                            unit_price = '', ), 
                        availability = perian.models.availability_query.AvailabilityQuery(
                            available = True, ), 
                        type = '', 
                        provider = perian.models.provider_query.ProviderQuery(
                            name_short = '', 
                            location = '', 
                            status = '', ), 
                        reference_id = perian.models.reference_id_query.ReferenceIdQuery(), ), ),
                runtime_metadata = perian.models.runtime_metadata.RuntimeMetadata(
                    instance_type_id = '', 
                    auto_failover_instance_type = True, )
            )
        else:
            return JobView(
        )
        """

    def testJobView(self):
        """Test JobView"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
