# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.24
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from perian.models.instance_type_query_input import InstanceTypeQueryInput

class TestInstanceTypeQueryInput(unittest.TestCase):
    """InstanceTypeQueryInput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> InstanceTypeQueryInput:
        """Test InstanceTypeQueryInput
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `InstanceTypeQueryInput`
        """
        model = InstanceTypeQueryInput()
        if include_optional:
            return InstanceTypeQueryInput(
                operator = 'EQUALS',
                options = perian.models.query_options.QueryOptions(
                    limit = 56, 
                    offset = 56, 
                    order = null, 
                    lazy_loading = True, ),
                id = None,
                region = perian.models.region_query.RegionQuery(
                    operator = 'EQUALS', 
                    options = perian.models.query_options.QueryOptions(
                        limit = 56, 
                        offset = 56, 
                        order = null, 
                        lazy_loading = True, ), 
                    id = null, 
                    name = '', 
                    location = '', 
                    sustainable = True, 
                    status = '', ),
                zone = perian.models.zone_query.ZoneQuery(
                    operator = 'EQUALS', 
                    options = perian.models.query_options.QueryOptions(
                        limit = 56, 
                        offset = 56, 
                        order = null, 
                        lazy_loading = True, ), 
                    id = null, 
                    name = '', 
                    status = '', ),
                name = '',
                cpu = perian.models.cpu_query.CpuQuery(
                    operator = 'EQUALS', 
                    options = perian.models.query_options.QueryOptions(
                        limit = 56, 
                        offset = 56, 
                        order = null, 
                        lazy_loading = True, ), 
                    no = 56, 
                    cores = 56, 
                    threads = 56, 
                    speed = null, ),
                accelerator = perian.models.accelerator_query.AcceleratorQuery(
                    operator = 'EQUALS', 
                    options = perian.models.query_options.QueryOptions(
                        limit = 56, 
                        offset = 56, 
                        order = null, 
                        lazy_loading = True, ), 
                    no = 56, 
                    memory = perian.models.memory_query.MemoryQuery(
                        size = null, ), 
                    vendor = '', 
                    name = null, 
                    description = null, 
                    provider_specific_name = perian.models.provider_specific_name.provider_specific_name(), ),
                ram = perian.models.memory_query.MemoryQuery(
                    operator = 'EQUALS', 
                    options = perian.models.query_options.QueryOptions(
                        limit = 56, 
                        offset = 56, 
                        order = null, 
                        lazy_loading = True, ), 
                    size = null, ),
                storage = perian.models.storage_query.StorageQuery(
                    operator = 'EQUALS', 
                    options = perian.models.query_options.QueryOptions(
                        limit = 56, 
                        offset = 56, 
                        order = null, 
                        lazy_loading = True, ), 
                    no = 56, 
                    size = null, 
                    type = '', 
                    speed = null, 
                    included = '', ),
                network = perian.models.network_query.NetworkQuery(
                    operator = 'EQUALS', 
                    options = perian.models.query_options.QueryOptions(
                        limit = 56, 
                        offset = 56, 
                        order = null, 
                        lazy_loading = True, ), 
                    inbound_speed = null, 
                    outbound_speed = null, ),
                price = perian.models.price_query.PriceQuery(
                    operator = 'EQUALS', 
                    options = perian.models.query_options.QueryOptions(
                        limit = 56, 
                        offset = 56, 
                        order = null, 
                        lazy_loading = True, ), 
                    unit_price = null, ),
                availability = perian.models.availability_query.AvailabilityQuery(
                    operator = 'EQUALS', 
                    options = perian.models.query_options.QueryOptions(
                        limit = 56, 
                        offset = 56, 
                        order = null, 
                        lazy_loading = True, ), 
                    available = True, ),
                type = '',
                provider = perian.models.provider_query.ProviderQuery(
                    operator = 'EQUALS', 
                    options = perian.models.query_options.QueryOptions(
                        limit = 56, 
                        offset = 56, 
                        order = null, 
                        lazy_loading = True, ), 
                    id = null, 
                    name = '', 
                    name_short = '', 
                    location = '', 
                    status = '', ),
                reference_id = perian.models.reference_id_query.ReferenceIdQuery(
                    operator = 'EQUALS', 
                    options = perian.models.query_options.QueryOptions(
                        limit = 56, 
                        offset = 56, 
                        order = null, 
                        lazy_loading = True, ), 
                    id = '', )
            )
        else:
            return InstanceTypeQueryInput(
        )
        """

    def testInstanceTypeQueryInput(self):
        """Test InstanceTypeQueryInput"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
