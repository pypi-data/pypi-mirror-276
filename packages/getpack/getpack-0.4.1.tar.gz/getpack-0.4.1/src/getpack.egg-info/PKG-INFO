Metadata-Version: 2.1
Name: getpack
Version: 0.4.1
Summary: Declarative external resources with implicit deployment
Home-page: https://github.com/kalemas/getpack
Author: Konstantin Maslyuk
Author-email: Kostya.Maslyuk@gmail.com
License: UNKNOWN
Project-URL: Bug Tracker, https://github.com/kalemas/getpack/issues
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 2
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: Microsoft :: Windows :: Windows 10
Description-Content-Type: text/markdown
Provides-Extra: dev
License-File: LICENSE

### Declarative resources with implicit deployment

This package provide classes that allow to setup external resources
(utilities, python packages, executables etc.) that will be deployed as
they are used. In most cases data should be on the web and it will be
deployed and cached locally on only first usage.

There are several examples in `test/` folder and `getpack.library` module
already defined and useable. But main intention is to provide framework for
declarative setup of any resource and work with it without care of deployment.
```python
from getpack.resource import WebResource
class Example(WebResource):
    version = '0.1'
    archive_url = 'https://example.com/example-0.1.zip'
```
then it would be used:
```python
import subprocess
subprocess.call(Example()().path / 'example.exe')
```
Second round braces required to actually make an effect from resource
and first round braces used to initialize resource class, that would produce
resource descriptions on the fly like follows:
```python
Example(version='0.2', archive_url='https://Example.com/example-0.2.zip')
```
You may experiment with following working snippet and try to change `PySide2`
version:
```bash
python -c "import getpack.library;getpack.library.PySide2(version='5.14.1')(); import PySide2.QtWidgets; app=PySide2.QtWidgets.QApplication(); w=PySide2.QtWidgets.QPushButton(PySide2.__version__); w.clicked.connect(w.close); w.show(); app.exec_()"
```

### TODO

- Utilize `requirements.txt` to reproduce both development and production
  environments.

### Testings
For linux testing with Docker, run: `docker build -t test . && docker run -it --rm test pytest .`

### Environs
* `GETPACK_RETRIES` - int, number of general retries, used for renaming and
    removing temporary folders
* `GETPACK_BACKOFF` - float, delay between retires


