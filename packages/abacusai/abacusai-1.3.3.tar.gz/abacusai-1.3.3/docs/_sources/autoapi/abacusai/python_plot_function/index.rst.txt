abacusai.python_plot_function
=============================

.. py:module:: abacusai.python_plot_function


Classes
-------

.. autoapisummary::

   abacusai.python_plot_function.CodeSource
   abacusai.python_plot_function.AbstractApiClass
   abacusai.python_plot_function.PythonPlotFunction


Module Contents
---------------

.. py:class:: CodeSource(client, sourceType=None, sourceCode=None, applicationConnectorId=None, applicationConnectorInfo=None, packageRequirements=None, status=None, error=None, publishingMsg=None, moduleDependencies=None)

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`


   Code source for python-based custom feature groups and models

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param sourceType: The type of the source, one of TEXT, PYTHON, FILE_UPLOAD, or APPLICATION_CONNECTOR
   :type sourceType: str
   :param sourceCode: If the type of the source is TEXT, the raw text of the function
   :type sourceCode: str
   :param applicationConnectorId: The Application Connector to fetch the code from
   :type applicationConnectorId: str
   :param applicationConnectorInfo: Args passed to the application connector to fetch the code
   :type applicationConnectorInfo: str
   :param packageRequirements: The pip package dependencies required to run the code
   :type packageRequirements: list
   :param status: The status of the code and validations
   :type status: str
   :param error: If the status is failed, an error message describing what went wrong
   :type error: str
   :param publishingMsg: Warnings in the source code
   :type publishingMsg: dict
   :param moduleDependencies: The list of internal modules dependencies required to run the code
   :type moduleDependencies: list


   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict



   .. py:method:: import_as_cell()

      Adds the source code as an unexecuted cell in the notebook.



.. py:class:: AbstractApiClass(client, id)

   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: _get_attribute_as_dict(attribute)


.. py:class:: PythonPlotFunction(client, notebookId=None, name=None, createdAt=None, functionVariableMappings=None, functionName=None, pythonFunctionId=None, functionType=None, plotName=None, graphReferenceId=None, codeSource={})

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`


   Create a Plot for a Dashboard

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param notebookId: Unique string identifier of the notebook used to spin up the notebook upon creation.
   :type notebookId: str
   :param name: The name used to identify the algorithm. Only uppercase letters, numbers, and underscores are allowed.
   :type name: str
   :param createdAt: Date and time when the Python function was created, in ISO-8601 format.
   :type createdAt: str
   :param functionVariableMappings: The mappings for function parameters' names.
   :type functionVariableMappings: dict
   :param functionName: The name of the Python function to be used.
   :type functionName: str
   :param pythonFunctionId: Unique string identifier of the Python function.
   :type pythonFunctionId: str
   :param functionType: The type of the Python function.
   :type functionType: str
   :param plotName: Name of the plot.
   :type plotName: str
   :param graphReferenceId: Reference ID of the dashboard to the plot.
   :type graphReferenceId: str
   :param codeSource: Info about the source code of the Python function.
   :type codeSource: CodeSource


   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict



