abacusai.custom_metric_version
==============================

.. py:module:: abacusai.custom_metric_version


Classes
-------

.. autoapisummary::

   abacusai.custom_metric_version.CodeSource
   abacusai.custom_metric_version.AbstractApiClass
   abacusai.custom_metric_version.CustomMetricVersion


Module Contents
---------------

.. py:class:: CodeSource(client, sourceType=None, sourceCode=None, applicationConnectorId=None, applicationConnectorInfo=None, packageRequirements=None, status=None, error=None, publishingMsg=None, moduleDependencies=None)

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`


   Code source for python-based custom feature groups and models

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param sourceType: The type of the source, one of TEXT, PYTHON, FILE_UPLOAD, or APPLICATION_CONNECTOR
   :type sourceType: str
   :param sourceCode: If the type of the source is TEXT, the raw text of the function
   :type sourceCode: str
   :param applicationConnectorId: The Application Connector to fetch the code from
   :type applicationConnectorId: str
   :param applicationConnectorInfo: Args passed to the application connector to fetch the code
   :type applicationConnectorInfo: str
   :param packageRequirements: The pip package dependencies required to run the code
   :type packageRequirements: list
   :param status: The status of the code and validations
   :type status: str
   :param error: If the status is failed, an error message describing what went wrong
   :type error: str
   :param publishingMsg: Warnings in the source code
   :type publishingMsg: dict
   :param moduleDependencies: The list of internal modules dependencies required to run the code
   :type moduleDependencies: list


   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict



   .. py:method:: import_as_cell()

      Adds the source code as an unexecuted cell in the notebook.



.. py:class:: AbstractApiClass(client, id)

   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: _get_attribute_as_dict(attribute)


.. py:class:: CustomMetricVersion(client, customMetricVersion=None, name=None, createdAt=None, customMetricFunctionName=None, codeSource={})

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`


   Custom metric version

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param customMetricVersion: Unique string identifier for the custom metric version.
   :type customMetricVersion: str
   :param name: Name assigned to the custom metric.
   :type name: str
   :param createdAt: ISO-8601 string indicating when the custom metric was created.
   :type createdAt: str
   :param customMetricFunctionName: The name of the function defined in the source code.
   :type customMetricFunctionName: str
   :param codeSource: Information about the source code of the custom metric.
   :type codeSource: CodeSource


   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict



   .. py:method:: refresh()

      Calls describe and refreshes the current object's fields

      :returns: The current object
      :rtype: CustomMetricVersion



   .. py:method:: describe()

      Describes a given custom metric version

      :param custom_metric_version: A unique string identifier for the custom metric version.
      :type custom_metric_version: str

      :returns: An object describing the custom metric version.
      :rtype: CustomMetricVersion



