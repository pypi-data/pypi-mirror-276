abacusai.app_user_group
=======================

.. py:module:: abacusai.app_user_group


Classes
-------

.. autoapisummary::

   abacusai.app_user_group.AbstractApiClass
   abacusai.app_user_group.User
   abacusai.app_user_group.AppUserGroup


Module Contents
---------------

.. py:class:: AbstractApiClass(client, id)

   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: _get_attribute_as_dict(attribute)


.. py:class:: User(client, name=None, email=None, createdAt=None, status=None, organizationGroups={})

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`


   An Abacus.AI User

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param name: The User's name.
   :type name: str
   :param email: The User's primary email address.
   :type email: str
   :param createdAt: The date and time when the user joined Abacus.AI.
   :type createdAt: str
   :param status: `ACTIVE` when the user has accepted an invite to join the organization, else `INVITED`.
   :type status: str
   :param organizationGroups: List of Organization Groups this user belongs to.
   :type organizationGroups: OrganizationGroup


   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict



.. py:class:: AppUserGroup(client, name=None, userGroupId=None, externalApplicationIds=None, invitedUserEmails=None, publicUserGroup=None, hasExternalApplicationReporting=None, isExternalServiceGroup=None, externalServiceGroupId=None, users={})

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`


   An app user group. This is used to determine which users have permissions for external chatbots.

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param name: The name of the user group.
   :type name: str
   :param userGroupId: The unique identifier of the user group.
   :type userGroupId: str
   :param externalApplicationIds: The ids of the external applications the group has access to.
   :type externalApplicationIds: list[str]
   :param invitedUserEmails: The emails of the users invited to the user group who have not yet accepted the invite.
   :type invitedUserEmails: list[str]
   :param publicUserGroup: Boolean flag whether the app user group is the public user group of the org or not.
   :type publicUserGroup: bool
   :param hasExternalApplicationReporting: Whether users in the App User Group have permission to view all reports in their organization.
   :type hasExternalApplicationReporting: bool
   :param isExternalServiceGroup: Whether the App User Group corresponds to a user group that's defined in an external service (i.e Microsft Active Directory or Okta) or not
   :type isExternalServiceGroup: bool
   :param externalServiceGroupId: The identifier that corresponds to the app user group's external service group representation
   :type externalServiceGroupId: str
   :param users: The users in the user group.
   :type users: User


   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict



