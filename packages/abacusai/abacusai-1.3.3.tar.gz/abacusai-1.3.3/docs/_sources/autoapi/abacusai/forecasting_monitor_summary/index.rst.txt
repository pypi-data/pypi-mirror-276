abacusai.forecasting_monitor_summary
====================================

.. py:module:: abacusai.forecasting_monitor_summary


Classes
-------

.. autoapisummary::

   abacusai.forecasting_monitor_summary.FeatureDriftRecord
   abacusai.forecasting_monitor_summary.ForecastingAnalysisGraphData
   abacusai.forecasting_monitor_summary.AbstractApiClass
   abacusai.forecasting_monitor_summary.ForecastingMonitorSummary


Module Contents
---------------

.. py:class:: FeatureDriftRecord(client, name=None, distance=None, jsDistance=None, wsDistance=None, ksStatistic=None, psi=None, csi=None, chiSquare=None)

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`


   Value of each type of drift

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param name: Name of feature.
   :type name: str
   :param distance: Symmetric sum of KL divergences between the training distribution and the range of values in the specified window.
   :type distance: float
   :param jsDistance: JS divergence between the training distribution and the range of values in the specified window.
   :type jsDistance: float
   :param wsDistance: Wasserstein distance between the training distribution and the range of values in the specified window.
   :type wsDistance: float
   :param ksStatistic: Kolmogorov-Smirnov statistic computed between the training distribution and the range of values in the specified window.
   :type ksStatistic: float
   :param psi: Population stability index computed between the training distribution and the range of values in the specified window.
   :type psi: float
   :param csi: Characteristic Stability Index computed between the training distribution and the range of values in the specified window.
   :type csi: float
   :param chiSquare: Chi-square statistic computed between the training distribution and the range of values in the specified window.
   :type chiSquare: float


   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict



.. py:class:: ForecastingAnalysisGraphData(client, data=None, xAxis=None, yAxis=None, dataColumns=None, chartName=None, chartTypes=None, itemStatistics={}, chartDescriptions={})

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`


   Forecasting Analysis Graph Data representation.

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param data: List of graph data
   :type data: list
   :param xAxis: Feature that represents the x axis
   :type xAxis: str
   :param yAxis: Feature that represents the y axis
   :type yAxis: str
   :param dataColumns: Ordered name of the column for each rowwise data
   :type dataColumns: list
   :param chartName: Name of the chart represented by the data
   :type chartName: str
   :param chartTypes: Type of charts in that can exist in the current data.
   :type chartTypes: list
   :param itemStatistics: In item wise charts, gives the mean, median, count, missing_percent, p10, p90, standard_deviation, min, max
   :type itemStatistics: ItemStatistics
   :param chartDescriptions: List of descriptions of what the chart contains
   :type chartDescriptions: EdaChartDescription


   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict



.. py:class:: AbstractApiClass(client, id)

   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: _get_attribute_as_dict(attribute)


.. py:class:: ForecastingMonitorSummary(client, predictionTimestampCol=None, predictionTargetCol=None, trainingTimestampCol=None, trainingTargetCol=None, predictionItemId=None, trainingItemId=None, forecastFrequency=None, trainingTargetAcrossTime={}, predictionTargetAcrossTime={}, actualsHistogram={}, predictionsHistogram={}, trainHistoryData={}, predictHistoryData={}, targetDrift={}, historyDrift={})

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`


   Forecasting Monitor Summary of the latest version of the data.

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param predictionTimestampCol: Feature in the data that represents the timestamp column.
   :type predictionTimestampCol: str
   :param predictionTargetCol: Feature in the data that represents the target.
   :type predictionTargetCol: str
   :param trainingTimestampCol: Feature in the data that represents the timestamp column.
   :type trainingTimestampCol: str
   :param trainingTargetCol: Feature in the data that represents the target.
   :type trainingTargetCol: str
   :param predictionItemId: Feature in the data that represents the item id.
   :type predictionItemId: str
   :param trainingItemId: Feature in the data that represents the item id.
   :type trainingItemId: str
   :param forecastFrequency: Frequency of data, could be hourly, daily, weekly, monthly, quarterly or yearly.
   :type forecastFrequency: str
   :param trainingTargetAcrossTime: Data showing average, p10, p90, median sales across time
   :type trainingTargetAcrossTime: ForecastingAnalysisGraphData
   :param predictionTargetAcrossTime: Data showing average, p10, p90, median sales across time
   :type predictionTargetAcrossTime: ForecastingAnalysisGraphData
   :param actualsHistogram: Data showing actuals histogram
   :type actualsHistogram: ForecastingAnalysisGraphData
   :param predictionsHistogram: Data showing predictions histogram
   :type predictionsHistogram: ForecastingAnalysisGraphData
   :param trainHistoryData: Data showing length of history distribution
   :type trainHistoryData: ForecastingAnalysisGraphData
   :param predictHistoryData: Data showing length of history distribution
   :type predictHistoryData: ForecastingAnalysisGraphData
   :param targetDrift: Data showing drift of the target for all drift types: distance (KL divergence), js_distance, ws_distance, ks_statistic, psi, csi, chi_square
   :type targetDrift: FeatureDriftRecord
   :param historyDrift: Data showing drift of the history for all drift types: distance (KL divergence), js_distance, ws_distance, ks_statistic, psi, csi, chi_square
   :type historyDrift: FeatureDriftRecord


   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict



