abacusai.forecasting_analysis_graph_data
========================================

.. py:module:: abacusai.forecasting_analysis_graph_data


Classes
-------

.. autoapisummary::

   abacusai.forecasting_analysis_graph_data.EdaChartDescription
   abacusai.forecasting_analysis_graph_data.ItemStatistics
   abacusai.forecasting_analysis_graph_data.AbstractApiClass
   abacusai.forecasting_analysis_graph_data.ForecastingAnalysisGraphData


Module Contents
---------------

.. py:class:: EdaChartDescription(client, chartType=None, description=None)

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`


   Eda Chart Description.

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param chartType: Name of chart.
   :type chartType: str
   :param description: Description of the eda chart.
   :type description: str


   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict



.. py:class:: ItemStatistics(client, missingPercent=None, count=None, median=None, mean=None, p10=None, p90=None, stddev=None, min=None, max=None, lowerBound=None, upperBound=None)

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`


   ItemStatistics representation.

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param missingPercent: percentage of missing values in data
   :type missingPercent: float
   :param count: count of data
   :type count: int
   :param median: median of the data
   :type median: float
   :param mean: mean value of the data
   :type mean: float
   :param p10: 10th percentile of the data
   :type p10: float
   :param p90: 90th_percentile of the data
   :type p90: float
   :param stddev: standard deviation of the data
   :type stddev: float
   :param min: min value in the data
   :type min: int
   :param max: max value in the data
   :type max: int
   :param lowerBound: lower bound threshold of the data
   :type lowerBound: float
   :param upperBound: upper bound threshold of the data
   :type upperBound: float


   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict



.. py:class:: AbstractApiClass(client, id)

   .. py:method:: __eq__(other)

      Return self==value.



   .. py:method:: _get_attribute_as_dict(attribute)


.. py:class:: ForecastingAnalysisGraphData(client, data=None, xAxis=None, yAxis=None, dataColumns=None, chartName=None, chartTypes=None, itemStatistics={}, chartDescriptions={})

   Bases: :py:obj:`abacusai.return_class.AbstractApiClass`


   Forecasting Analysis Graph Data representation.

   :param client: An authenticated API Client instance
   :type client: ApiClient
   :param data: List of graph data
   :type data: list
   :param xAxis: Feature that represents the x axis
   :type xAxis: str
   :param yAxis: Feature that represents the y axis
   :type yAxis: str
   :param dataColumns: Ordered name of the column for each rowwise data
   :type dataColumns: list
   :param chartName: Name of the chart represented by the data
   :type chartName: str
   :param chartTypes: Type of charts in that can exist in the current data.
   :type chartTypes: list
   :param itemStatistics: In item wise charts, gives the mean, median, count, missing_percent, p10, p90, standard_deviation, min, max
   :type itemStatistics: ItemStatistics
   :param chartDescriptions: List of descriptions of what the chart contains
   :type chartDescriptions: EdaChartDescription


   .. py:method:: __repr__()

      Return repr(self).



   .. py:method:: to_dict()

      Get a dict representation of the parameters in this class

      :returns: The dict value representation of the class parameters
      :rtype: dict



