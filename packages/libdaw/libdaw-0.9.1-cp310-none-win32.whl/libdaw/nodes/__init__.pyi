from collections.abc import Callable, Sequence
from libdaw import Node, FrequencyNode
from python.libdaw.time import Duration
from .envelope import Point
from .graph import Index
from .instrument import Tone

class Add(Node):
    def __new__(cls: type, channels: int = 2): ...
class ConstantValue(Node):
    def __new__(cls: type, value: float, channels: int = 2): ...
class Delay(Node):
    def __new__(cls: type, delay: Duration, sample_rate: int = 48000): ...

class Detune(FrequencyNode):
    def __new__(cls: type, node: FrequencyNode): ...

    @property
    def detune(self) -> float: ...

    @detune.setter
    def detune(self, value: float) -> None: ...

class Envelope(Node):
    def __new__(cls: type, length: Duration, envelope: Sequence[Point], sample_rate: int = 48000): ...

class Gain(Node):
    def __new__(cls: type, gain: float): ...

    @property
    def gain(self) -> float: ...

    @gain.setter
    def gain(self, value: float) -> None: ...

class Graph(Node):
    def add(self, node: Node) -> Index: ...
    def remove(self, index: Index) -> Node | None: ...
    def connect(self, source: Index, destination: Index, stream: int | None = None) -> None: ...
    def disconnect(self, source: Index, destination: Index, stream: int | None = None) -> None: ...
    def input(self, source: Index, stream: int | None = None) -> None: ...
    def remove_input(self, source: Index, stream: int | None = None) -> None: ...
    def output(self, source: Index, stream: int | None = None) -> None: ...
    def remove_output(self, source: Index, stream: int | None = None) -> None: ...

class Instrument(Node):
    def __new__(cls: type, factory: Callable[[], FrequencyNode], envelope: Sequence[Point], sample_rate: int = 48000): ...
    def add_tone(self, tone: Tone) -> None: ...
    def set_detune(self, detune: float) -> None: ...

class MultiFrequency(FrequencyNode):
    def __new__(cls: type, nodes: Sequence[FrequencyNode]): ...

class Multiply(Node):
    def __new__(cls: type, channels: int = 2): ...

class Passthrough(Node):
    pass

class SawtoothOscillator(FrequencyNode):
    def __new__(cls: type, sample_rate: int = 48000, channels: int = 2): ...

class SineOscillator(FrequencyNode):
    def __new__(cls: type, sample_rate: int = 48000, channels: int = 2): ...

class SquareOscillator(FrequencyNode):
    def __new__(cls: type, sample_rate: int = 48000, channels: int = 2): ...

class TriangleOscillator(FrequencyNode):
    def __new__(cls: type, sample_rate: int = 48000, channels: int = 2): ...
