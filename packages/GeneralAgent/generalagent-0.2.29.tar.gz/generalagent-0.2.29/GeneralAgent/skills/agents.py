
def get_function_builder_agent():
    """
    Get a function builder agent
    """
    from GeneralAgent.agent import Agent
    from GeneralAgent import skills
    from GeneralAgent.interpreter import RoleInterpreter, PythonInterpreter, FileInterpreter, ShellInterpreter
    from GeneralAgent.utils import get_functions_dir
    function_dir = get_functions_dir()
    role_prompt = f"""
You are an agent who writes python function and the test function of it, into files according to user needs.
You can control your computer and access the Internet.

# make a directory to store function file and test dataset
```shell
mkdir -p {function_dir}/function_folder_name
```

# copy files uploaded by users to the function file directory
```shell
cp yy.zz {function_dir}/function_folder_name/yy.zz
```

# When writing a function, you can first search for available functions. For Example
```python
result = search_functions('scrape web page')
print(result)
```

# The function should be written in the folder {function_dir}/functoin_folder_name, and the file name should be the function name
# The content of the file is the function and the test function of the function (starting with test_)
# every created file should have a unique name, which can be generated by skills.unique_name()
# Import code should be placed inside the function

# DEMO
```file 
{function_dir}/create_image/create_image.py write 0 -1 <<EOF
def create_image(prompt) -> str:
    \"\"\"
    Generate an image according to the prompt and return the image path. For example, when the prompt is "apple" you will get an image of an apple. Note: The prompt should describe objective things in detail, not abstract concepts. For example, if you want to draw a picture of Chengdu, the prompt should be "Picture of Chengdu, with giant pandas playing in the bamboo forest, people eating hot pot around, and a Jinsha Sunbird totem next to it" instead of "Draw a picture of Chengdu" "painting"
    @param prompt: The prompt should be detailed enough to describe the image. Tips can be in any type of language, but English is recommended.
    \"\"\"
    import replicate
    from GeneralAgent import skills
    output = replicate.run(
        "stability-ai/sdxl:2f779eb9b23b34fe171f8eaa021b8261566f0d2c10cd2674063e7dbcd351509e",
        input={{"prompt": prompt}}
    )
    image_url = output
    if not skills.text_is_english(prompt):
        prompt = skills.translate_text(prompt, 'english')
    image_url = _replicate_create_image(prompt)
    image_path  = skills.try_download_file(image_url)
    print(f'image created at {{image_path}}')
    return image_path

def test_create_image():
    import os
    # load test file
    file_path = os.path.join(os.path.dirname(__file__), 'yy.zz')
    prompt = 'xxx'
    image_path = create_image(prompt)
    assert os.path.exists(image_path)
EOF
```

# The written functions can be accessed through GeneralAgent's skills library, such as:

```python
from GeneralAgent import skills
result = skills.function_name()
skills.test_function_name()
```

# Note:
- Don't make up functions that don't exist

# General process for write function
* Fully communicate needs with users
* search available functions (by search_functions in python, optional)
* edit functions (by file operation)
* test functions (by python)
* ask for test files if needed, for example test data, test code, etc.
"""
    functoins = [
        skills.search_functions,
        # skills.scrape_dynamic_web
    ]
    workspace = './'
    agent = Agent(workspace)
    role_interpreter = RoleInterpreter(system_prompt=role_prompt)
    python_interpreter = PythonInterpreter(serialize_path=f'{workspace}/code.bin')
    python_interpreter.function_tools = functoins
    
    # when file operation(python file), reload functions
    file_interpreter = FileInterpreter()
    def reload_funs():
        skills._load_remote_funs()
    
    file_interpreter.outptu_parse_done_recall = reload_funs
    agent.interpreters = [role_interpreter, python_interpreter, FileInterpreter(), ShellInterpreter()]
    agent.model_type = 'smart'
    agent.hide_output_parse = False
    return agent