# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: unacast/subscription/v1/billing_account.proto, unacast/subscription/v1/subscription.proto, unacast/subscription/v1/subscription_service.proto, unacast/subscription/v1/subscription_status.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class SubscriptionAccessKind(betterproto.Enum):
    ACCESS_UNSPECIFIED = 0
    DESCRIPTIVE = 3
    FREE = 6
    PARTIAL = 9
    UNRESTRICTED = 15


class ColumnOrder(betterproto.Enum):
    NONE = 0
    EMAIL = 1
    DATE = 2
    NAME = 4


@dataclass(eq=False, repr=False)
class SubscriptionStatus(betterproto.Message):
    subscription_id: str = betterproto.string_field(1)
    additional_subscription_ids: List[str] = betterproto.string_field(2)
    billing_account_id: str = betterproto.string_field(3)
    current_access_kind: "SubscriptionAccessKind" = betterproto.enum_field(5)
    resource_name: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class BillingAccount(betterproto.Message):
    id: str = betterproto.string_field(1)
    owner_email: str = betterproto.string_field(3)
    display_name: str = betterproto.string_field(4)
    create_time_string: str = betterproto.string_field(7)
    members: List["BillingAccountMember"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class BillingAccountMember(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    member_email: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class BillingAccountSpec(betterproto.Message):
    display_name: str = betterproto.string_field(1)
    owner_email: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class Subscription(betterproto.Message):
    id: str = betterproto.string_field(1)
    sku: str = betterproto.string_field(2)
    license_series: str = betterproto.string_field(3)
    """
    if set only one active (non-expired) subscription of this license_series is
    allowed per billing-account. will return FAILED_PRECONDITION if this is
    violated.
    """

    billing_account_id: str = betterproto.string_field(5)
    expire_time_string: str = betterproto.string_field(6)
    created_time_string: str = betterproto.string_field(7)
    replaced_by: str = betterproto.string_field(8)
    billing_account: "BillingAccount" = betterproto.message_field(10)
    resources: List["ResourceSubscription"] = betterproto.message_field(12)
    created_by: str = betterproto.string_field(13)


@dataclass(eq=False, repr=False)
class SubscriptionSpec(betterproto.Message):
    sku: str = betterproto.string_field(1)
    license_series: str = betterproto.string_field(2)
    """
    if set only one active (non-expired) subscription of this license_series is
    allowed per billing-account. will return FAILED_PRECONDITION if this is
    violated.
    """

    expire_time_string: str = betterproto.string_field(6)
    resources: List[str] = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class ResourceSubscription(betterproto.Message):
    subscription_id: str = betterproto.string_field(1)
    resource_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CreateBillingAccountRequest(betterproto.Message):
    display_name: str = betterproto.string_field(1)
    owner_email: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CreateBillingAccountResponse(betterproto.Message):
    billing_account: "BillingAccount" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetBillingAccountResponse(betterproto.Message):
    billing_account: "BillingAccount" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetBillingAccountRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DeleteBillingAccountRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class UpdateBillingAccountRequest(betterproto.Message):
    billing_account: "BillingAccount" = betterproto.message_field(1)
    update_mask: "betterproto_lib_google_protobuf.FieldMask" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class CreateSubscriptionRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    spec: "SubscriptionSpec" = betterproto.message_field(5)
    billing_account_spec: "BillingAccountSpec" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class CreateSubscriptionResponse(betterproto.Message):
    subscription: "Subscription" = betterproto.message_field(1)
    billing_account: "BillingAccount" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetSubscriptionRequest(betterproto.Message):
    subscription_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class UpdateSubscriptionRequest(betterproto.Message):
    subscription: "Subscription" = betterproto.message_field(1)
    update_mask: "betterproto_lib_google_protobuf.FieldMask" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class ReplaceSubscriptionRequest(betterproto.Message):
    subscription_id: str = betterproto.string_field(1)
    spec: "SubscriptionSpec" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ListSubscriptionsRequest(betterproto.Message):
    billing_account_filter: List[str] = betterproto.string_field(1)
    sku_filter: List[str] = betterproto.string_field(2)
    show_expired: bool = betterproto.bool_field(6)
    """
    @excludenote to future selves, these should be named "include_" not "show_"
    """

    show_replaced: bool = betterproto.bool_field(7)
    order_by: str = betterproto.string_field(12)
    """
    SQL style; e.g. "created_time_string desc, expire_time_string asc" Only one
    field can be used for sorting. Default: created_time_string desc Allowed
    columns: created_time_string, expire_time_string
    """

    page_size: int = betterproto.int32_field(14)
    page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class ListSubscriptionsResponse(betterproto.Message):
    subscriptions: List["Subscription"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class DeleteSubscriptionRequest(betterproto.Message):
    subscription_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class BulkSubscriptionStatusRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    resources: List["RequestResource"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RequestResource(betterproto.Message):
    resource_name: str = betterproto.string_field(1)
    resource_lens: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class BulkSubscriptionStatusResponse(betterproto.Message):
    resource_status: List["SubscriptionStatus"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ListBillingAccountsRequest(betterproto.Message):
    page_size: int = betterproto.int32_field(14)
    page_token: str = betterproto.string_field(15)
    limit_to_current_user: bool = betterproto.bool_field(2)
    filter_out_baccs_with_no_access_to_catalog: str = betterproto.string_field(6)
    filter_subscription_resource: List[str] = betterproto.string_field(7)
    search_value: str = betterproto.string_field(16)
    order_by: "ColumnOrder" = betterproto.enum_field(17)


@dataclass(eq=False, repr=False)
class ListBillingAccountsResponse(betterproto.Message):
    billing_accounts: List["BillingAccount"] = betterproto.message_field(1)
    next_page_token: str = betterproto.string_field(15)
    total_pages: int = betterproto.int64_field(16)


@dataclass(eq=False, repr=False)
class AddBillingAccountMemberRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    member_full_name: str = betterproto.string_field(3)
    member_email: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AddBillingAccountMemberResponse(betterproto.Message):
    member: "BillingAccountMember" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RemoveBillingAccountMemberRequest(betterproto.Message):
    billing_account_id: str = betterproto.string_field(1)
    member_email: str = betterproto.string_field(2)


class SubscriptionServiceStub(betterproto.ServiceStub):
    async def create_billing_account(
        self,
        create_billing_account_request: "CreateBillingAccountRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateBillingAccountResponse":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/CreateBillingAccount",
            create_billing_account_request,
            CreateBillingAccountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_billing_account(
        self,
        get_billing_account_request: "GetBillingAccountRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetBillingAccountResponse":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/GetBillingAccount",
            get_billing_account_request,
            GetBillingAccountResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_billing_accounts(
        self,
        list_billing_accounts_request: "ListBillingAccountsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListBillingAccountsResponse":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/ListBillingAccounts",
            list_billing_accounts_request,
            ListBillingAccountsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_billing_account_member(
        self,
        add_billing_account_member_request: "AddBillingAccountMemberRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AddBillingAccountMemberResponse":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/AddBillingAccountMember",
            add_billing_account_member_request,
            AddBillingAccountMemberResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_billing_account_member(
        self,
        remove_billing_account_member_request: "RemoveBillingAccountMemberRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/RemoveBillingAccountMember",
            remove_billing_account_member_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_billing_account(
        self,
        delete_billing_account_request: "DeleteBillingAccountRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/DeleteBillingAccount",
            delete_billing_account_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_billing_account(
        self,
        update_billing_account_request: "UpdateBillingAccountRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "BillingAccount":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/UpdateBillingAccount",
            update_billing_account_request,
            BillingAccount,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_subscription(
        self,
        create_subscription_request: "CreateSubscriptionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateSubscriptionResponse":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/CreateSubscription",
            create_subscription_request,
            CreateSubscriptionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_subscription(
        self,
        get_subscription_request: "GetSubscriptionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Subscription":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/GetSubscription",
            get_subscription_request,
            Subscription,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_subscriptions(
        self,
        list_subscriptions_request: "ListSubscriptionsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListSubscriptionsResponse":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/ListSubscriptions",
            list_subscriptions_request,
            ListSubscriptionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_subscription(
        self,
        update_subscription_request: "UpdateSubscriptionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Subscription":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/UpdateSubscription",
            update_subscription_request,
            Subscription,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def replace_subscription(
        self,
        replace_subscription_request: "ReplaceSubscriptionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Subscription":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/ReplaceSubscription",
            replace_subscription_request,
            Subscription,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_subscription(
        self,
        delete_subscription_request: "DeleteSubscriptionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "betterproto_lib_google_protobuf.Empty":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/DeleteSubscription",
            delete_subscription_request,
            betterproto_lib_google_protobuf.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def bulk_subscription_status(
        self,
        bulk_subscription_status_request: "BulkSubscriptionStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "BulkSubscriptionStatusResponse":
        return await self._unary_unary(
            "/unacast.subscription.v1.SubscriptionService/BulkSubscriptionStatus",
            bulk_subscription_status_request,
            BulkSubscriptionStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class SubscriptionServiceBase(ServiceBase):

    async def create_billing_account(
        self, create_billing_account_request: "CreateBillingAccountRequest"
    ) -> "CreateBillingAccountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_billing_account(
        self, get_billing_account_request: "GetBillingAccountRequest"
    ) -> "GetBillingAccountResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_billing_accounts(
        self, list_billing_accounts_request: "ListBillingAccountsRequest"
    ) -> "ListBillingAccountsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_billing_account_member(
        self, add_billing_account_member_request: "AddBillingAccountMemberRequest"
    ) -> "AddBillingAccountMemberResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_billing_account_member(
        self, remove_billing_account_member_request: "RemoveBillingAccountMemberRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_billing_account(
        self, delete_billing_account_request: "DeleteBillingAccountRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_billing_account(
        self, update_billing_account_request: "UpdateBillingAccountRequest"
    ) -> "BillingAccount":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_subscription(
        self, create_subscription_request: "CreateSubscriptionRequest"
    ) -> "CreateSubscriptionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_subscription(
        self, get_subscription_request: "GetSubscriptionRequest"
    ) -> "Subscription":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_subscriptions(
        self, list_subscriptions_request: "ListSubscriptionsRequest"
    ) -> "ListSubscriptionsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_subscription(
        self, update_subscription_request: "UpdateSubscriptionRequest"
    ) -> "Subscription":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def replace_subscription(
        self, replace_subscription_request: "ReplaceSubscriptionRequest"
    ) -> "Subscription":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_subscription(
        self, delete_subscription_request: "DeleteSubscriptionRequest"
    ) -> "betterproto_lib_google_protobuf.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def bulk_subscription_status(
        self, bulk_subscription_status_request: "BulkSubscriptionStatusRequest"
    ) -> "BulkSubscriptionStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_billing_account(
        self,
        stream: "grpclib.server.Stream[CreateBillingAccountRequest, CreateBillingAccountResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_billing_account(request)
        await stream.send_message(response)

    async def __rpc_get_billing_account(
        self,
        stream: "grpclib.server.Stream[GetBillingAccountRequest, GetBillingAccountResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_billing_account(request)
        await stream.send_message(response)

    async def __rpc_list_billing_accounts(
        self,
        stream: "grpclib.server.Stream[ListBillingAccountsRequest, ListBillingAccountsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_billing_accounts(request)
        await stream.send_message(response)

    async def __rpc_add_billing_account_member(
        self,
        stream: "grpclib.server.Stream[AddBillingAccountMemberRequest, AddBillingAccountMemberResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_billing_account_member(request)
        await stream.send_message(response)

    async def __rpc_remove_billing_account_member(
        self,
        stream: "grpclib.server.Stream[RemoveBillingAccountMemberRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_billing_account_member(request)
        await stream.send_message(response)

    async def __rpc_delete_billing_account(
        self,
        stream: "grpclib.server.Stream[DeleteBillingAccountRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_billing_account(request)
        await stream.send_message(response)

    async def __rpc_update_billing_account(
        self,
        stream: "grpclib.server.Stream[UpdateBillingAccountRequest, BillingAccount]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_billing_account(request)
        await stream.send_message(response)

    async def __rpc_create_subscription(
        self,
        stream: "grpclib.server.Stream[CreateSubscriptionRequest, CreateSubscriptionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_subscription(request)
        await stream.send_message(response)

    async def __rpc_get_subscription(
        self, stream: "grpclib.server.Stream[GetSubscriptionRequest, Subscription]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_subscription(request)
        await stream.send_message(response)

    async def __rpc_list_subscriptions(
        self,
        stream: "grpclib.server.Stream[ListSubscriptionsRequest, ListSubscriptionsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_subscriptions(request)
        await stream.send_message(response)

    async def __rpc_update_subscription(
        self, stream: "grpclib.server.Stream[UpdateSubscriptionRequest, Subscription]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_subscription(request)
        await stream.send_message(response)

    async def __rpc_replace_subscription(
        self, stream: "grpclib.server.Stream[ReplaceSubscriptionRequest, Subscription]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.replace_subscription(request)
        await stream.send_message(response)

    async def __rpc_delete_subscription(
        self,
        stream: "grpclib.server.Stream[DeleteSubscriptionRequest, betterproto_lib_google_protobuf.Empty]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_subscription(request)
        await stream.send_message(response)

    async def __rpc_bulk_subscription_status(
        self,
        stream: "grpclib.server.Stream[BulkSubscriptionStatusRequest, BulkSubscriptionStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.bulk_subscription_status(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/unacast.subscription.v1.SubscriptionService/CreateBillingAccount": grpclib.const.Handler(
                self.__rpc_create_billing_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateBillingAccountRequest,
                CreateBillingAccountResponse,
            ),
            "/unacast.subscription.v1.SubscriptionService/GetBillingAccount": grpclib.const.Handler(
                self.__rpc_get_billing_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetBillingAccountRequest,
                GetBillingAccountResponse,
            ),
            "/unacast.subscription.v1.SubscriptionService/ListBillingAccounts": grpclib.const.Handler(
                self.__rpc_list_billing_accounts,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListBillingAccountsRequest,
                ListBillingAccountsResponse,
            ),
            "/unacast.subscription.v1.SubscriptionService/AddBillingAccountMember": grpclib.const.Handler(
                self.__rpc_add_billing_account_member,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddBillingAccountMemberRequest,
                AddBillingAccountMemberResponse,
            ),
            "/unacast.subscription.v1.SubscriptionService/RemoveBillingAccountMember": grpclib.const.Handler(
                self.__rpc_remove_billing_account_member,
                grpclib.const.Cardinality.UNARY_UNARY,
                RemoveBillingAccountMemberRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.subscription.v1.SubscriptionService/DeleteBillingAccount": grpclib.const.Handler(
                self.__rpc_delete_billing_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteBillingAccountRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.subscription.v1.SubscriptionService/UpdateBillingAccount": grpclib.const.Handler(
                self.__rpc_update_billing_account,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateBillingAccountRequest,
                BillingAccount,
            ),
            "/unacast.subscription.v1.SubscriptionService/CreateSubscription": grpclib.const.Handler(
                self.__rpc_create_subscription,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateSubscriptionRequest,
                CreateSubscriptionResponse,
            ),
            "/unacast.subscription.v1.SubscriptionService/GetSubscription": grpclib.const.Handler(
                self.__rpc_get_subscription,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetSubscriptionRequest,
                Subscription,
            ),
            "/unacast.subscription.v1.SubscriptionService/ListSubscriptions": grpclib.const.Handler(
                self.__rpc_list_subscriptions,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListSubscriptionsRequest,
                ListSubscriptionsResponse,
            ),
            "/unacast.subscription.v1.SubscriptionService/UpdateSubscription": grpclib.const.Handler(
                self.__rpc_update_subscription,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateSubscriptionRequest,
                Subscription,
            ),
            "/unacast.subscription.v1.SubscriptionService/ReplaceSubscription": grpclib.const.Handler(
                self.__rpc_replace_subscription,
                grpclib.const.Cardinality.UNARY_UNARY,
                ReplaceSubscriptionRequest,
                Subscription,
            ),
            "/unacast.subscription.v1.SubscriptionService/DeleteSubscription": grpclib.const.Handler(
                self.__rpc_delete_subscription,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteSubscriptionRequest,
                betterproto_lib_google_protobuf.Empty,
            ),
            "/unacast.subscription.v1.SubscriptionService/BulkSubscriptionStatus": grpclib.const.Handler(
                self.__rpc_bulk_subscription_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                BulkSubscriptionStatusRequest,
                BulkSubscriptionStatusResponse,
            ),
        }
