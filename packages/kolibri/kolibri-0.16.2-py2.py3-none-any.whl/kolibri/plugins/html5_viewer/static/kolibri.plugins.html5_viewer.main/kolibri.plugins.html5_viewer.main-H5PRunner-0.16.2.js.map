{"version":3,"file":"kolibri.plugins.html5_viewer.main-H5PRunner-0.16.2.js","mappings":"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","sources":["webpack://kolibri-root/./packages/hashi/src/H5P/H5PRunner.js","webpack://kolibri-root/./packages/hashi/src/H5P/loadBinary.js"],"sourcesContent":["import get from 'lodash/get';\nimport isFunction from 'lodash/isFunction';\nimport pick from 'lodash/pick';\nimport set from 'lodash/set';\nimport debounce from 'lodash/debounce';\nimport unset from 'lodash/unset';\nimport Toposort from 'toposort-class';\nimport { unzip, strFromU8 } from 'fflate';\nimport filenameObj from '../../h5p_build.json';\nimport mimetypes from '../mimetypes.json';\nimport { XAPIVerbMap } from '../xAPI/xAPIVocabulary';\nimport loadBinary from './loadBinary';\n\nconst H5PFilename = filenameObj.filename;\n\nconst logging = console; //eslint-disable-line no-console\n\nclass Zip {\n  constructor(file) {\n    this.zipfile = file;\n  }\n\n  _getFiles(filter) {\n    return new Promise((resolve, reject) => {\n      unzip(this.zipfile, { filter }, (err, unzipped) => {\n        if (err) {\n          reject(err);\n        }\n        resolve(Object.entries(unzipped).map(([name, obj]) => ({ name, obj })));\n      });\n    });\n  }\n\n  file(filename) {\n    return this._getFiles(file => file.name === filename).then(files => files[0]);\n  }\n  files(path) {\n    return this._getFiles(file => file.name.startsWith(path));\n  }\n}\n\nconst CONTENT_ID = '1234567890';\n\n// Verbs that we simply will not report on.\nconst doNotLogVerbs = [\n  'downloaded',\n  'copied',\n  'accessed-reuse',\n  'accessed-embed',\n  'accessed-copyright',\n];\nconst doNotLogVerbMap = {};\nfor (const doNotLogVerb of doNotLogVerbs) {\n  doNotLogVerbMap[XAPIVerbMap[doNotLogVerb]] = true;\n}\n// These verbs are reported too much by H5P leading to spammy responses,\n// so we debounce logging of these responses.\nconst debounceVerbs = ['answered', 'interacted'];\n// Time in seconds to debounce by.\nconst debounceDelay = 5;\n// Max time that debounce should delay by.\nconst maxDelay = 30;\n\nconst completionVerbs = ['completed', 'mastered', 'passed'];\nconst completionVerbMap = {};\nfor (const completionVerb of completionVerbs) {\n  completionVerbMap[XAPIVerbMap[completionVerb]] = true;\n}\n\nfunction contentIdentifier(contentId) {\n  return `cid-${contentId}`;\n}\n\n/*\n * Create a blob and URL for a uint8array\n * set the mimetype and return the URL\n */\nfunction createBlobUrl(uint8array, fileName) {\n  let type = '';\n  const fileNameExt = fileName.split('.').slice(-1)[0];\n  if (fileNameExt) {\n    const ext = fileNameExt.toLowerCase();\n    type = mimetypes[ext];\n  }\n  const blob = new Blob([uint8array.buffer], { type });\n  return URL.createObjectURL(blob);\n}\n\n// Looks for any URLs referenced inside url()\nconst cssPathRegex = /(url\\(['\"]?)([^\"')]+)?(['\"]?\\))/g;\n\nexport function replacePaths(dep, packageFiles) {\n  return packageFiles[dep].replace(cssPathRegex, function(match, p1, p2, p3) {\n    try {\n      // Construct a URL with a dummy base so that we can concatenate the\n      // dependency URL with the URL relative to the dependency\n      // and then read the pathname to get the new path.\n      // Take substring to remove the leading slash to match the reference file paths\n      // in packageFiles.\n      const path = new URL(p2, new URL(dep, 'http://b.b/')).pathname.substring(1);\n      // Look to see if there is a URL in our packageFiles mapping that\n      // that has this as the source path.\n      const newUrl = packageFiles[path];\n      if (newUrl) {\n        // If so, replace the instance with the new URL.\n        return `${p1}${newUrl}${p3}`;\n      }\n    } catch (e) {\n      logging.debug('Error during URL handling', e);\n    }\n    // Otherwise just return the match so that it is unchanged.\n    return match;\n  });\n}\n\nconst metadataKeys = [\n  'title',\n  'a11yTitle',\n  'authors',\n  'changes',\n  'source',\n  'license',\n  'licenseVersion',\n  'licenseExtras',\n  'authorComments',\n  'yearFrom',\n  'yearTo',\n  'defaultLanguage',\n];\n\n/*\n * Class that manages loading, parsing, and running an H5P file.\n * Loads the entire H5P file to the frontend, and then unzips, parses,\n * and turns each file into a Blob and generates a URL for that blob.\n * (this is the same mechanism that EpubJS uses to render Epubs in the frontend).\n * We mirror the path substitution done in the PHP implementation for\n * CSS concatenation, to ensure that all relatively referenced assets\n * in CSS files are instead referenced by their new Blob URLs.\n * For the user defined contents referenced in the H5P content/content.json\n * we shim the H5P.getPath method to do a lookup into our own\n * internal file lookup so we can return the Blob URLs.\n * We also shim the H5P ContentType class to override the getLibraryFilePath\n * which allows us to return our blob URLs for files inside the content widget library folders.\n * Lastly, the getLibraryPath method of the H5P object is overridden to return\n * a reference to the zipcontent endpoint, to allow files to be dynamically loaded\n * as a fallback.\n */\nexport default class H5PRunner {\n  constructor(shim) {\n    this.shim = shim;\n    this.data = shim.data;\n    this.scriptLoader = this.scriptLoader.bind(this);\n  }\n\n  init(iframe, filepath, loaded, errored) {\n    // An array of the H5P package dependencies for this library\n    // This is not a sorted list, but the result of recursing through\n    this.dependencies = [];\n    // For each H5P package an array of the Javascript files needed\n    this.jsDependencies = {};\n    // For each H5P package an array of the CSS files needed\n    this.cssDependencies = {};\n    // For each H5P package, an object that maps the original file\n    // reference in the H5P file to a blob URL reference, except for\n    // CSS files which will contain the raw string contents\n    // of the file so we can do some extra processing on them\n    this.packageFiles = {};\n    // An object that maps from a path in the `content` folder of the\n    // H5P package to a blob URL reference for that content item\n    // we can then use this to return blob URLs when H5P packages request\n    // specific content - without having to do a bunch of extra rewriting of\n    // URLs.\n    this.contentPaths = {};\n    // The JSON representation of `content/content.json` in the H5P file\n    // this is a deeply nested JSON object that contains path references\n    // for all the non-package creator added content that is part of this\n    // H5P file. We could in theory have done URL replacement in this, but\n    // monkey patching the H5P APIs that do this seemed safer.\n    this.contentJson = '';\n    // The entry point package for this H5P file - the 'top level' library.\n    this.library = null;\n    // Maps of JS paths and CSS paths to quickly check if a JS or CSS file is loaded\n    // we could store this as an array, but this lets us potentially monkey\n    // patch H5P in the future for more efficient look ups.\n    this.loadedJs = {};\n    this.loadedCss = {};\n    // The iframe that we should be loading H5P in - this is probably not the\n    // same as the current window context that the H5P constructor has been\n    // invoked in.\n    this.iframe = iframe;\n    // Relative URL to H5P - ideal to keep this simple by convention\n    // this will avoid having to pass in extra initialization info into\n    // hashi.\n    this.iframe.src = `../h5p/${H5PFilename}`;\n    // This is the path to the H5P file which we load in its entirety.\n    this.filepath = filepath;\n    // A fallback URL to the zipcontent endpoint for this H5P file\n    this.zipcontentUrl = new URL(\n      `../../zipcontent/${this.filepath.substring(this.filepath.lastIndexOf('/') + 1)}`,\n      window.location\n    ).href;\n    // Callback to call when H5P has finished loading\n    this.loaded = loaded;\n    // Callback to call when H5P errors\n    this.errored = errored;\n    // Set this to a dummy value - we use this for generating the H5P ids,\n    // and for logging xAPI statements about the content.\n    this.contentNamespace = CONTENT_ID;\n    const start = performance.now();\n    // First load the full H5P file as binary so we can read it using JSZip\n    loadBinary(this.filepath)\n      .then(file => {\n        // Store the zip locally for later reference\n        this.zip = new Zip(file);\n        // Recurse all the package dependencies\n        return this.recurseDependencies('h5p.json', true);\n      })\n      .then(() => {\n        // Once we have found all the dependencies, we call this\n        // to sort the dependencies by their dependencies to make an\n        // ordered list, with every package being loaded only once its\n        // dependencies have been loaded.\n        this.setDependencies();\n        return this.processFiles().then(() => {\n          logging.debug(`H5P file processed in ${performance.now() - start} ms`);\n          this.metadata = pick(this.rootConfig, metadataKeys);\n          // Do any URL substitition on CSS dependencies\n          // and turn them into Blob URLs.\n          // Also order the dendencies according to our sorted\n          // dependency tree.\n          this.processCssDependencies();\n          this.processJsDependencies();\n          // If the iframe has already loaded, start H5P\n          // Sometimes this check can catch the iframe before it has started\n          // to load H5P, when it is still blank, but loaded.\n          // So we also check that H5P is defined on the contentWindow to be sure\n          // that the ready state applies to the loading of the H5P html file.\n          if (\n            this.iframe.contentDocument &&\n            this.iframe.contentDocument.readyState === 'complete' &&\n            this.iframe.contentWindow.H5P\n          ) {\n            return this.initH5P();\n          }\n          // Otherwise wait for the load event.\n          this.iframe.addEventListener('load', () => this.initH5P());\n        });\n      });\n  }\n\n  stateUpdated() {\n    this.shim.stateUpdated();\n  }\n\n  /*\n   * Shim H5P, load dependencies, and then start H5P in the contentWindow.\n   */\n  initH5P() {\n    this.shimH5P(this.iframe.contentWindow);\n    return this.scriptLoader(this.cssURL, true).then(() => {\n      return this.scriptLoader(this.javascriptURL).then(() => {\n        try {\n          // Start H5P\n          // In spite of our best effors, we can't guarantee that the H5P\n          // library will run properly - at least one of the libraries\n          // e.g. Find The Words, is not compatible with IE11, and so causes\n          // errors when attempting to render.\n          // We catch the error and report it to the user to avoid confusion and\n          // allow the to report to us.\n          this.iframe.contentWindow.H5P.init();\n          this.loaded();\n          setTimeout(() => {\n            for (const instance of this.iframe.contentWindow.H5P.instances) {\n              this.iframe.contentWindow.H5P.trigger(instance, 'resize');\n            }\n          }, 0);\n        } catch (e) {\n          this.errored(e);\n        }\n      });\n    });\n  }\n\n  /*\n   * Monkey patch the main H5P object to make it behave in a way that works for us\n   * By the time this is called, H5P should already be instantiated in the iframe window.\n   */\n  shimH5P(contentWindow) {\n    // First setup a div for our content, for H5P to pick up and populate.\n    const div = contentWindow.document.createElement('div');\n    div.classList.add('h5p-content');\n    div.setAttribute('data-content-id', this.contentNamespace);\n    contentWindow.document.body.appendChild(div);\n    // Set up the `getPath` method so that we can resolve any paths\n    // with our mapped contentPaths object which will map content files\n    // from the H5P file to the blob URLs we have created for them.\n    const H5P = contentWindow.H5P;\n    const originalGetPath = H5P.getPath;\n    const self = this;\n    H5P.getPath = function(path, contentId) {\n      // Handle files that have a #tmp suffix\n      // these are meant to only be used during editing,\n      // but it seems possible for these to be exported by H5P editors\n      if (path.substr(-4, 4) === '#tmp') {\n        path = path.substr(0, path.length - 4);\n      }\n      if (self.contentPaths[path]) {\n        return self.contentPaths[path];\n      }\n      return originalGetPath(path, contentId);\n    };\n    H5P.getContentPath = function() {\n      return self.zipcontentUrl + '/content';\n    };\n    // Shim the user data handling functions so that we return data from our\n    // internal data storage for the H5P component.\n    H5P.getUserData = function(contentId, dataId, done, subContentId = 0) {\n      const data = get(self.data, [subContentId, dataId]);\n      if (data === 'RESET') {\n        return done(undefined, null);\n      }\n      return done(undefined, data);\n    };\n    // Store data from H5P into our own internal data storage\n    H5P.setUserData = function(\n      contentId,\n      dataId,\n      data,\n      { subContentId = 0, errorCallback = null } = {}\n    ) {\n      try {\n        data = JSON.stringify(data);\n      } catch (err) {\n        if (isFunction(errorCallback)) {\n          errorCallback(err);\n        }\n        return; // Failed to serialize.\n      }\n      set(self.data, [subContentId, dataId], data);\n      self.stateUpdated();\n    };\n    // Delete data from H5P in our internal data storage.\n    H5P.deleteUserData = function(contentId, dataId, subContentId = 0) {\n      unset(self.data, [subContentId, dataId]);\n      self.stateUpdated();\n    };\n    // Monkey patch the H5P ContentType constructor factory\n    // This function is not a constructor, but rather a factory\n    // that makes constructor functions.\n    // Here we call the original, and then update the prototype\n    // of the produced constructor to allow us to manipulate\n    // the `getLibraryFilePath` function.\n    // In most cases, this should already have been substituted\n    // for our blob URLs - if not, this needs to be updated to do\n    // a lookup inside our currently parsed packages for the URL.\n    const originalContentType = H5P.ContentType;\n    H5P.ContentType = function(isRoot) {\n      const ct = originalContentType(isRoot);\n      ct.prototype.getLibraryFilePath = function(filePath) {\n        const url = self.packageFiles[this.libraryInfo.versionedNameNoSpaces + '/'][filePath];\n        // Some H5P libraries use this with a blank filePath argument to get a file path they can\n        // append to for retrieving files - which is monumentally stupid, but what can you do?\n        // In this case, the URL will be undefined, so we should return the URL path for the\n        // zipcontent endpoint so they can get their files.\n        if (url) {\n          return url;\n        }\n        // Build the URL path to access files inside this specific library\n        return self.zipcontentUrl + '/' + this.libraryInfo.versionedNameNoSpaces + '/';\n      };\n      return ct;\n    };\n    // Monkey patch setActor to allow us to inject our own\n    // XAPI actor definition\n    H5P.XAPIEvent.prototype.setActor = function() {\n      if (contentWindow.xAPI) {\n        contentWindow.xAPI.prepareStatement(this.data.statement);\n      }\n    };\n    const debouncedHandlers = {};\n    for (const debouncedVerb of debounceVerbs) {\n      const verb = XAPIVerbMap[debouncedVerb];\n      debouncedHandlers[verb] = debounce(\n        function(statement) {\n          contentWindow.xAPI.sendStatement(statement, true).catch(err => {\n            logging.error('Statement: ', statement, 'gave the following error: ', err);\n          });\n        },\n        debounceDelay * 1000,\n        // Invoke on the leading as well as the trailing edge\n        // so that we alert immediately on an event.\n        { leading: true, maxWait: maxDelay * 1000 }\n      );\n    }\n    // Add event listener to allow us to capture xAPI events\n    H5P.externalDispatcher.on('xAPI', function(event) {\n      if (contentWindow.xAPI) {\n        const statement = event.data.statement;\n        if (\n          statement.object &&\n          statement.object.id.startsWith(self.H5PContentIdentifier) &&\n          statement.object.id !== self.H5PContentIdentifier &&\n          statement.verb &&\n          completionVerbMap[statement.verb.id]\n        ) {\n          // Catch any statements that might imply completion but are actually only for subcontent.\n          // H5P sends these events for subcontents, even though it is against the CMI5 spec.\n          // Swap them out for the progressed verb to indicate progression without completion.\n          statement.verb.id = XAPIVerbMap.progressed;\n        }\n        if (doNotLogVerbMap[statement.verb.id]) {\n          return;\n        } else if (debouncedHandlers[statement.verb.id]) {\n          debouncedHandlers[statement.verb.id](statement);\n        } else {\n          contentWindow.xAPI.sendStatement(event.data.statement, true).catch(err => {\n            logging.error('Statement: ', statement, 'gave the following error: ', err);\n          });\n        }\n      }\n    });\n  }\n\n  get H5PContentIdentifier() {\n    return (\n      (this.rootConfig && this.rootConfig.source) ||\n      `http://kolibri.to/content/${this.contentNamespace}`\n    );\n  }\n\n  /*\n   * This will setup the H5PIntegration property that H5P then uses\n   * to configure itself.\n   */\n  shimH5PIntegration(contentWindow) {\n    const self = this;\n    this.integrationShim = {\n      get contents() {\n        return {\n          [contentIdentifier(self.contentNamespace)]: {\n            library: self.library,\n            jsonContent: self.contentJson,\n            fullScreen: false,\n            displayOptions: {\n              copyright: false,\n              download: false,\n              embed: false,\n              export: false,\n              frame: false,\n              icon: false,\n            },\n            contentUserData: self.data,\n            exportUrl: '',\n            embedCode: '',\n            resizeCode: '',\n            mainId: self.contentNamespace,\n            url: self.H5PContentIdentifier,\n            title: self.rootConfig.title,\n            styles: Object.keys(self.loadedCss),\n            scripts: Object.keys(self.loadedJs),\n            metadata: self.metadata,\n          },\n        };\n      },\n      l10n: {\n        H5P: {},\n      },\n      get loadedJs() {\n        return Object.keys(self.loadedJs);\n      },\n      get loadedCss() {\n        return Object.keys(self.loadedCss);\n      },\n      get user() {\n        return {\n          name: self.userData.userFullName,\n          mail: '',\n        };\n      },\n      // Set this library path so that we can return the zipcontent\n      // endpoint URL for this H5P file, so that it just looks up\n      // libraries inside the current H5P.\n      get urlLibraries() {\n        return self.zipcontentUrl;\n      },\n    };\n    Object.defineProperty(contentWindow, 'H5PIntegration', {\n      value: this.integrationShim,\n      configurable: true,\n    });\n  }\n\n  /**\n   * Loads a Javascript file and executes it.\n   * @param  {String} url URL for the script\n   * @return {Promise}     Promise that resolves when the script has loaded\n   */\n  scriptLoader(url, css = false) {\n    const iframeDocument = this.iframe.contentWindow.document;\n    return new Promise((resolve, reject) => {\n      let script;\n      if (!css) {\n        script = iframeDocument.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n        script.async = true;\n        script.addEventListener('load', () => resolve(script));\n        script.addEventListener('error', reject);\n      } else {\n        script = iframeDocument.createElement('link');\n        script.rel = 'stylesheet';\n        script.type = 'text/css';\n        script.href = url;\n        // Can't detect loading for css, so just assume it worked.\n        resolve(script);\n      }\n      iframeDocument.body.appendChild(script);\n    });\n  }\n\n  /*\n   * Use the Toposort library to sort all our dependencies into an order\n   * that will resolve interdependencies as well as possible.\n   */\n  setDependencies() {\n    const dependencySorter = new Toposort();\n\n    for (const dependency of this.dependencies) {\n      this.packageFiles[dependency.packagePath] = {};\n      dependencySorter.add(dependency.packagePath, dependency.dependencies);\n\n      this.cssDependencies[dependency.packagePath] = dependency.preloadedCss;\n\n      this.jsDependencies[dependency.packagePath] = dependency.preloadedJs;\n    }\n\n    this.sortedDependencies = dependencySorter.sort().reverse();\n  }\n\n  /*\n   * A function to recurse through all dependencies listed in a library or package\n   * definition. For the root library definition, this also sets the global rootConfig\n   * JSON that defines some global details about this H5P file.\n   * visitedPaths allow us to quickly check that we haven't already recursed this dependency\n   * which will stop us from getting into a circular dependency hell.\n   */\n  recurseDependencies(jsonFile, root, visitedPaths = {}, packagePath = '') {\n    return this.zip.file(jsonFile).then(file => {\n      if (!file) {\n        return;\n      }\n      const json = JSON.parse(strFromU8(file.obj));\n      const preloadedDependencies = json['preloadedDependencies'] || [];\n      // Make a copy so that we are not modifying the same object\n      visitedPaths = {\n        ...visitedPaths,\n      };\n      // If root, then this JSON is the rootConfig.\n      if (root) {\n        this.rootConfig = json;\n      }\n      return Promise.all(\n        preloadedDependencies.map(dep => {\n          const depPackagePath = `${dep.machineName}-${dep.majorVersion}.${dep.minorVersion}/`;\n          // If root, then this is the root config, and so this descriptor is the main library\n          // descriptor for this H5P file.\n          if (root && !this.library && dep.machineName === json.mainLibrary) {\n            this.library = `${dep.machineName} ${dep.majorVersion}.${dep.minorVersion}`;\n          }\n          if (visitedPaths[depPackagePath]) {\n            // If we have visited this dependency before\n            // then we are in a cyclic dependency graph\n            // so stop!\n            return Promise.resolve(depPackagePath);\n          }\n          // Add this to our visited paths so that future recursive calls know a cyclic\n          // dependency when they see one!\n          visitedPaths[depPackagePath] = true;\n          // Now recurse the dependencies of each of the dependencies!\n          return this.recurseDependencies(\n            depPackagePath + 'library.json',\n            false,\n            visitedPaths,\n            depPackagePath\n          ).then(() => depPackagePath);\n        })\n      ).then(dependencies => {\n        if (packagePath) {\n          // If this specification is a package (i.e. not the root)\n          // then get all of the preloadedJs and preloadedCss that this\n          // package needs and summarize it in an object in our dependencies\n          // list.\n          const preloadedJs = (json['preloadedJs'] || []).map(js => js.path);\n          const preloadedCss = (json['preloadedCss'] || []).map(css => css.path);\n          this.dependencies.push({\n            packagePath,\n            dependencies,\n            preloadedCss,\n            preloadedJs,\n          });\n        }\n      });\n    });\n  }\n\n  /*\n   * We process JS dependencies after we've done preprocessing of\n   * our other files, to set our jsDependencies according to our sorted\n   * dependency order.\n   */\n  processJsDependencies() {\n    const concatenatedJS = this.sortedDependencies.reduce((wholeJS, dependency) => {\n      return (this.jsDependencies[dependency] || []).reduce((allJs, jsDep) => {\n        return `${allJs}${this.packageFiles[dependency][jsDep]}\\n\\n`;\n      }, wholeJS);\n    }, '');\n    this.javascriptURL = URL.createObjectURL(\n      new Blob([concatenatedJS], { type: 'text/javascript' })\n    );\n  }\n\n  /*\n   * We process CSS dependencies after we've done preprocessing of\n   * our other files, to make sure we have already created blob URLs for them\n   * and then substitute those referenced paths for the blob URLs\n   */\n  processCssDependencies() {\n    const concatenatedCSS = this.sortedDependencies.reduce((wholeCSS, dependency) => {\n      return (this.cssDependencies[dependency] || []).reduce((allCss, cssDep) => {\n        const css = replacePaths(cssDep, this.packageFiles[dependency]);\n        // We have completed the path substition, so concatenate the CSS.\n        return `${allCss}${css}\\n\\n`;\n      }, wholeCSS);\n    }, '');\n    this.cssURL = URL.createObjectURL(new Blob([concatenatedCSS], { type: 'text/css' }));\n  }\n\n  /*\n   * Process files in the content folder and store a reference\n   * from their path without `content/` prefixed to the blob URL we\n   * are creating for them.\n   */\n  processContent(file) {\n    const fileName = file.name.replace('content/', '');\n    if (fileName === 'content.json') {\n      // Store this special file contents here as raw text\n      // as that is how H5P expects it.\n      this.contentJson = strFromU8(file.obj);\n    } else {\n      // Create blob urls for every item in the content folder\n      this.contentPaths[fileName] = createBlobUrl(file.obj, fileName);\n    }\n  }\n\n  /*\n   * Do extraction and processing of a specific file in a package\n   */\n  processPackageFile(file, packagePath) {\n    const fileName = file.name.replace(packagePath, '');\n    // Do special processing of js and css files for this package\n    // For both, track the file names to generate `loadedJS` and `loadedCSS`\n    // for H5P.\n    const jsFile = this.jsDependencies[packagePath].indexOf(fileName) > -1;\n    const cssFile = this.cssDependencies[packagePath].indexOf(fileName) > -1;\n    if (cssFile || jsFile) {\n      // For CSS, this allows us to do URL replacement. Possible we could do this for\n      // JS files as well, but the H5P PHP implementation does not do anything for them.\n      // Flag in our appropriate maps that these files will be preloaded.\n      // For both we will concatenate all the assets before turning into a blob\n      // URL, because some H5P packages depend on setTimeout delays to call dependencies that\n      // load after them in the same package - using chained script loading, this breaks,\n      // because the Promise allows the main thread to be released, and the setTimeout to jump in.\n      if (jsFile) {\n        this.loadedJs[file.name] = true;\n      } else {\n        this.loadedCss[file.name] = true;\n      }\n      // If it's a CSS file load as a string from the zipfile for later\n      // replacement of URLs.\n      // For JS or CSS, we load as string to concatenate and later turn into a single file.\n      this.packageFiles[packagePath][fileName] = strFromU8(file.obj);\n    } else {\n      // Otherwise just create a blob URL for this file and store it in our packageFiles maps.\n      this.packageFiles[packagePath][fileName] = createBlobUrl(file.obj, fileName);\n    }\n  }\n\n  /*\n   * Process all files in the zip, content files and files in the packages\n   */\n  processFiles() {\n    return Promise.all([\n      this.zip.files('content/').then(contentFiles => {\n        contentFiles.map(file => this.processContent(file));\n      }),\n      ...Object.keys(this.packageFiles).map(packagePath => {\n        // JSZip uses regex for path matching, so we first do regex escaping on the packagePath\n        // in order to get an exact match, and not accidentally do a regex match based on the path\n        return this.zip.files(packagePath).then(packageFiles => {\n          packageFiles.map(file => this.processPackageFile(file, packagePath));\n        });\n      }),\n    ]);\n  }\n}\n","/*\n * Vendored from https://github.com/Stuk/jszip-utils/blob/master/lib/index.js\n */\n\n/**\n * @param  {string} path    The path to the resource to GET.\n * @return {Promise}\n */\nexport default function(path) {\n  return new Promise((resolve, reject) => {\n    try {\n      const xhr = new window.XMLHttpRequest();\n\n      xhr.open('GET', path, true);\n\n      xhr.responseType = 'arraybuffer';\n\n      xhr.onreadystatechange = function() {\n        // use `xhr` and not `this`... thanks IE\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200 || xhr.status === 0) {\n            try {\n              resolve(new Uint8Array(xhr.response));\n            } catch (err) {\n              reject(new Error(err));\n            }\n          } else {\n            reject(new Error('Ajax error for ' + path + ' : ' + xhr.status + ' ' + xhr.statusText));\n          }\n        }\n      };\n      xhr.send();\n    } catch (e) {\n      reject(new Error(e), null);\n    }\n  });\n}\n"],"names":["H5PFilename","filenameObj","logging","console","Zip","file","_classCallCheck","this","zipfile","_createClass","key","value","filter","_this","Promise","resolve","reject","unzip","err","unzipped","Object","entries","map","_ref","_ref2","_slicedToArray","name","obj","filename","_getFiles","then","files","path","startsWith","doNotLogVerbMap","_i","_doNotLogVerbs","length","doNotLogVerb","XAPIVerbMap","debounceVerbs","completionVerbMap","_i2","_completionVerbs","completionVerb","createBlobUrl","uint8array","fileName","type","fileNameExt","split","slice","ext","toLowerCase","mimetypes","blob","Blob","buffer","URL","createObjectURL","cssPathRegex","replacePaths","dep","packageFiles","replace","match","p1","p2","p3","pathname","substring","newUrl","concat","e","debug","metadataKeys","H5PRunner","shim","data","scriptLoader","bind","iframe","filepath","loaded","errored","_this2","dependencies","jsDependencies","cssDependencies","contentPaths","contentJson","library","loadedJs","loadedCss","src","zipcontentUrl","lastIndexOf","window","location","href","contentNamespace","start","performance","now","xhr","XMLHttpRequest","open","responseType","onreadystatechange","readyState","status","Uint8Array","response","Error","statusText","send","zip","recurseDependencies","setDependencies","processFiles","metadata","pick","rootConfig","processCssDependencies","processJsDependencies","contentDocument","contentWindow","H5P","initH5P","addEventListener","stateUpdated","_this3","shimH5P","cssURL","javascriptURL","init","setTimeout","_step","_iterator","_createForOfIteratorHelper","instances","s","n","done","instance","trigger","f","div","document","createElement","classList","add","setAttribute","body","appendChild","originalGetPath","getPath","self","contentId","substr","getContentPath","getUserData","dataId","subContentId","arguments","undefined","get","setUserData","_ref3","_ref3$subContentId","_ref3$errorCallback","errorCallback","JSON","stringify","isFunction","set","deleteUserData","unset","originalContentType","ContentType","isRoot","ct","prototype","getLibraryFilePath","filePath","url","libraryInfo","versionedNameNoSpaces","XAPIEvent","setActor","xAPI","prepareStatement","statement","debouncedHandlers","_i3","_debounceVerbs","debouncedVerb","verb","debounce","sendStatement","catch","error","debounceDelay","leading","maxWait","maxDelay","externalDispatcher","on","event","object","id","H5PContentIdentifier","progressed","source","integrationShim","contents","_defineProperty","jsonContent","fullScreen","displayOptions","copyright","download","embed","export","frame","icon","contentUserData","exportUrl","embedCode","resizeCode","mainId","title","styles","keys","scripts","l10n","user","userData","userFullName","mail","urlLibraries","defineProperty","configurable","css","iframeDocument","script","rel","async","_step2","dependencySorter","Toposort","_iterator2","dependency","packagePath","preloadedCss","preloadedJs","sortedDependencies","sort","reverse","jsonFile","root","_this4","visitedPaths","json","parse","strFromU8","preloadedDependencies","_objectSpread","all","depPackagePath","machineName","majorVersion","minorVersion","mainLibrary","js","push","_this5","concatenatedJS","reduce","wholeJS","allJs","jsDep","_this6","concatenatedCSS","wholeCSS","allCss","cssDep","jsFile","indexOf","_this7","contentFiles","processContent","_toConsumableArray","processPackageFile"],"sourceRoot":""}