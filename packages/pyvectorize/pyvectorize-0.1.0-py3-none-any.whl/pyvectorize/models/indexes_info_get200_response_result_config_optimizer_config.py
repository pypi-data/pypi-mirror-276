# coding: utf-8

"""
    vectorize.sh API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class IndexesInfoGet200ResponseResultConfigOptimizerConfig(BaseModel):
    """
    IndexesInfoGet200ResponseResultConfigOptimizerConfig
    """ # noqa: E501
    default_segment_number: Union[StrictFloat, StrictInt]
    deleted_threshold: Union[StrictFloat, StrictInt]
    flush_interval_sec: Union[StrictFloat, StrictInt]
    indexing_threshold: Union[StrictFloat, StrictInt]
    max_optimization_threads: Optional[Any] = None
    max_segment_size: Optional[Any] = None
    memmap_threshold: Optional[Any] = None
    vacuum_min_vector_number: Union[StrictFloat, StrictInt]
    __properties: ClassVar[List[str]] = ["default_segment_number", "deleted_threshold", "flush_interval_sec", "indexing_threshold", "max_optimization_threads", "max_segment_size", "memmap_threshold", "vacuum_min_vector_number"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IndexesInfoGet200ResponseResultConfigOptimizerConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if max_optimization_threads (nullable) is None
        # and model_fields_set contains the field
        if self.max_optimization_threads is None and "max_optimization_threads" in self.model_fields_set:
            _dict['max_optimization_threads'] = None

        # set to None if max_segment_size (nullable) is None
        # and model_fields_set contains the field
        if self.max_segment_size is None and "max_segment_size" in self.model_fields_set:
            _dict['max_segment_size'] = None

        # set to None if memmap_threshold (nullable) is None
        # and model_fields_set contains the field
        if self.memmap_threshold is None and "memmap_threshold" in self.model_fields_set:
            _dict['memmap_threshold'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IndexesInfoGet200ResponseResultConfigOptimizerConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "default_segment_number": obj.get("default_segment_number"),
            "deleted_threshold": obj.get("deleted_threshold"),
            "flush_interval_sec": obj.get("flush_interval_sec"),
            "indexing_threshold": obj.get("indexing_threshold"),
            "max_optimization_threads": obj.get("max_optimization_threads"),
            "max_segment_size": obj.get("max_segment_size"),
            "memmap_threshold": obj.get("memmap_threshold"),
            "vacuum_min_vector_number": obj.get("vacuum_min_vector_number")
        })
        return _obj


