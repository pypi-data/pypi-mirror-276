# coding: utf-8

"""
    vectorize.sh API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class IndexesInfoGet200ResponseResultConfigParams(BaseModel):
    """
    IndexesInfoGet200ResponseResultConfigParams
    """ # noqa: E501
    on_disk_payload: StrictBool
    read_fan_out_factor: Optional[Any] = None
    replication_factor: Union[StrictFloat, StrictInt]
    shard_number: Union[StrictFloat, StrictInt]
    sharding_method: Optional[Any] = None
    sparse_vectors: Optional[Any] = None
    vectors: Dict[str, Any]
    write_consistency_factor: Union[StrictFloat, StrictInt]
    __properties: ClassVar[List[str]] = ["on_disk_payload", "read_fan_out_factor", "replication_factor", "shard_number", "sharding_method", "sparse_vectors", "vectors", "write_consistency_factor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IndexesInfoGet200ResponseResultConfigParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if read_fan_out_factor (nullable) is None
        # and model_fields_set contains the field
        if self.read_fan_out_factor is None and "read_fan_out_factor" in self.model_fields_set:
            _dict['read_fan_out_factor'] = None

        # set to None if sharding_method (nullable) is None
        # and model_fields_set contains the field
        if self.sharding_method is None and "sharding_method" in self.model_fields_set:
            _dict['sharding_method'] = None

        # set to None if sparse_vectors (nullable) is None
        # and model_fields_set contains the field
        if self.sparse_vectors is None and "sparse_vectors" in self.model_fields_set:
            _dict['sparse_vectors'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IndexesInfoGet200ResponseResultConfigParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "on_disk_payload": obj.get("on_disk_payload"),
            "read_fan_out_factor": obj.get("read_fan_out_factor"),
            "replication_factor": obj.get("replication_factor"),
            "shard_number": obj.get("shard_number"),
            "sharding_method": obj.get("sharding_method"),
            "sparse_vectors": obj.get("sparse_vectors"),
            "vectors": obj.get("vectors"),
            "write_consistency_factor": obj.get("write_consistency_factor")
        })
        return _obj


