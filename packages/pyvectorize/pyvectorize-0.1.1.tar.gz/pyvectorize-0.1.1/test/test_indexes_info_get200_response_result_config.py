# coding: utf-8

"""
    vectorize.sh API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pyvectorize.models.indexes_info_get200_response_result_config import IndexesInfoGet200ResponseResultConfig

class TestIndexesInfoGet200ResponseResultConfig(unittest.TestCase):
    """IndexesInfoGet200ResponseResultConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IndexesInfoGet200ResponseResultConfig:
        """Test IndexesInfoGet200ResponseResultConfig
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IndexesInfoGet200ResponseResultConfig`
        """
        model = IndexesInfoGet200ResponseResultConfig()
        if include_optional:
            return IndexesInfoGet200ResponseResultConfig(
                hnsw_config = pyvectorize.models._indexes_info_get_200_response_result_config_hnsw_config._indexes_info_get_200_response_result_config_hnsw_config(
                    ef_construct = 1.337, 
                    full_scan_threshold = 1.337, 
                    m = 1.337, 
                    max_indexing_threads = 1.337, 
                    on_disk = True, 
                    payload_m = null, ),
                optimizer_config = pyvectorize.models._indexes_info_get_200_response_result_config_optimizer_config._indexes_info_get_200_response_result_config_optimizer_config(
                    default_segment_number = 1.337, 
                    deleted_threshold = 1.337, 
                    flush_interval_sec = 1.337, 
                    indexing_threshold = 1.337, 
                    max_optimization_threads = null, 
                    max_segment_size = null, 
                    memmap_threshold = null, 
                    vacuum_min_vector_number = 1.337, ),
                params = pyvectorize.models._indexes_info_get_200_response_result_config_params._indexes_info_get_200_response_result_config_params(
                    on_disk_payload = True, 
                    read_fan_out_factor = null, 
                    replication_factor = 1.337, 
                    shard_number = 1.337, 
                    sharding_method = null, 
                    sparse_vectors = null, 
                    vectors = pyvectorize.models.vectors.vectors(), 
                    write_consistency_factor = 1.337, ),
                quantization_config = None,
                wal_config = pyvectorize.models._indexes_info_get_200_response_result_config_wal_config._indexes_info_get_200_response_result_config_wal_config(
                    wal_capacity_mb = 1.337, 
                    wal_segments_ahead = 1.337, )
            )
        else:
            return IndexesInfoGet200ResponseResultConfig(
                hnsw_config = pyvectorize.models._indexes_info_get_200_response_result_config_hnsw_config._indexes_info_get_200_response_result_config_hnsw_config(
                    ef_construct = 1.337, 
                    full_scan_threshold = 1.337, 
                    m = 1.337, 
                    max_indexing_threads = 1.337, 
                    on_disk = True, 
                    payload_m = null, ),
                optimizer_config = pyvectorize.models._indexes_info_get_200_response_result_config_optimizer_config._indexes_info_get_200_response_result_config_optimizer_config(
                    default_segment_number = 1.337, 
                    deleted_threshold = 1.337, 
                    flush_interval_sec = 1.337, 
                    indexing_threshold = 1.337, 
                    max_optimization_threads = null, 
                    max_segment_size = null, 
                    memmap_threshold = null, 
                    vacuum_min_vector_number = 1.337, ),
                params = pyvectorize.models._indexes_info_get_200_response_result_config_params._indexes_info_get_200_response_result_config_params(
                    on_disk_payload = True, 
                    read_fan_out_factor = null, 
                    replication_factor = 1.337, 
                    shard_number = 1.337, 
                    sharding_method = null, 
                    sparse_vectors = null, 
                    vectors = pyvectorize.models.vectors.vectors(), 
                    write_consistency_factor = 1.337, ),
                wal_config = pyvectorize.models._indexes_info_get_200_response_result_config_wal_config._indexes_info_get_200_response_result_config_wal_config(
                    wal_capacity_mb = 1.337, 
                    wal_segments_ahead = 1.337, ),
        )
        """

    def testIndexesInfoGet200ResponseResultConfig(self):
        """Test IndexesInfoGet200ResponseResultConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
