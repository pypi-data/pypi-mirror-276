# coding: utf-8

"""
    vectorize.sh API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pyvectorize.models.indexes_info_get200_response import IndexesInfoGet200Response

class TestIndexesInfoGet200Response(unittest.TestCase):
    """IndexesInfoGet200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IndexesInfoGet200Response:
        """Test IndexesInfoGet200Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IndexesInfoGet200Response`
        """
        model = IndexesInfoGet200Response()
        if include_optional:
            return IndexesInfoGet200Response(
                result = pyvectorize.models._indexes_info_get_200_response_result._indexes_info_get_200_response_result(
                    config = pyvectorize.models._indexes_info_get_200_response_result_config._indexes_info_get_200_response_result_config(
                        hnsw_config = pyvectorize.models._indexes_info_get_200_response_result_config_hnsw_config._indexes_info_get_200_response_result_config_hnsw_config(
                            ef_construct = 1.337, 
                            full_scan_threshold = 1.337, 
                            m = 1.337, 
                            max_indexing_threads = 1.337, 
                            on_disk = True, 
                            payload_m = null, ), 
                        optimizer_config = pyvectorize.models._indexes_info_get_200_response_result_config_optimizer_config._indexes_info_get_200_response_result_config_optimizer_config(
                            default_segment_number = 1.337, 
                            deleted_threshold = 1.337, 
                            flush_interval_sec = 1.337, 
                            indexing_threshold = 1.337, 
                            max_optimization_threads = null, 
                            max_segment_size = null, 
                            memmap_threshold = null, 
                            vacuum_min_vector_number = 1.337, ), 
                        params = pyvectorize.models._indexes_info_get_200_response_result_config_params._indexes_info_get_200_response_result_config_params(
                            on_disk_payload = True, 
                            read_fan_out_factor = null, 
                            replication_factor = 1.337, 
                            shard_number = 1.337, 
                            sharding_method = null, 
                            sparse_vectors = null, 
                            vectors = pyvectorize.models.vectors.vectors(), 
                            write_consistency_factor = 1.337, ), 
                        quantization_config = null, 
                        wal_config = pyvectorize.models._indexes_info_get_200_response_result_config_wal_config._indexes_info_get_200_response_result_config_wal_config(
                            wal_capacity_mb = 1.337, 
                            wal_segments_ahead = 1.337, ), ), 
                    indexed_vectors_count = 1.337, 
                    optimizer_status = '', 
                    payload_schema = {
                        'key' : null
                        }, 
                    points_count = 1.337, 
                    segments_count = 1.337, 
                    status = '', 
                    vectors_count = null, )
            )
        else:
            return IndexesInfoGet200Response(
                result = pyvectorize.models._indexes_info_get_200_response_result._indexes_info_get_200_response_result(
                    config = pyvectorize.models._indexes_info_get_200_response_result_config._indexes_info_get_200_response_result_config(
                        hnsw_config = pyvectorize.models._indexes_info_get_200_response_result_config_hnsw_config._indexes_info_get_200_response_result_config_hnsw_config(
                            ef_construct = 1.337, 
                            full_scan_threshold = 1.337, 
                            m = 1.337, 
                            max_indexing_threads = 1.337, 
                            on_disk = True, 
                            payload_m = null, ), 
                        optimizer_config = pyvectorize.models._indexes_info_get_200_response_result_config_optimizer_config._indexes_info_get_200_response_result_config_optimizer_config(
                            default_segment_number = 1.337, 
                            deleted_threshold = 1.337, 
                            flush_interval_sec = 1.337, 
                            indexing_threshold = 1.337, 
                            max_optimization_threads = null, 
                            max_segment_size = null, 
                            memmap_threshold = null, 
                            vacuum_min_vector_number = 1.337, ), 
                        params = pyvectorize.models._indexes_info_get_200_response_result_config_params._indexes_info_get_200_response_result_config_params(
                            on_disk_payload = True, 
                            read_fan_out_factor = null, 
                            replication_factor = 1.337, 
                            shard_number = 1.337, 
                            sharding_method = null, 
                            sparse_vectors = null, 
                            vectors = pyvectorize.models.vectors.vectors(), 
                            write_consistency_factor = 1.337, ), 
                        quantization_config = null, 
                        wal_config = pyvectorize.models._indexes_info_get_200_response_result_config_wal_config._indexes_info_get_200_response_result_config_wal_config(
                            wal_capacity_mb = 1.337, 
                            wal_segments_ahead = 1.337, ), ), 
                    indexed_vectors_count = 1.337, 
                    optimizer_status = '', 
                    payload_schema = {
                        'key' : null
                        }, 
                    points_count = 1.337, 
                    segments_count = 1.337, 
                    status = '', 
                    vectors_count = null, ),
        )
        """

    def testIndexesInfoGet200Response(self):
        """Test IndexesInfoGet200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
