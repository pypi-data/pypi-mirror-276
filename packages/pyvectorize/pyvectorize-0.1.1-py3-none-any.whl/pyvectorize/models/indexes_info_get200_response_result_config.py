# coding: utf-8

"""
    vectorize.sh API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from pyvectorize.models.indexes_info_get200_response_result_config_hnsw_config import IndexesInfoGet200ResponseResultConfigHnswConfig
from pyvectorize.models.indexes_info_get200_response_result_config_optimizer_config import IndexesInfoGet200ResponseResultConfigOptimizerConfig
from pyvectorize.models.indexes_info_get200_response_result_config_params import IndexesInfoGet200ResponseResultConfigParams
from pyvectorize.models.indexes_info_get200_response_result_config_wal_config import IndexesInfoGet200ResponseResultConfigWalConfig
from typing import Optional, Set
from typing_extensions import Self

class IndexesInfoGet200ResponseResultConfig(BaseModel):
    """
    IndexesInfoGet200ResponseResultConfig
    """ # noqa: E501
    hnsw_config: IndexesInfoGet200ResponseResultConfigHnswConfig
    optimizer_config: IndexesInfoGet200ResponseResultConfigOptimizerConfig
    params: IndexesInfoGet200ResponseResultConfigParams
    quantization_config: Optional[Any] = None
    wal_config: IndexesInfoGet200ResponseResultConfigWalConfig
    __properties: ClassVar[List[str]] = ["hnsw_config", "optimizer_config", "params", "quantization_config", "wal_config"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IndexesInfoGet200ResponseResultConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of hnsw_config
        if self.hnsw_config:
            _dict['hnsw_config'] = self.hnsw_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of optimizer_config
        if self.optimizer_config:
            _dict['optimizer_config'] = self.optimizer_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of params
        if self.params:
            _dict['params'] = self.params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wal_config
        if self.wal_config:
            _dict['wal_config'] = self.wal_config.to_dict()
        # set to None if quantization_config (nullable) is None
        # and model_fields_set contains the field
        if self.quantization_config is None and "quantization_config" in self.model_fields_set:
            _dict['quantization_config'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IndexesInfoGet200ResponseResultConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hnsw_config": IndexesInfoGet200ResponseResultConfigHnswConfig.from_dict(obj["hnsw_config"]) if obj.get("hnsw_config") is not None else None,
            "optimizer_config": IndexesInfoGet200ResponseResultConfigOptimizerConfig.from_dict(obj["optimizer_config"]) if obj.get("optimizer_config") is not None else None,
            "params": IndexesInfoGet200ResponseResultConfigParams.from_dict(obj["params"]) if obj.get("params") is not None else None,
            "quantization_config": obj.get("quantization_config"),
            "wal_config": IndexesInfoGet200ResponseResultConfigWalConfig.from_dict(obj["wal_config"]) if obj.get("wal_config") is not None else None
        })
        return _obj


