Metadata-Version: 2.1
Name: pykinml
Version: 1.0.1
Summary: Neural Net Potential Energy Surface
Author-email: cjdever <cjdever@sandia.gov>, cmartia <cmartia@sandia.gov>, Judit ZÃ¡dor <jzador@sandia.gov>, Habib Najm <hnnajm@sandia.gov>
Maintainer-email: cjdever <cjdever@sandia.gov>
License: Copyright 2024 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
        Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains certain rights in this software.        
Project-URL: homepage, https://github.com/sandialabs/pykinml
Project-URL: documentation, https://github.com/sandialabs/pykinml/wiki
Classifier: Environment :: Console
Classifier: Intended Audience :: Science/Research
Classifier: Natural Language :: English
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Topic :: Scientific/Engineering :: Chemistry
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy (>=1.17.0)
Requires-Dist: ase (>=3.19)
Requires-Dist: h5py (>=3.7.0)
Requires-Dist: pandas
Requires-Dist: aevmod
Provides-Extra: plot

# pyKinML: Package for training Neural Net Potential Energy Surfaces



## Description
This repository contains the code to train NNPESs and use those models with an ASE calculator.

### How to install

This package can be installed with pip or by cloning this repo and installing it locally.

## Install with pip:

    pip install pykinml

### Clone from repo:
    git clone git@github.com:sandialabs/pykinml.git


This package relies on PyTorch_scatter to sum the atomic contributions to energy. Ensure you have the proper version. Instructions for installation can be found at:
https://github.com/rusty1s/pytorch_scatter

We also highly recomend (required for force training) using the aevmod package for calculation of the aevs and their jacobians:
https://github.com/sandialabs/aevmod.git

For transition state optimization, we recomend Sella:
https://github.com/zadorlab/sella
