import{v as c,O as s}from"./index.4b0c73b8.js";import"./sha256.8dba905a.js";import{l as d}from"./index.9217c1fa.js";const g=async(a="")=>{let o=null;const n=await fetch(`${c}/config`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(console.log(t),"detail"in t?o=t.detail:o="Server connection failed",null));if(o)throw o;return n},j=async(a="",o)=>{let n=null;const t=await fetch(`${c}/config/update`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}},body:JSON.stringify({enable_ollama_api:o})}).then(async e=>{if(!e.ok)throw await e.json();return e.json()}).catch(e=>(console.log(e),"detail"in e?n=e.detail:n="Server connection failed",null));if(n)throw n;return t},m=async(a="")=>{let o=null;const n=await fetch(`${c}/urls`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(console.log(t),"detail"in t?o=t.detail:o="Server connection failed",null));if(o)throw o;return n.OLLAMA_BASE_URLS},A=async(a="",o)=>{let n=null;const t=await fetch(`${c}/urls/update`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}},body:JSON.stringify({urls:o})}).then(async e=>{if(!e.ok)throw await e.json();return e.json()}).catch(e=>(console.log(e),"detail"in e?n=e.detail:n="Server connection failed",null));if(n)throw n;return t.OLLAMA_BASE_URLS},$=async(a,o)=>{let n=null;const t=await fetch(`${c}/api/version${o?`/${o}`:""}`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}}}).then(async e=>{if(!e.ok)throw await e.json();return e.json()}).catch(e=>(console.log(e),"detail"in e?n=e.detail:n="Server connection failed",null));if(n)throw n;return(t==null?void 0:t.version)??!1},S=async(a="",o)=>{let n=new AbortController,t=null;const e=await fetch(`${c}/api/chat`,{signal:n.signal,method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${a}`},body:JSON.stringify(o)}).catch(i=>(t=i,null));if(t)throw t;return[e,n]},O=async(a="",o)=>{let n=null;const t=await fetch(`${c}/cancel/${o}`,{method:"GET",headers:{"Content-Type":"text/event-stream",Authorization:`Bearer ${a}`}}).catch(e=>(n=e,null));if(n)throw n;return t},T=async(a,o,n)=>{let t=null;const e=await fetch(`${c}/api/create`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${a}`},body:JSON.stringify({name:o,modelfile:n})}).catch(i=>(t=i,null));if(t)throw t;return e},C=async(a,o,n=null)=>{let t=null;const e=await fetch(`${c}/api/delete${n!==null?`/${n}`:""}`,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${a}`},body:JSON.stringify({name:o})}).then(async i=>{if(!i.ok)throw await i.json();return i.json()}).then(i=>(console.log(i),!0)).catch(i=>(console.log(i),t=i,"detail"in i&&(t=i.detail),null));if(t)throw t;return e},B=async(a,o,n=null)=>{let t=null;const e=await fetch(`${c}/api/pull${n!==null?`/${n}`:""}`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${a}`},body:JSON.stringify({name:o})}).catch(i=>(console.log(i),t=i,"detail"in i&&(t=i.detail),null));if(t)throw t;return e},P=async(a,o,n=null)=>{let t=null;const e=await fetch(`${c}/models/download${n!==null?`/${n}`:""}`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${a}`},body:JSON.stringify({url:o})}).catch(i=>(console.log(i),t=i,"detail"in i&&(t=i.detail),null));if(t)throw t;return e},E=async(a,o,n=null)=>{let t=null;const e=new FormData;e.append("file",o);const i=await fetch(`${c}/models/upload${n!==null?`/${n}`:""}`,{method:"POST",headers:{Authorization:`Bearer ${a}`},body:e}).catch(r=>(console.log(r),t=r,"detail"in r&&(t=r.detail),null));if(t)throw t;return i},z=async(a="")=>{let o=null;const n=await fetch(`${s}/config`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(console.log(t),"detail"in t?o=t.detail:o="Server connection failed",null));if(o)throw o;return n},_=async(a="",o)=>{let n=null;const t=await fetch(`${s}/config/update`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}},body:JSON.stringify({enable_openai_api:o})}).then(async e=>{if(!e.ok)throw await e.json();return e.json()}).catch(e=>(console.log(e),"detail"in e?n=e.detail:n="Server connection failed",null));if(n)throw n;return t},b=async(a="")=>{let o=null;const n=await fetch(`${s}/urls`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(console.log(t),"detail"in t?o=t.detail:o="Server connection failed",null));if(o)throw o;return n.OPENAI_API_BASE_URLS},v=async(a="",o)=>{let n=null;const t=await fetch(`${s}/urls/update`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}},body:JSON.stringify({urls:o})}).then(async e=>{if(!e.ok)throw await e.json();return e.json()}).catch(e=>(console.log(e),"detail"in e?n=e.detail:n="Server connection failed",null));if(n)throw n;return t.OPENAI_API_BASE_URLS},N=async(a="")=>{let o=null;const n=await fetch(`${s}/keys`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}}}).then(async t=>{if(!t.ok)throw await t.json();return t.json()}).catch(t=>(console.log(t),"detail"in t?o=t.detail:o="Server connection failed",null));if(o)throw o;return n.OPENAI_API_KEYS},I=async(a="",o)=>{let n=null;const t=await fetch(`${s}/keys/update`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}},body:JSON.stringify({keys:o})}).then(async e=>{if(!e.ok)throw await e.json();return e.json()}).catch(e=>(console.log(e),"detail"in e?n=e.detail:n="Server connection failed",null));if(n)throw n;return t.OPENAI_API_KEYS},J=async(a,o)=>{let n=null;const t=await fetch(`${s}/models${typeof o=="number"?`/${o}`:""}`,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json",...a&&{authorization:`Bearer ${a}`}}}).then(async e=>{if(!e.ok)throw await e.json();return e.json()}).catch(e=>{var i;return n=`OpenAI: ${((i=e==null?void 0:e.error)==null?void 0:i.message)??"Network Problem"}`,[]});if(n)throw n;return t},L=async(a="",o,n=s)=>{const t=new AbortController;let e=null;const i=await fetch(`${n}/chat/completions`,{signal:t.signal,method:"POST",headers:{Authorization:`Bearer ${a}`,"Content-Type":"application/json"},body:JSON.stringify(o)}).catch(r=>(console.log(r),e=r,null));if(e)throw e;return[i,t]},U=async(a="",o,n,t,e,i=s)=>{var p,u;let r=null;o=d(o,t),console.log(o);const h=await fetch(`${i}/chat/completions`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${a}`},body:JSON.stringify({model:n,messages:[{role:"user",content:o}],stream:!1,max_tokens:50,...e&&{chat_id:e},title:!0})}).then(async l=>{if(!l.ok)throw await l.json();return l.json()}).catch(l=>(console.log(l),"detail"in l&&(r=l.detail),null));if(r)throw r;return((u=(p=h==null?void 0:h.choices[0])==null?void 0:p.message)==null?void 0:u.content.replace(/["']/g,""))??"New Chat"},k=async(a="",o,n,t,e=s)=>{var p,u;let i=null;const r=new Intl.DateTimeFormat("en-US",{year:"numeric",month:"long",day:"2-digit"}).format(new Date),h=await fetch(`${e}/chat/completions`,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:`Bearer ${a}`},body:JSON.stringify({model:o,messages:[{role:"assistant",content:`You are tasked with generating web search queries. Give me an appropriate query to answer my question for google search. Answer with only the query. Today is ${r}.`},{role:"user",content:t}],stream:!1,max_tokens:30})}).then(async l=>{if(!l.ok)throw await l.json();return l.json()}).catch(l=>{console.log(l),"detail"in l&&(i=l.detail)});if(i)throw i;return((u=(p=h==null?void 0:h.choices[0])==null?void 0:p.message)==null?void 0:u.content.replace(/["']/g,""))??void 0};export{g as a,m as b,O as c,C as d,P as e,T as f,$ as g,b as h,N as i,J as j,z as k,v as l,I as m,A as n,j as o,B as p,_ as q,S as r,L as s,U as t,E as u,k as v};
//# sourceMappingURL=index.53ab41ec.js.map
