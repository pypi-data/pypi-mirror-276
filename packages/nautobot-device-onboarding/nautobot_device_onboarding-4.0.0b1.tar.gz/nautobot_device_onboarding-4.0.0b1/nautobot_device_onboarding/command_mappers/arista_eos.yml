---
sync_devices:
  hostname:
    commands:
      command: "show hostname"
      parser: "textfsm"
      jpath: "[*].hostname"
  serial:
    commands:
      - command: "show version"
        parser: "textfsm"
        jpath: "[*].serial_number"
  device_type:
    commands:
      - command: "show version"
        parser: "textfsm"
        jpath: "[*].model"
  mgmt_interface:
    commands:
      - command: "show ip interface brief | json"
        parser: "none"
        jpath: "interfaces.*.{name: name, match_ip: interfaceAddress.ipAddr.address==`{{ obj }}`}[?match_ip].name"
  mask_length:
    commands:
      - command: "show ip interface brief | json"
        parser: "none"
        jpath: "interfaces.*.interfaceAddress[?ipAddr.address==`{{ obj }}`].ipAddr.maskLen"
        post_processor: "{{ obj[0] }}"
sync_network_data:
  serial:
    commands:
      - command: "show version"
        parser: "textfsm"
        jpath: "[*].serial_number"
  interfaces:
    root_key: true
    commands:
      - command: "show interfaces | json"
        parser: "none"
        jpath: "interfaces.*.name"  # when root_key=true this extracted value is what becomes interable in keys using __ under `current_key`.
        post_processor: "{% set result={} %}{% for interface in obj %}{{ result.update({interface: {}}) or '' }}{% endfor %}{{ result | tojson }}"
  interfaces__type:
    commands:
      - command: "show interfaces | json"
        parser: "none"
        jpath: 'interfaces."{{ current_key }}".hardware'  # yamllint disable-line rule:quoted-strings
        post_processor: "{{ obj | map_interface_type }}"
  interfaces__ip_addresses:
    commands:
      - command: "show interfaces | json"
        parser: "none"
        # jpath: 'interfaces."{{ current_key }}".interfaceAddress[].[{ip_address: primaryIp.address, prefix_length: primaryIp.maskLen},{ip_address: secondaryIps.address, prefix_length: secondaryIps.maskLen}][]'
        jpath: 'interfaces."{{ current_key }}".interfaceAddress[].[{ip_address: primaryIp.address, prefix_length: primaryIp.maskLen }][]' # yamllint disable-line rule:quoted-strings
        post_processor: "{{ obj | tojson }}"
  interfaces__mtu:
    commands:
      - command: "show interfaces | json"
        parser: "none"
        jpath: 'interfaces."{{ current_key }}".[mtu]'  # yamllint disable-line rule:quoted-strings
        post_processor: "{{ obj[0] }}"
  interfaces__mac_address:
    commands:
      - command: "show interfaces | json"
        parser: "none"
        jpath: 'interfaces."{{ current_key }}".physicalAddress'  # yamllint disable-line rule:quoted-strings
  interfaces__description:
    commands:
      - command: "show interfaces | json"
        parser: "none"
        jpath: 'interfaces."{{ current_key }}".description'  # yamllint disable-line rule:quoted-strings
  interfaces__link_status:
    commands:
      - command: "show interfaces | json"
        parser: "none"
        jpath: 'interfaces."{{ current_key }}".lineProtocolStatus'  # yamllint disable-line rule:quoted-strings
        post_processor: "{{ obj | interface_status_to_bool }}"
  interfaces__802.1Q_mode:
    commands:
      - command: "show interfaces | json"
        parser: "none"
        jpath: 'interfaces."{{ current_key }}".forwardingModel'  # yamllint disable-line rule:quoted-strings
        post_processor: "{{ obj | port_mode_to_nautobot }}"
  interfaces__lag:
    commands:
      - command: "show interfaces | json"
        parser: "none"
        jpath: 'interfaces."{{ current_key }}".interfaceMembership'  # yamllint disable-line rule:quoted-strings
        post_processor: "{% if obj | length > 0 %}{{ obj.split()[-1] }}{% else %}{{ obj }}{% endif %}"
  interfaces__vrf:
    commands:
      - command: "show ip interface | json"
        parser: "none"
        jpath: "interfaces.*.{name: name, vrf: vrf}[?name==`{{ current_key }}`].{name: vrf}"
        post_processor: "{% if obj | length > 0 %}{{ obj[0] | tojson }}{% else %}{{ obj }}{% endif %}"
        iterable_type: "dict"
# interfaces__tagged_vlans:
#   commands:
#     - command: "show vlan"
#       parser: "textfsm"
#       jpath: "[*].{id: vlan_id, name: vlan_name, interfaces: interfaces}"
# interfaces__untagged_vlan:
#   commands:
#     - command: "show vlan"
#       parser: "textfsm"
#       jpath: "[*].{id: vlan_id, name: vlan_name, interfaces: interfaces}"
#       iterable_type: "dict"
