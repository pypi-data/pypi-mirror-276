---
sync_devices:
  hostname:
    commands:
      - command: "show version"
        parser: "textfsm"
        jpath: "[*].hostname"
  serial:
    commands:
      - command: "show inventory"
        parser: "textfsm"
        jpath: "[?name=='Chassis'].sn"
  device_type:
    commands:
      - command: "show inventory"
        parser: "textfsm"
        jpath: "[?name=='Chassis'].descr"
  mgmt_interface:
    commands:
      - command: "show ip interface brief vrf all"
        parser: "textfsm"
        jpath: "[?ip_address=='{{ obj }}'].interface || [`mgmt0`]"
  mask_length:
    commands:
      - command: "show ip interface vrf all"
        parser: "textfsm"
        jpath: "[?ip_address=='{{ obj }}'].subnet"
        # jpath: "*[].ROW_intf.{prefix: prefix, subnet:masklen} | [?prefix=='{{ obj }}'].subnet"
        post_processor: "{% if '/' in obj[0] %}{{ obj[0].split('/')[1] }}{% else %}31{% endif %}"
        # post_processor: "{{ obj[0] | string }}"
sync_network_data:
  serial:
    commands:
      - command: "show inventory"
        parser: "textfsm"
        jpath: "[?name=='Chassis'].sn"
        # jpath: "TABLE_inv.ROW_inv[?name == 'Chassis'].serialnum"
  interfaces:
    root_key: true
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[*].interface"  # when root_key=true this extracted value is what becomes interable in keys using __ under `current_key`.
        post_processor: "{% set result={} %}{% for interface in obj %}{{ result.update({interface: {}}) or '' }}{% endfor %}{{ result | tojson }}"
  interfaces__type:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].hardware_type"
        post_processor: "{{ obj[0] | map_interface_type }}"
  interfaces__ip_addresses:
    commands:
      - command: "show ip interface vrf all"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].{ip_address: ip_address, prefix_length: subnet}"
        post_processor: "{% set result = [] %}{% for ip in obj %}{% set _=result.append({'ip_address': ip['ip_address'], 'prefix_length': ip['prefix_length'] | extract_prefix }) %}{% endfor %}{{ result | tojson }}"
        iterable_type: "list"
  interfaces__mtu:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].mtu"
  interfaces__mac_address:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].mac_address"
  interfaces__description:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].description"
  interfaces__link_status:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].link_status"
        post_processor: "{{ obj[0] | interface_status_to_bool }}"
  interfaces__802.1Q_mode:
    commands:
      - command: "show interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].mode"
        post_processor: "{% if obj | length > 0 %}{{ obj[0] | port_mode_to_nautobot }}{% else %}{{ obj }}{% endif %}"
        iterable_type: "str"
  interfaces__lag:
    commands:
      - command: "show port-channel summary"
        parser: "textfsm"
        jpath: "[?contains(@.member_interface, `{{ current_key | abbreviated_interface_name }}`)].bundle_name"
        post_processor: "{% if obj | length > 0 %}{{ obj[0] | canonical_interface_name }}{% else %}[]{% endif %}"
        iterable_type: "str"
  interfaces__vrf:
    commands:
      - command: "show vrf interface"
        parser: "textfsm"
        jpath: "[?interface=='{{ current_key }}'].{name:name}"
        iterable_type: "dict"
  interfaces__tagged_vlans:
    commands:
      - command: "show vlan"
        parser: "textfsm"
        jpath: "[*].{id: vlan_id, name: vlan_name, interfaces: interfaces}"
        post_processor: "{% set tagged_vlans = [] %}{% for v in obj %}{% if current_key in v['interfaces'] | canonical_interface_name_list %}{% set _=tagged_vlans.append({'id': v['id'], 'name': v['name']}) %}{% endif %}{% endfor %}{{ tagged_vlans | tojson }}"
  interfaces__untagged_vlan:
    commands:
      - command: "show vlan"
        parser: "textfsm"
        jpath: "[*].{id: vlan_id, name: vlan_name, interfaces: interfaces}"
        iterable_type: "dict"
        post_processor: "{% set untagged_vlan = [] %}{% for v in obj %}{% if current_key in v['interfaces'] | canonical_interface_name_list %}{% set _=untagged_vlan.append({'id': v['id'], 'name': v['name']}) %}{% endif %}{% endfor %}{{ untagged_vlan | tojson }}"
