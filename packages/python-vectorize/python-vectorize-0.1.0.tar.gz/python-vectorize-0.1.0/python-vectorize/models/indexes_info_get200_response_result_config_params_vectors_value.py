# coding: utf-8

"""
    vectorize.sh API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class IndexesInfoGet200ResponseResultConfigParamsVectorsValue(BaseModel):
    """
    IndexesInfoGet200ResponseResultConfigParamsVectorsValue
    """ # noqa: E501
    datatype: Optional[Any] = None
    distance: StrictStr
    hnsw_config: Optional[Any] = None
    on_disk: Optional[Any] = None
    quantization_config: Optional[Any] = None
    size: Union[StrictFloat, StrictInt]
    __properties: ClassVar[List[str]] = ["datatype", "distance", "hnsw_config", "on_disk", "quantization_config", "size"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IndexesInfoGet200ResponseResultConfigParamsVectorsValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if datatype (nullable) is None
        # and model_fields_set contains the field
        if self.datatype is None and "datatype" in self.model_fields_set:
            _dict['datatype'] = None

        # set to None if hnsw_config (nullable) is None
        # and model_fields_set contains the field
        if self.hnsw_config is None and "hnsw_config" in self.model_fields_set:
            _dict['hnsw_config'] = None

        # set to None if on_disk (nullable) is None
        # and model_fields_set contains the field
        if self.on_disk is None and "on_disk" in self.model_fields_set:
            _dict['on_disk'] = None

        # set to None if quantization_config (nullable) is None
        # and model_fields_set contains the field
        if self.quantization_config is None and "quantization_config" in self.model_fields_set:
            _dict['quantization_config'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IndexesInfoGet200ResponseResultConfigParamsVectorsValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datatype": obj.get("datatype"),
            "distance": obj.get("distance"),
            "hnsw_config": obj.get("hnsw_config"),
            "on_disk": obj.get("on_disk"),
            "quantization_config": obj.get("quantization_config"),
            "size": obj.get("size")
        })
        return _obj


