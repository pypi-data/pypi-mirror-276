from {{ inject.__module__ }} import {{ inject.__name__ }}
from injector_collections import Collection
from typing import Type
{%- for collection, citems in collectionItems|items %}
{%- for (className, class) in citems %}
from {{ class.__module__ }} import {{ className }}
{%- endfor %}
{%- endfor %}

{%- for collection, citems in collectionItems|items %}
{% if True %}{% endif %}
import {{ collection.getItemType().__module__ }}
class {{ collection.__name__ }}(Collection):
    @{{ inject.__name__ }}
    def __init__(
            self,
            {%- for (className, class) in citems %}
            v{{ className }}: {{ className }},
            {%- endfor %}
            ) -> None:
        super().__init__()
        {%- for (className, class) in citems %}
        self[{{ className }}] = v{{ className }}
        self.byClassname['{{ className }}'] = v{{ className }}
        {%- endfor %}

    @property
    def items(self) -> dict[Type[{{ collection.getItemType() }}], {{ collection.getItemType() }}]:
        return self._items

    def __getitem__(self, key: Type[{{ collection.getItemType() }}]) -> {{ collection.getItemType() }}:
        return self._items[key]

    def __setitem__(self, key: Type[{{ collection.getItemType() }}], item: {{ collection.getItemType() }}):
        self._items[key] = item

    @property
    def byClassname(self) -> dict[str, {{ collection.getItemType() }}]:
        return self._byClassname

    @classmethod
    def getItemType(cls):
        return {{ collection.getItemType() }}
{%- endfor %}
